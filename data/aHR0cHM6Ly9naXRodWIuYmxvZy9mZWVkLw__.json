{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "衡量重要之事：GitHub MCP 服务器的离线评估如何运作 (原标题: Measuring what matters: How offline evaluation of GitHub MCP Server works)",
      "link": "https://github.blog/ai-and-ml/generative-ai/measuring-what-matters-how-offline-evaluation-of-github-mcp-server-works/",
      "pubDate": "Thu, 30 Oct 2025 21:46:07 +0000",
      "isoDate": "2025-10-30T21:46:07.000Z",
      "creator": "Ksenia Bobrova",
      "summary": "# GitHub MCP 服务器离线评估：衡量重要之事\n\n本文深入探讨了 GitHub MCP 服务器的自动化离线评估流程，旨在实现快速、严格的质量评估。\n\n## MCP (Model Context Protocol) 简介\n\n*   **定义**：MCP 是一种通用协议，使 AI 模型（LLM）能够与 API 和数据通信，如同“通用插头”。\n*   **MCP 服务器**：提供模型可用工具的服务或应用程序，发布工具列表、功能描述及所需参数。\n*   **GitHub MCP 服务器**：作为许多 GitHub Copilot 工作流的基础。\n\n## 面临的挑战与离线评估的必要性\n\nGitHub MCP 团队在交付新功能时，需避免回归并提升质量。工具的命名、描述和参数定义直接影响模型选择正确工具及参数。即使是微小编辑也可能显著改变结果，不准确的描述会导致模型选择错误工具或提供错误参数，影响性能。\n\n为安全修改 MCP 并确保改进，离线评估至关重要。它能在用户发现回归前捕获问题，缩短反馈周期，确保发布的更改真正提升性能。\n\n## 自动化离线评估工作原理\n\n离线评估流程检查工具提示在不同模型上的表现。工具指令设计得简单精确，以便模型选择正确工具并填入正确参数。我们系统地测试每个模型与 MCP 的配对，以衡量兼容性、质量和差距。\n\n### MCP 托管机制（分步说明）\n\n1.  **工具暴露**：MCP 服务器暴露工具（名称、描述、所需输入）。\n2.  **工具列表获取**：代理拉取工具列表并提供给 LLM。\n3.  **用户请求**：LLM 决定是否需要工具。\n4.  **工具选择与参数填充**：LLM 选择工具并填入输入参数。\n5.  **工具调用**：代理在 MCP 服务器上调用工具，并将结果返回给 LLM。\n6.  **最终答案形成**：LLM 根据工具结果形成最终答案。\n\n### 基准数据集\n\n我们使用精心策划的基准数据集进行评估，每个基准包含：\n\n*   **输入**：自然语言用户请求。\n*   **预期工具**：期望被调用的工具。\n*   **预期参数**：期望传递给每个工具的参数。\n\n**示例：**\n\n*   查询特定仓库在特定时间段内创建的问题数量。\n*   使用指定合并方式和标题合并拉取请求。\n*   为特定拉取请求请求指定审查者。\n*   总结特定仓库中讨论的评论。\n\n## 评估流程\n\n评估流程分为三个阶段：\n\n1.  **履行 (Fulfillment)**：针对多个模型运行基准测试，记录模型调用的工具及其参数。\n2.  **评估 (Evaluation)**：处理原始输出并计算指标和分数。\n3.  **汇总 (Summarization)**：聚合数据集统计数据并生成最终评估报告。\n\n## 评估指标与算法\n\n评估目标是工具选择和参数正确性。\n\n### 工具选择\n\n当涉及单个工具调用时，工具选择是多分类问题。评估指标包括：\n\n*   **准确率 (Accuracy)**：正确分类的百分比。\n*   **精确率 (Precision)**：在所有调用该工具的案例中，工具被正确调用的比例。\n*   **召回率 (Recall)**：在所有预期调用给定工具的案例中，工具被正确调用的比例。\n*   **F1 分数 (F1-score)**：精确率和召回率的调和平均值。\n\n**混淆示例与混淆矩阵：**\n\n模型可能混淆相似工具，如 `list_issues` 和 `search_issues`，导致精确率或召回率降低。例如，如果 `list_issues` 在 10 个预期案例中都正确调用，但在 30% 应该调用 `search_issues` 的案例中也被调用，则 `list_issues` 精确率为 0.77，`search_issues` 召回率为 0.7。\n\n**混淆矩阵**用于可视化工具间的混淆情况，帮助识别问题并调整工具描述。\n\n| 预期工具 / 调用工具 | `search_issues` | `list_issues` |\n| :------------------ | :-------------- | :------------ |\n| `search_issues`     | 7               | 3             |\n| `list_issues`       | 0               | 10            |\n\n### 参数正确性\n\n模型必须提供正确的参数。我们跟踪四个参数质量指标：\n\n*   **参数幻觉**：模型提供工具未定义的参数名称的频率。\n*   **所有预期参数提供**：是否提供了所有预期参数。\n*   **所有必需参数提供**：是否包含了所有必需参数。\n*   **精确值匹配**：提供的参数值是否与预期值完全匹配。\n\n这些指标针对正确选择的工具进行计算，最终报告总结每个工具的表现。\n\n## 展望与改进\n\n*   **增加基准测试量**：当前基准测试量不足，需增加更多示例以提高评估可靠性。\n*   **多工具流程评估**：当前管道仅处理单个工具调用。未来需扩展以评估多工具顺序调用流程，可能涉及实际执行或模拟工具响应，并将汇总方式更新为多标签分类。\n\n## 总结\n\n离线评估为 MCP 迭代提供了快速、安全的方式，确保模型选择正确的 GitHub 工具和参数。通过结合基准测试与清晰指标，我们将模糊的“似乎更好”转化为可衡量的进展。未来将扩大基准覆盖、完善工具描述并扩展管道以处理多工具流程，从而实现更少的回归、更清晰的洞察和更可靠的代理，最终提升产品质量而不减慢交付速度。",
      "shortSummary": "GitHub MCP 服务器采用离线评估机制，以确保 AI 模型（如 GitHub Copilot）能准确选择工具并提供正确参数。该系统通过自动化流程，结合精心策划的基准数据集，评估工具选择（使用准确率、精确率、召回率等分类指标）和参数正确性（检查参数幻觉、完整性及值匹配）。离线评估能快速发现并修复回归，从而在不影响交付速度的前提下，持续提升产品质量和模型可靠性。未来计划扩展基准测试和支持多工具流程评估。",
      "translated_title": "衡量重要之事：GitHub MCP 服务器的离线评估如何运作",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Take a look inside our automated pipeline for rapid, rigorous evaluation for the GitHub MCP Server.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/measuring-what-matters-how-offline-evaluation-of-github-mcp-server-works/\">Measuring what matters: How offline evaluation of GitHub MCP Server works</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "推出 Agent HQ：任何智能体，任何工作方式 (原标题: Introducing Agent HQ: Any agent, any way you work)",
      "link": "https://github.blog/news-insights/company-news/welcome-home-agents/",
      "pubDate": "Tue, 28 Oct 2025 16:08:15 +0000",
      "isoDate": "2025-10-28T16:08:15.000Z",
      "creator": "Kyle Daigle",
      "summary": "# GitHub 推出 Agent HQ：任何智能体，任何工作方式\n\nGitHub 宣布推出 Agent HQ，这是其平台进化的下一步愿景，旨在将 AI 智能体原生集成到开发工作流程中，解决当前 AI 工具分散的问题。GitHub 致力于将平台转变为一个开放生态系统，统一所有智能体，让它们以开发者熟悉的方式工作。\n\n## 核心愿景与开放生态系统\n\n*   **解决痛点：** 当前 AI 工具功能强大但分散，GitHub 旨在提供一个统一、无缝的 AI 协作体验。\n*   **原生集成：** 智能体将不再是附加组件，而是作为 GitHub 工作流的本地组成部分。\n*   **多智能体支持：** 在未来几个月内，来自 Anthropic、OpenAI、Google、Cognition 和 xAI 等公司的编码智能体将通过付费 GitHub Copilot 订阅直接在 GitHub 中提供。\n*   **早期访问：** 从本周开始，Copilot Pro+ 用户可以在 VS Code Insiders 中使用 OpenAI Codex，这是首批合作伙伴智能体之一。\n\n![引述：OpenAI、Anthropic 和 Google Labs 的产品负责人对与 GitHub 合作的看法](https://github.blog/wp-content/uploads/2025/10/Quotes_v5.jpg?resize=2796%2C2022)\n\n## 任务控制中心：统一指挥平台\n\nAgent HQ 的核心是“任务控制中心”，这是一个统一的命令中心，可在 GitHub、VS Code、移动端和 CLI 上提供一致的界面，用于指导、监控和管理所有 AI 驱动的任务。\n\n*   **主要功能：**\n    *   选择并并行分配任务给多个智能体。\n    *   从任何设备跟踪智能体进度。\n    *   **新分支控制：** 对智能体创建代码的 CI 和其他检查运行时间进行精细监督。\n    *   **身份功能：** 控制执行任务的智能体，像管理团队成员一样管理其访问权限和策略。\n    *   **效率提升：** 一键解决合并冲突、改进文件导航和代码注释功能。\n    *   **集成：** 新增与 Slack 和 Linear 的集成，以及现有的 Atlassian Jira、Microsoft Teams、Azure Boards 和 Raycast 连接。\n\n![集成伙伴的标志：Slack、Linear、Microsoft Teams、VS Code、Azure Boards、Jira 和 Raycast](https://github.blog/wp-content/uploads/2025/10/BlogImage_LogoWall_02.jpg?resize=1024%2C427)\n\n## VS Code 中的新功能：规划、定制与连接\n\n任务控制中心也集成到 VS Code 中，提供所有智能体（无论是在 VS Code、Copilot CLI 还是 GitHub 上运行）的单一视图。\n\n*   **计划模式 (Plan Mode)：** 帮助开发者在项目开始前通过提问来构建分步方法，确保上下文正确，并在编写代码前发现潜在问题。\n*   **自定义智能体：** 通过 `AGENTS.md` 文件在 VS Code 中创建自定义智能体，设置明确的规则和指导方针，以塑造 Copilot 的行为。\n*   **GitHub MCP 注册表：** 直接在 VS Code 中发现、安装和启用 MCP 服务器（如 Stripe、Figma、Sentry）。\n\n## 提升团队信心与控制力\n\nAgent HQ 不仅增强了能力，还提升了团队的信心和控制力，解决了代码质量、AI 影响和 AI 交互管理等关键挑战。\n\n*   **GitHub 代码质量 (公开预览)：**\n    *   提供组织范围内的可见性、治理和报告，系统性地提高所有仓库的代码可维护性、可靠性和测试覆盖率。\n    *   扩展 Copilot 的安全检查，评估代码更改对可维护性和可靠性的影响。\n    *   在 Copilot 编码智能体的工作流程中添加了代码审查步骤，确保在开发者看到代码之前解决问题。\n\n![GitHub 代码质量截图，显示 Copilot 审查结果](https://github.blog/wp-content/uploads/2025/10/BlogImage_CodeQuality_01.jpg?resize=1024%2C614)\n\n*   **Copilot 指标仪表板 (公开预览)：** 显示 Copilot 在整个组织中的影响和关键使用指标。\n*   **控制平面 (Agent Governance Layer)：** 为企业管理员提供统一的 AI 控制，管理 AI 访问、设置安全策略、审计日志，并控制允许的智能体和模型访问。\n\n## 开发者为本\n\nAgent HQ 由开发者为开发者构建，旨在消除工具带来的摩擦，提供有序且可控的 AI 体验，让开发者能够更快、更自信地构建，并拥有更多自主权。",
      "shortSummary": "GitHub 推出 Agent HQ，旨在将 AI 智能体原生集成到其开发平台中。它是一个开放生态系统，将 Anthropic、OpenAI 等公司的智能体统一在一个“任务控制中心”下，通过现有 Copilot 订阅提供。Agent HQ 提供统一界面、VS Code 增强功能（如计划模式、自定义智能体）以及企业级控制（代码质量、指标仪表板、治理层），确保 AI 在开发工作流中更强大、安全、无缝。目标是让开发者能更自信、高效地利用 AI。",
      "translated_title": "推出 Agent HQ：任何智能体，任何工作方式",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/Quotes_v5.jpg?resize=2796%2C2022",
          "alt": "'Our collaboration with GitHub has always pushed the frontier of how developers build software. The first Codex model helped power Copilot and inspired a new generation of AI-assisted coding. We share GitHub’s vision of meeting developers wherever they work, and we’re excited to bring Codex to millions more developers who use GitHub and VS Code, extending the power of Codex everywhere code gets written.' \n- Alexander Embiricos, Codex Product Lead, OpenAI\n\n'We’re partnering with GitHub to bring Claude even closer to how teams build software. With Agent HQ, Claude can pick up issues, create branches, commit code, and respond to pull requests, working alongside your team like any other collaborator. This is how we think the future of development works: agents and developers building together, on the infrastructure you already trust.' \n- Mike Krieger, Chief Product Officer, Anthropic\n\n'The best developer tools fit seamlessly into your workflow, helping you stay focused and move faster. With Agent HQ, Jules becomes a native assignee, streamlining manual steps and reducing friction in everyday development. This deeper integration with GitHub brings agents closer to where developers already work, making collaboration more natural and efficient.'\n- Kathy Korevec, Director of Product at Google Labs",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/BlogImage_LogoWall_02.jpg?resize=1024%2C427",
          "alt": "Logos for Slack, Linear, Microsoft Teams, VS Code, Azure Boards, Jira, and Raycast.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/BlogImage_CodeQuality_01.jpg?resize=1024%2C614",
          "alt": "Screenshot of GitHub Code Quality, showing the results of Copilot's review.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://avatars.githubusercontent.com/u/2501?v=4&s=200",
          "alt": "Kyle Daigle",
          "title": "",
          "position": 4
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>At Universe 2025, GitHub's next evolution introduces a single, unified workflow for developers to be able to orchestrate any agent, any time, anywhere.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/welcome-home-agents/\">Introducing Agent HQ: Any agent, any way you work</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "Octoverse：每秒一名新开发者加入 GitHub，AI 助力 TypeScript 跃居榜首 (原标题: Octoverse: A new developer joins GitHub every second as AI leads TypeScript to #1)",
      "link": "https://github.blog/news-insights/octoverse/octoverse-a-new-developer-joins-github-every-second-as-ai-leads-typescript-to-1/",
      "pubDate": "Tue, 28 Oct 2025 16:07:06 +0000",
      "isoDate": "2025-10-28T16:07:06.000Z",
      "creator": "GitHub Staff",
      "summary": "# Octoverse 2025：软件开发的关键转变\n\nGitHub 的年度 Octoverse 报告揭示了 AI、代理和类型化语言如何驱动过去十年软件开发领域最大的变革。\n\n## GitHub 增长概览\n\n*   **创纪录的开发者增长**：在过去一年中，平均每秒有超过一名新开发者加入 GitHub，新增逾 3600 万，总数已超过 1.8 亿。这是 GitHub 有史以来最快的绝对增长率。\n*   **GitHub Copilot 的影响**：2024 年底发布的 GitHub Copilot Free 版本，使得开发者注册量出现阶梯式增长，超出了此前的预测。\n*   **活跃度飙升**：GitHub 上的活动达到创纪录水平，开发者每分钟创建超过 230 个新代码库，每月平均合并 4320 万个拉取请求（同比增长 23%），2025 年提交了近 10 亿次代码（同比增长 25.1%），其中 8 月份创下近 1 亿次的单月记录。\n*   **全球扩张**：增长是全球性的，印度今年新增了超过 500 万开发者（占所有新账户的 14% 以上），预计到 2030 年，GitHub 上每三名新开发者中就有一名来自印度。\n\n## 三大关键转变\n\n1.  **生成式 AI 成为开发标准**：\n    *   超过 110 万个公共代码库使用 LLM SDK，其中 693,867 个项目是在过去 12 个月内创建的（同比增长 178%）。\n    *   合并的拉取请求数量达到创纪录的 5.187 亿次（同比增长 29%）。\n    *   AI 采用速度快：80% 的新开发者在加入 GitHub 的第一周内就使用 Copilot。\n2.  **TypeScript 跃居最常用语言榜首**：\n    *   2025 年 8 月，TypeScript 首次超越 Python 和 JavaScript，成为 GitHub 上使用最多的语言，标志着十多年来最重要的语言转变。\n    *   这反映了开发者转向类型化语言的趋势，以提高代理辅助编码在生产环境中的可靠性。\n    *   几乎所有主流前端框架现在都默认使用 TypeScript 进行脚手架。\n    *   尽管如此，Python 在 AI 和数据科学工作负载中仍占主导地位，而 JavaScript/TypeScript 生态系统的总体活跃度仍高于 Python 单独的活跃度。\n3.  **AI 重塑开发者选择**：\n    *   过去，开发者选择意味着选择 IDE、语言或框架。2025 年，这种情况正在改变。\n    *   AI 工具的快速采用与语言偏好演变之间存在关联，表明 AI 不仅影响代码编写速度，还影响开发者使用的语言和工具。\n    *   代理（Agents）已然出现，预计未来几个月和几年将产生更大的影响。\n\n## GitHub 2025 年现状：创纪录的增长之年\n\n*   **开发者数量持续攀升**：GitHub 开发者数量已从 2023 年的 1 亿增长到目前的 1.8 亿以上，过去一年的增长速度是前所未有的。\n*   **AI 采用即时性**：近 80% 的新开发者在加入 GitHub 的第一周内就使用 GitHub Copilot，这表明 AI 已成为新编码者的期望。\n*   **人才多样化**：全球人才蓬勃发展，每分钟约有 25 名开发者来自亚太地区，约 12 名来自欧洲，约 6.5 名来自非洲和中东，约 6 名来自拉丁美洲。印度今年新增了超过 500 万开发者。\n\n## 私有与公共代码库\n\n*   **角色与增长**：2025 年，81.5% 的贡献发生在私有代码库中，而 63% 的代码库是公共的。这突显了 GitHub 的双重作用：日常工作主要在私有项目中进行，但依赖于公共开源项目中的库、模型和框架。\n*   **关键数据**：私有代码库增长速度（同比增长 33%）快于公共代码库（同比增长 19%），反映了 GitHub 上组织级开发的增长。目前有超过 1.8 亿开发者在 GitHub 上，总代码库数量达 6.3 亿，其中 2025 年新增 1.21 亿个，创历史新高。\n\n## 开发者生产力\n\n*   **活动达到历史新高**：2025 年是 GitHub 历史上最活跃的 12 个月，公共和开源项目贡献超过 11.2 亿次。\n*   **活动指标对比**：\n    *   关闭问题：从 2024 年月均 340 万增至 2025 年月均 425 万。\n    *   合并拉取请求：从 2024 年月均 3500 万增至 2025 年月均 4320 万。\n    *   代码推送：从 2024 年月均 6500 万增至 2025 年月均 8219 万。\n*   **AI 工具的影响**：2025 年初，随着 Copilot 编码代理的预览和 Copilot 代码审查的推出，各项活动加速。代码推送是主要驱动力，2025 年提交了超过 9.86 亿次（同比增长 25%）。\n\n## Jupyter Notebooks 和 Dockerfiles\n\n*   **现代开发的两大支柱**：2025 年，240 万个代码库使用 Jupyter Notebooks（同比增长 75%），190 万个使用 Dockerfiles（同比增长 120%）。Notebooks 是成熟的实验工具，而 Dockerfiles 是实现可复现性和生产部署的桥梁。\n*   **增长原因**：这种增长可能源于对沙盒化代理和 LLM 的需求，而容器化是安全运行和扩展它们的实用方法。\n\n## AI 代理进入主流\n\n*   **AI 代码审查的效用**：72.6% 使用 Copilot 代码审查的开发者表示其有效性有所提高。\n*   **“Vibe Coding”现象**：2025 年的一个显著趋势是“vibe coding”，即开发者从一个想法直接跳到可运行的概念验证（通常在 AI 自动补全和可复制的云工具支持下完成）。这预示着编程素养可能大幅扩展。\n\n## 2025 年全球编码格局\n\n*   **新的全球前十**：印度在 2025 年新增了超过 520 万开发者，占 GitHub 新增开发者总数的 14% 以上，成为今年 GitHub 新增开发者的最大来源国。\n*   **区域增长驱动因素**：印度、巴西和印度尼西亚的显著增长得益于庞大且年轻的开发者人口、不断扩大的互联网接入和蓬勃发展的创业生态系统。这些地区在 AI 相关项目方面也增长最快。\n*   **2030 年全球开发者格局预测**：模型预测印度到 2030 年将达到 5750 万开发者，占全球所有新增注册的三分之一以上。美国将是第二大社区，预计超过 4000 万开发者，巴西（1960 万）、日本（1170 万）和英国（1100 万）位列前五。非洲和中东的新兴地区（如埃及、尼日利亚、肯尼亚和摩洛哥）也显示出强劲势头。\n\n## 核心要点\n\n*   今年加入 GitHub 的新开发者中，有三分之一来自 2020 年未进入全球前十的国家。\n*   印度今年新增开发者数量超过任何其他国家，增长速度超过美国。\n*   AI 繁荣是全球性的：GitHub 上生成式 AI 项目的贡献者数量持续快速增长，且这些贡献者遍布全球。\n\n## 2025 年开源：AI 时代的活动与影响力\n\n*   **开源开发创历史新高**：今年公共代码库的贡献达到 11.2 亿次（同比增长 13%）。2025 年 3 月是 GitHub 历史上新增开源贡献者最多的月份，达到 25.5 万名首次贡献者。\n*   **增长最快的项目**：前十大增长最快的代码库中，有六个是 AI 基础设施项目，突显了对运行时、编排和效率工具的需求。\n*   **按贡献者数量排名的顶级开源项目**：2025 年的顶级项目分为 AI 基础设施（如 `vllm-project/vllm`、`ollama/ollama`、`huggingface/transformers`）和持久生态系统（如 `microsoft/vscode`、`godotengine/godot`、`home-assistant/core`）。这表明 AI 基础设施正在成为一个主要吸引力，但现有开发者生态系统依然强劲。\n\n| 排名 | 代码库               | 简要描述                   |\n| :--- | :------------------- | :------------------------- |\n| 1    | `vllm-project/vllm`  | 高吞吐量 LLM 推理引擎      |\n| 2    | `microsoft/vscode`   | 广泛使用的开源代码编辑器   |\n| 3    | `openai/codex`       | 在终端运行的轻量级编码代理 |\n| 4    | `huggingface/transformers` | 模型加载和微调的核心库     |\n| 5    | `godotengine/godot`  | 2D/3D 游戏引擎             |\n| 6    | `home-assistant/core` | 开源智能家居中心           |\n| 7    | `ollama/ollama`      | 本地模型运行器和管理工具   |\n| 8    | `ggml-org/llama.cpp` | 轻量级本地 Llama 推理      |\n| 9    | `volcengine/verl`    | LLM 部署和服务框架         |\n| 10   | `expo/expo`          | React Native 移动应用工具包 |",
      "shortSummary": "GitHub Octoverse 2025报告指出，AI、代理和类型化语言正驱动软件开发领域十年来的最大变革。GitHub开发者数量创纪录增长，过去一年新增超3600万，总数达1.8亿。TypeScript首次超越Python和JavaScript，成为GitHub上最常用语言，反映了开发者对类型化语言和AI辅助编码的偏好。生成式AI已成为开发标准，80%的新开发者在首周使用Copilot。开源活动也达到历史新高，AI基础设施项目是主要增长点。全球开发者格局正在重塑，印度成为新增开发者最大来源国，预计到2030年将占全球三分之一。",
      "translated_title": "Octoverse：每秒一名新开发者加入 GitHub，AI 助力 TypeScript 跃居榜首",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>In this year’s Octoverse, we uncover how AI, agents, and typed languages are driving the biggest shifts in software development in more than a decade.</p>\n<p>The post <a href=\"https://github.blog/news-insights/octoverse/octoverse-a-new-developer-joins-github-every-second-as-ai-leads-typescript-to-1/\">Octoverse: A new developer joins GitHub every second as AI leads TypeScript to #1</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "2025 GitHub 合作伙伴奖项获奖者揭晓 🎉 (原标题: Announcing the 2025 GitHub Partner Award winners 🎉)",
      "link": "https://github.blog/news-insights/company-news/announcing-the-2025-github-partner-award-winners/",
      "pubDate": "Tue, 28 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-28T16:00:00.000Z",
      "creator": "Jamie Cooper",
      "summary": "### 2025 GitHub 合作伙伴奖项揭晓\n\n在当今快速发展的科技行业中，合作伙伴是实现规模化、开拓新市场、推动创新和增强客户影响力的强大引擎。GitHub 认为，与合作伙伴的协作是其成长和提供价值的核心，合作伙伴是 GitHub 的“倍增器”，能够放大其能力，扩大其影响力，并加速为共同客户带来的创新。\n\nGitHub 首席营收官 Elizabeth Pemmerl 强调了合作伙伴生态系统的蓬勃发展，并表示公司很高兴能宣布 2025 GitHub 合作伙伴奖项的获奖者。这些奖项旨在表彰全球合作伙伴的杰出贡献、创新和协作。每年，GitHub 都会认可那些在提供卓越价值、推动变革性影响和加强共同使命方面表现出色的合作伙伴。这些获奖者通过整合 GitHub 的核心技术，帮助共同客户解锁创新、强化安全并构建独特的解决方案和服务。\n\n#### 2025 合作伙伴奖项获奖名单 🏆\n\n**全球奖项**\n\n*   **年度 GSI 服务和渠道合作伙伴：** Accenture 和 Avanade\n*   **年度战略服务和渠道合作伙伴：** Xebia\n*   **年度增长服务和渠道合作伙伴：** Canarys\n\n**区域奖项**\n\n*   **年度美洲区服务和渠道合作伙伴：** Slalom\n*   **年度亚太区服务和渠道合作伙伴：** PALO IT\n*   **年度欧洲、中东和非洲区服务和渠道合作伙伴：** Capgemini\n*   **年度新兴市场服务和渠道合作伙伴：** ilegra\n\n**支柱奖项**\n\n*   **年度平台服务和渠道合作伙伴：** Infosys\n*   **年度安全服务和渠道合作伙伴：** Eficode\n*   **年度 AI 服务和渠道合作伙伴：** Cognizant\n\n**技术奖项**\n\n*   **年度技术合作伙伴：** JFrog\n\nGitHub 全球微软、合作伙伴与服务解决方案销售副总裁 Matt Finkelstein 对合作伙伴的日常奉献表示感谢，并指出他们共同推动了软件构建方式的根本性变革，提升了整个行业的标准，并重塑了人们的生活和工作方式。他强调，合作伙伴对协作和客户成功的承诺持续推动着这一势头并激发了无限可能。\n\nGitHub 向所有获奖者表示衷心祝贺，并承诺在未来与合作伙伴共同成长，无畏创新，并创造共同成功。\n\n**文章作者：**\n\n*   ![Jamie Cooper](https://avatars.githubusercontent.com/u/216614519?v=4&s=200) Jamie Cooper，全球合作伙伴营销高级经理\n*   ![Leah Enquist](https://avatars.githubusercontent.com/u/79600774?v=4&s=200) Leah Enquist，高级合作伙伴 GTM、战略与运营经理",
      "shortSummary": "GitHub 宣布了 2025 年度合作伙伴奖项获奖者，以表彰全球合作伙伴在推动创新、强化安全和提升客户价值方面的杰出贡献。奖项涵盖全球、区域、支柱和技术等多个类别，包括 Accenture、Avanade、Xebia、Slalom、PALO IT、Capgemini、Infosys、Eficode、Cognizant 和 JFrog 等公司。这些合作伙伴是 GitHub 生态系统不可或缺的一部分，共同致力于改变软件构建方式，并为共同客户带来卓越成果。",
      "translated_title": "2025 GitHub 合作伙伴奖项获奖者揭晓 🎉",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/216614519?v=4&s=200",
          "alt": "Jamie Cooper",
          "title": "",
          "position": 1
        },
        {
          "url": "https://avatars.githubusercontent.com/u/79600774?v=4&s=200",
          "alt": "Leah Enquist",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>GitHub celebrates its 2025 Partner Award winners, honoring global, regional, and technology partners for driving innovation, collaboration, and impact across the developer ecosystem.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/announcing-the-2025-github-partner-award-winners/\">Announcing the 2025 GitHub Partner Award winners 🎉</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何使用GitHub MCP注册表查找、安装和管理MCP服务器 (原标题: How to find, install, and manage MCP servers with the GitHub MCP Registry)",
      "link": "https://github.blog/ai-and-ml/generative-ai/how-to-find-install-and-manage-mcp-servers-with-the-github-mcp-registry/",
      "pubDate": "Fri, 24 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-24T16:00:00.000Z",
      "creator": "Andrea Griffiths",
      "summary": "# GitHub MCP注册表：AI工具发现、安装与管理的新范式\n\nGitHub MCP注册表是一个革命性的平台，旨在解决Model Context Protocol (MCP) 服务器发现和管理的混乱问题。MCP是开发者将工具、API和工作流连接到其AI系统的核心协议。每个MCP服务器都是AI堆栈中的一个“组件”，例如用于浏览器自动化的Playwright、知识访问的Notion，或包含百余种工具的GitHub自有MCP服务器。该注册表提供了一个单一、权威的来源，用于在GitHub上发现、安装和管理MCP服务器。\n\n## 注册表现状\n\n目前，GitHub MCP注册表已收录44个MCP服务器，包括：\n\n*   **Playwright**：自动化和测试Web应用程序。\n*   **GitHub MCP服务器**：访问100多种GitHub API工具。\n*   **Context7, MarkItDown (Microsoft), Terraform (HashiCorp)**。\n*   来自**Notion、Unity、Firecrawl、Stripe**等合作伙伴的服务器。\n\n用户可以通过标签、流行度或GitHub星标来浏览和查找所需工具。\n\n## 如何安装MCP服务器\n\n注册表使在VS Code或VS Code Insiders中安装服务器成为一键式体验：\n\n1.  在GitHub MCP注册表中导航到目标MCP服务器（例如Playwright）。\n2.  点击“在VS Code中安装”。\n3.  VS Code将启动并预填充配置。\n4.  接受或调整可选参数（如存储路径）。\n\n**专业提示**：远程MCP服务器（如GitHub的）在安装过程中使用OAuth，无需手动处理令牌或密钥，只需一次身份验证即可开始构建。\n\n## 如何发布自己的MCP服务器\n\n发布自己的MCP服务器涉及以下步骤：\n\n1.  **安装MCP Publisher CLI**：\n    *   macOS/Linux/WSL (推荐Homebrew)：`brew install mcp-publisher`\n    *   macOS/Linux/WSL (预构建二进制文件)：通过curl下载并解压安装。\n2.  **初始化 `server.json` 文件**：\n    *   进入服务器源目录，运行 `mcp-publisher init`，这将创建一个包含服务器元数据（名称、标题、描述、版本、包信息等）的 `server.json` 文件。\n3.  **证明包所有权**：\n    *   NPM：在 `package.json` 中添加 `\"mcpName\"` 字段。\n    *   PyPI/NuGet：在 `README` 中添加 `mcp-name:`。\n    *   Docker：在 `Dockerfile` 中添加 `LABEL io.modelcontextprotocol.server.name=`。\n4.  **身份验证**：\n    *   GitHub命名空间 (`io.github.*`)：运行 `mcp-publisher login github` 进行OAuth登录。\n    *   自定义域名 (`com.yourcompany/*`)：遵循官方文档中的DNS验证步骤。\n5.  **发布服务器**：\n    *   身份验证成功后，运行 `mcp-publisher publish`。\n    *   发布后，服务器将在MCP注册表中可被发现。\n    *   完成上述步骤后，发送电子邮件至 `partnerships@github.com` 请求收录您的服务器。\n\n**专业提示**：\n*   命名空间：使用 `io.github.username/*` 进行GitHub身份验证，或 `com.yourcompany/*` 进行DNS验证。\n*   远程端点：在 `server.json` 中添加 `\"remotes\"` 数组，用于云/HTTP端点。\n*   多部署选项：可以同时列出“packages”和“remotes”以实现混合部署。\n\n### 使用GitHub Actions自动化发布\n\n可以通过GitHub Actions自动化发布流程，确保每次带标签的发布都能同步到包注册表和MCP注册表。这通过创建一个 `.github/workflows/publish-mcp.yml` 文件实现，该工作流会在标签推送时触发，并执行构建、测试、发布到NPM（如果适用）以及发布到MCP注册表等步骤。\n\n**专业提示**：\n*   将代码托管在公共GitHub仓库中以显示经过验证的所有权。\n*   在 `server.json` 中添加标签，以便开发者按类别轻松发现您的服务器。\n*   更新会自动向下游传播，无需手动通知。\n\n## 企业级MCP服务器管理（治理）\n\n对于管理大型组织中MCP使用的管理员来说，治理至关重要。GitHub现在支持注册表允许列表，管理员可以控制开发者可以安装哪些MCP服务器，尤其是在这些服务器与敏感数据交互时。\n\n**管理员步骤**：\n\n1.  建立或连接一个遵循MCP API规范的内部注册表。\n2.  将经过审查的MCP服务器（内部和外部）添加到您的注册表。\n3.  将GitHub Enterprise设置指向该注册表端点。\n4.  支持MCP的界面（从VS Code开始）将自动执行允许列表。\n\n这种治理模型允许企业在确保合规性的同时，为开发者提供所需的工具。\n\n**专业提示**：使用GitHub的API或现有安全管道在将MCP服务器添加到允许列表之前对其进行审查。\n\n## 高级用户技巧\n\n*   **更智能地排序**：利用GitHub星标和组织验证快速评估服务器的质量和合法性。\n*   **本地测试**：在发布前使用MCP Inspector测试您的MCP服务器，及早发现问题。\n*   **代理协同**：Copilot编码代理预加载了GitHub和Playwright MCP服务器，可实现自动生成带有Web应用截图的拉取请求。\n*   **工具过载解决**：VS Code正在推出语义工具查找功能，根据提示只显示相关工具，使大型MCP服务器更易管理。\n\n## 未来展望\n\nGitHub MCP注册表仍在发展中，未来计划包括：\n\n*   **自助发布**：预计在未来几个月内推出，将促进社区驱动的增长。\n*   **更多IDE支持**：目标是无论在何处编写代码，都能实现MCP服务器的无缝安装。\n*   **企业功能**：为受监管行业（如金融服务、医疗保健）提供治理流程。\n*   **代理工作流**：GitHub MCP服务器将开始将工具捆绑到以用例为导向的流程中（例如，“分析仓库+打开拉取请求”），而非仅仅暴露原始API端点。\n\nGitHub MCP注册表旨在成为MCP服务器的单一事实来源，提供一个发现、安装和治理工具的集中平台，从而提升AI辅助开发中的工具编排能力。\n\n## 作者与相关链接\n\n本文由GitHub高级开发者倡导者Andrea Griffiths撰写。\n\n![Andrea Griffiths](https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg)\n\n探索更多来自GitHub：\n\n![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs\n\n![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub\n\n![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) Customer stories\n\n![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025",
      "shortSummary": "GitHub MCP注册表是一个新的集中平台，旨在简化Model Context Protocol (MCP) 服务器的发现、安装和管理。它提供一键式VS Code安装、用于发布自定义服务器的CLI工具，以及企业级治理功能（如允许列表）。该注册表目前包含44个服务器，并计划推出自助发布和更多IDE支持。其目标是成为AI工具编排的单一事实来源，提升AI辅助开发的效率和影响力。",
      "translated_title": "如何使用GitHub MCP注册表查找、安装和管理MCP服务器",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg",
          "alt": "Andrea Griffiths",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn how to bring structure and security to your AI ecosystem with the GitHub MCP Registry, the single source of truth for managing and governing MCP servers.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/how-to-find-install-and-manage-mcp-servers-with-the-github-mcp-registry/\">How to find, install, and manage MCP servers with the GitHub MCP Registry</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "通往更优补全之路：通过新的自定义模型构建更快、更智能的 GitHub Copilot (原标题: The road to better completions: Building a faster, smarter GitHub Copilot with a new custom model)",
      "link": "https://github.blog/ai-and-ml/github-copilot/the-road-to-better-completions-building-a-faster-smarter-github-copilot-with-a-new-custom-model/",
      "pubDate": "Thu, 23 Oct 2025 18:31:12 +0000",
      "isoDate": "2025-10-23T18:31:12.000Z",
      "creator": "Shengyu Fu",
      "summary": "# 通往更优补全之路：通过新的自定义模型构建更快、更智能的 GitHub Copilot\n\nGitHub Copilot 的代码补全功能是其最广泛使用的特性，每天帮助数百万开发者保持流畅的开发体验。GitHub 团队通过持续迭代自定义模型，显著提升了补全体验。\n\n## 关键改进与影响\n\n最新的更新带来了显著的性能提升：\n*   **接受和保留字符**：增加20%，意味着更多建议内容被最终采纳，减少了后续编辑。\n*   **接受率**：提高12%，反映了建议的即时实用性更高。\n*   **吞吐量**：提升3倍，系统能同时处理更多请求。\n*   **延迟**：降低35%，使Copilot感觉更快，保持编码流程不中断。\n\n这些改进现在已应用于所有编辑器和环境中的 GitHub Copilot。\n\n## 为什么这些改进很重要\n\n最初的 Copilot 专注于最大化接受率，但这可能导致大量简单、简短的建议，不完全符合开发者需求。团队根据反馈调整了优化目标，现在也关注接受和保留字符、代码流畅性等指标，以提供更高质量的体验。\n\n## 自定义模型的评估方法\n\nCopilot 模型通过结合离线、预生产和生产评估的信号进行评估，以确保在真实开发者工作流中提供更好的质量。\n\n### 1. 离线评估\n\n*   **基于执行的基准测试**：针对内部和公共代码库进行测试，涵盖所有主要语言，模拟真实任务，测量构建和测试通过率，强调功能正确性。\n\n    ![Python代码编辑器截图，显示一个名为resolve_file的函数，其中包含一个部分令牌补全错误：模型生成了“dataet”而不是“dataset”。](https://github.blog/wp-content/uploads/2025/10/partial-token-completion-error.png?resize=1024%2C447)\n\n*   **LLM-judge 评分**：使用独立的LLM对补全结果进行评分，评估以下三个维度：\n    *   **质量**：语法有效性、避免重复/重叠、格式和风格一致性。\n    *   **相关性**：专注于相关代码，避免幻觉和过度。\n    *   **实用性**：减少手动工作，避免过时或废弃的API。\n\n### 2. 预生产评估：定性内部测试\n\n与内部开发者和合作伙伴合作，在真实工作流中并排测试模型，收集关于可读性、信任度和“品味”的结构化反馈。与语言专家合作，通过语言特定评估提升补全质量。\n\n### 3. 生产评估：A/B 测试\n\n通过衡量接受和保留字符、接受率、补全显示率、首次令牌时间、延迟等指标来评估改进。只有当在真实开发者工作负载下显示出统计学上显著的改进时，才会发布更新。\n\n## 新 Copilot 补全模型的训练过程\n\n### 中训练 (Mid-training)\n\n在微调之前，团队通过“中训练”构建了一个代码特定的基础模型。这涉及使用一个精选、去重、包含近1000万个代码库和600多种编程语言的现代、地道、公开和内部代码语料库。此步骤确保模型能够利用现代API、新语言语法和最新API版本。随后，通过监督微调和强化学习，结合超越下一令牌预测的目标（如跨度填充和文档字符串/函数对），使模型学习结构、命名和意图，从而变得代码流畅、风格一致且上下文感知。\n\n### 监督微调 (Supervised fine-tuning)\n\n通用聊天模型在自然语言生成代码方面表现良好，但在“中间填充”（FIM）代码补全方面表现不佳。聊天模型常出现光标错位插入、光标前代码重复和光标后代码覆盖等问题。团队通过合成微调，训练模型专门用于补全，使其表现得像一个优秀的FIM引擎，从而改进了：\n*   **前缀/后缀感知**：在不破坏后缀的情况下，实现令牌间准确插入、行中续写、整行补全和多行代码块补全。\n*   **格式保真度**：尊重本地风格（缩进、导入、文档字符串），避免前缀重复。\n\n    ![图表显示了两个AI模型在HumanEval填充基准测试中的表现。其中包括GitHub的自定义模型Copilot Completions和OpenAI的GPT-4o-mini。评估结果显示，Copilot Completions模型在单行、多行、随机跨度和随机跨度轻量测试中均表现优异。](https://github.blog/wp-content/uploads/2025/10/HumanEvalInfilling_1200x630.png?resize=1024%2C538)\n\n### 强化学习 (Reinforcement learning)\n\n最后，团队使用自定义强化学习算法，通过奖励和惩罚机制，使模型内化在真实开发者场景中代码建议的有用性，主要关注三个方面：\n*   **质量**：语法有效、可编译且遵循项目风格的代码。\n*   **相关性**：符合任务、尊重周围上下文和文件意图的建议。\n*   **实用性**：减少手动工作并偏好现代API的建议。\n\n这些方法共同创造了在光标处正确、相关且真正有用的补全，而非冗长或表面上的帮助。\n\n## 经验总结\n\n*   **奖励需谨慎**：早期强化学习版本过度优化了长补全，导致“奖励作弊”式地添加过多注释。通过引入注释护栏，确保补全简洁并专注于推进任务。\n*   **指标至关重要**：过度关注单一指标（如接受率）可能导致表面上良好但开发者体验不佳的结果。因此，监控多个具有实际影响的指标至关重要。\n*   **为真实世界使用而训练**：将合成微调数据与真实世界使用情况对齐，并相应调整训练，以识别并消除问题模式，改善实际结果。\n\n## 未来展望\n\nGitHub 将继续推动 Copilot 补全功能的边界，包括：\n*   扩展到特定领域（如游戏引擎、金融、ERP）。\n*   完善奖励函数，以实现构建/测试成功、语义有用性（在不冗余的情况下推进用户意图的编辑）和对最新、地道库和模式的API现代化偏好。\n*   在所有开发者环境中提供更快、更经济、更高质量的补全。\n\n欢迎在 VS Code 中体验更快、更智能的代码补全。\n\n## 致谢\n\n感谢开发者社区的持续反馈，以及 GitHub 和 Microsoft 的研究人员、工程师、产品经理、设计师和 Copilot 产品与工程团队的贡献。",
      "shortSummary": "GitHub Copilot 通过新的自定义模型显著提升了代码补全体验，实现了接受和保留字符增加20%、接受率提高12%、吞吐量提升3倍以及延迟降低35%。模型训练过程包括代码特定基础模型的“中训练”、针对中间填充（FIM）补全的监督微调和强化学习，以确保功能正确性、开发者偏好和实际使用场景。评估通过离线、预生产和生产测试进行。未来将扩展到特定领域并进一步优化奖励函数，以提供更快、更智能、更高质量的补全。",
      "translated_title": "通往更优补全之路：通过新的自定义模型构建更快、更智能的 GitHub Copilot",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/partial-token-completion-error.png?resize=1024%2C447",
          "alt": "Screenshot of a Python code editor showing a function named resolve_file inside a file called dataset_utilities.py. The function takes two string arguments, dataset and filename, and returns a string. The purpose, according to the docstring, is to resolve a file from a dataset and assert that only one file is found. The code uses os.path and glob to find files. There’s a highlighted line path = os.path.join(dat... with an error under dat, suggesting a variable name typo (dat instead of dataset). Several red underlines indicate syntax or reference errors in the code.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/HumanEvalInfilling_1200x630.png?resize=1024%2C538",
          "alt": "A chart showing HumanEval Infilling Benchmarks for two different AI models. These include a custom model from GitHub named Copilot Completions and OpenAI's GPT-4o-mini. The evaluations show superior performance across single line, multi line, random span, and random span light tests for the Copilot Completions model. ",
          "title": "",
          "position": 2
        },
        {
          "url": "https://avatars.githubusercontent.com/u/23369389?v=4&s=200",
          "alt": "Shengyu Fu",
          "title": "",
          "position": 3
        },
        {
          "url": "https://avatars.githubusercontent.com/u/12915670?v=4&s=200",
          "alt": "John Mogensen",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Find out about the latest custom models powering the completions experience in GitHub Copilot. </p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/the-road-to-better-completions-building-a-faster-smarter-github-copilot-with-a-new-custom-model/\">The road to better completions: Building a faster, smarter GitHub Copilot with a new custom model</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "从卡拉OK终端到AI简历：GitHub“热爱代码”挑战赛的获奖者 (原标题: From karaoke terminals to AI résumés: The winners of GitHub’s For the Love of Code challenge)",
      "link": "https://github.blog/open-source/from-karaoke-terminals-to-ai-resumes-the-winners-of-githubs-for-the-love-of-code-challenge/",
      "pubDate": "Wed, 22 Oct 2025 20:30:35 +0000",
      "isoDate": "2025-10-22T20:30:35.000Z",
      "creator": "Lee Reilly",
      "summary": "GitHub举办了首届“热爱代码”挑战赛，旨在庆祝开发者为纯粹的乐趣而构建项目的精神。超过300名开发者参与，利用GitHub Copilot等工具，创造了涵盖硬件、终端、Web、AI、游戏等多个领域的奇妙作品。以下是六个类别中的获奖项目：\n\n### 🔘 按钮、蜂鸣与闪光灯 (Buttons, beeps & blinkenlights)\n\n*   **Plane Tracker** (@cpstroum)：一个DIY雷达，使用Adafruit Circuit Playground、蓝牙和ADS-B Exchange API，在桌面上实时显示附近航班数据。GitHub Copilot协助了Git操作和项目初期结构。\n    ![一个人手持连接到笔记本电脑的Adafruit TFT Gizmo显示屏。屏幕显示一个绿色的雷达界面，红色光点代表附近的飞机。背景中，VS Code中的Python代码和终端窗口显示通过蓝牙发送的模拟飞机数据。](https://github.blog/wp-content/uploads/2025/10/plane-tracker.jpg?resize=771%2C1024)\n*   **Cadrephoto** (@ozh)：一个基于树莓派和电子墨水的相框，通过电子邮件接收图片并自动更新显示，无需应用或复杂设置。GitHub Copilot帮助作者完成了他的第一个Python项目。\n    ![一个木制电子墨水相框显示《戴珍珠耳环的少女》的灰度版本。旁边的一部智能手机显示正在发送同一图片的电子邮件，一个红色箭头从手机指向相框，说明照片是如何远程更新的。](https://github.blog/wp-content/uploads/2025/10/cadrephoto.png?resize=1024%2C512)\n*   **BuildIn** (@SUNSET-Sejong-University, @lepetitprince99)：一个桌面交通灯，使用Arduino和GitHub API，通过红、黄、绿、蓝灯光直观显示仓库的构建状态。GitHub Copilot在代码调试和优化方面提供了帮助。\n    ![四张照片的拼贴画，展示了一个带有多个跳线和不同颜色（蓝色、绿色、黄色和红色）LED的Arduino面包板项目，在各种测试阶段亮起。](https://github.blog/wp-content/uploads/2025/10/buildin.png?resize=1024%2C1024)\n\n### 🖥️ 终端才华 (Terminal talent)\n\n*   **RestoHack** (@Critlist)：一个复活自1984年、启发了NetHack的Roguelike游戏，使用现代工具重建，忠实还原了原版体验。\n    ![一个黑色的终端窗口显示一个ASCII艺术的墓碑，上面写着“REST IN PEACE mjh 0 AU killed by a giant rat 2025”，来自一个复古的文本游戏。](https://github.blog/wp-content/uploads/2025/10/restohack.png?w=582&resize=582%2C422)\n*   **Jukebox CLI** (@FedeCarollo)：一个在终端中运行的彩色动画点唱机，用Rust和Ratatui构建，支持MP3播放、音符动画和可滚动的彩色播放列表。GitHub Copilot帮助作者探索了不熟悉的Rust库。\n    ![一个终端音乐播放器中的像素艺术点唱机界面。屏幕中央显示彩色像素图形，右侧是歌曲播放列表，底部是带有进度和音量条的播放控制。](https://github.blog/wp-content/uploads/2025/10/jukebox.png?resize=1024%2C466)\n*   **Tuneminal** (@heza-ru)：将终端变为卡拉OK舞台，提供滚动歌词、实时音频可视化和评分功能，让开发者在`git clone`时也能唱歌。\n    ![一个名为“Tuneminal”的终端卡拉OK界面。屏幕显示歌曲库“IRIS – Kenshi Yonezu”，当前分数和准确度，以及歌词和音频可视化器的占位符。](https://github.blog/wp-content/uploads/2025/10/tuneminal.png?resize=1024%2C521)\n\n### 🌐 万维网奇迹 (World wide wonders)\n\n*   **Netstalgia** (@heza-ru)：一个功能齐全的90年代Web模拟器，视觉上还原了拨号上网的体验，包含复古元素和一个“GitHub Star勒索软件”。\n    ![一个复古的1990年代风格网页，名为“Netsalgia.com”，设计成Windows 95桌面。页面上有彩色按钮、访客计数器、虚假广告和一个弹出窗口，要求用户为这个怀旧项目的GitHub仓库加星。](https://github.blog/wp-content/uploads/2025/10/netstalgia.png?resize=1024%2C640)\n*   **Bionic Reader** (@Awesome-XV)：通过加粗单词前几个字母来提高阅读速度的工具。GitHub Copilot协助了项目文档编写和初始代码库搭建。\n*   **The Git Roast Show** (@rawrnuck, @Anmol0201)：一个全栈Web应用，幽默地“吐槽”GitHub个人资料，生成个性化、带音效和动画的喜剧吐槽。GitHub Copilot帮助作者理解算法和处理重复性任务。\n    ![一张风格化的图片，描绘了一个穿着燕尾服戴墨镜的卡通GitHub Octocat角色手持麦克风。上方文字写着“The GitRoast Show”，一个对话气泡说“我们不在这里分叉”。背景是旋转的青色大理石纹理。](https://github.blog/wp-content/uploads/2025/10/the-git-roast-show.png?resize=1024%2C640)\n*   **Nightlio** (@shirsakm)：一个隐私优先的情绪追踪和日记应用，支持自托管，记录情绪、笔记，并分析模式。GitHub Copilot在重构、调色板更新和代码库范围的更改中提供了帮助。\n    ![一个深色主题的生产力应用Nightliio正在运行。动画突出显示情绪追踪图标、个人目标（如“睡前阅读”和“晨间冥想”），以及添加目标、查看历史和通过彩色动画条追踪进度的部分。](https://github.blog/wp-content/uploads/2025/10/nightlio.gif?resize=1024%2C484)\n\n### 🤖 变革的代理 (Agents of change)\n\n*   **Neosgenesis** (@answeryt)：一个元认知AI框架，教机器思考如何思考，通过五阶段循环和多个LLM进行决策。\n*   **MediVision Assistant** (@omkardongre)：一个AI医疗助手，通过语音、图像、视频帮助老年和残疾用户管理健康。GitHub Copilot协助生成了React组件、API模板和AI集成代码。\n*   **Quiviva** (@katawiecz)：一个交互式AI简历，将求职过程变为有趣的聊天冒险，可询问技能、项目，甚至解锁“极客模式”。\n    ![一个名为“An Interactive CV that Talks Back”的彩色网页界面。动画显示右侧有一个聊天机器人窗口，用户可以在其中向Kasia的AI简历提问。左侧解释该项目是AI、设计和讲故事的有趣结合，并列出了一些示例问题和一个下载PDF简历的按钮。](https://github.blog/wp-content/uploads/2025/10/quiviva.png?resize=1024%2C640)\n\n### 🕹️ 游戏时间 (Game on)\n\n*   **AI-Dventure** (@FedeCarollo)：一个用Rust和OpenAI模型构建的交互式文本冒险游戏，动态生成奇幻、恐怖、科幻或历史背景下的世界和故事。\n    ![一个文本冒险游戏的截图。](https://github.blog/wp-content/uploads/2025/10/ai-dventure.png?w=1009&resize=1009%2C672)\n*   **BeatBugging** (@sandra-aliaga, @Joshep-c, @RyanValdivia, @tniia)：将调试过程转化为节奏游戏，将系统日志转换为音乐节拍，让开发者在5x5网格上跟随节奏修复bug。GitHub Copilot帮助团队在遇到困难时找到下一步解决方案。\n    ![一个复古风格的终端界面，标题为“BEATBUGGING SYSTEM”，显示25%的进度条，模拟“音乐调试界面”的初始化，屏幕上显示音频频率、内存读数和ASCII符号。](https://github.blog/wp-content/uploads/2025/10/beatbugging.png?w=759&resize=759%2C437)\n*   **MuMind** (@FontesHabana)：一个基于Web的多人派对游戏，玩家尝试匹配多数人的答案来得分。\n\n### 🃏 包罗万象 (Everything but the kitchen sink)\n\n*   **GitFrag** (@chornonoh-vova)：使用经典排序算法（冒泡、合并、快速、计数排序）重组GitHub贡献图，并以动画形式可视化。GitHub Copilot帮助作者理解算法并添加细节。\n*   **Code Sensei** (@redhatsam09)：将VS Code会话变成禅意像素冒险，专注度决定游戏乐趣，长时间不活动会导致“Sensei”的8位死亡。\n*   **Reviewer Karma** (@master-wayne7)：一个奖励代码审查者良好反馈的系统，通过表情符号、评论和代码批评在排行榜上赚取积分。GitHub Copilot帮助编写高效的Go代码和处理重复性任务。\n    ![一个名为“评分系统”和“当前排名”的排行榜显示了审阅者如何通过进行代码审阅、使用积极表情符号和撰写建设性评论来获得积分。排名表列出了@alice以18分位居第一，其次是@bob、@carol、@dave和@eve。](https://github.blog/wp-content/uploads/2025/10/reviewer-karma.png?resize=1024%2C702)\n\n这些项目充分展示了当开发者为乐趣而构建时所能实现的创造力。所有类别获奖者都将获得12个月的GitHub Copilot Pro+订阅，进一步证明了创造力与代码（尤其是在Copilot辅助下）结合的强大潜力。",
      "shortSummary": "GitHub举办了首届“热爱代码”挑战赛，鼓励开发者为乐趣而构建项目。超过300名开发者参与，利用GitHub Copilot等工具，在六个类别中创造了众多创新作品。获奖项目包括DIY雷达、电子墨水相框、复古游戏、终端卡拉OK、90年代Web模拟器、AI简历和调试节奏游戏等。这些作品展示了开发者如何将好奇心和创造力转化为独特而有趣的项目。所有类别冠军均获得12个月的GitHub Copilot Pro+。",
      "translated_title": "从卡拉OK终端到AI简历：GitHub“热爱代码”挑战赛的获奖者",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/plane-tracker.jpg?resize=771%2C1024",
          "alt": "A person holding an Adafruit TFT Gizmo display connected to a laptop. The screen shows a green radar interface with red blips representing nearby planes. In the background, Python code and a terminal window in VS Code display mock plane data being sent via Bluetooth.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/cadrephoto.png?resize=1024%2C512",
          "alt": "A wooden e-ink photo frame displays a grayscale version of “Girl with a Pearl Earring.” A smartphone next to it shows an email being sent with the same image, and a red arrow points from the phone to the frame, illustrating how the photo is updated remotely.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/buildin.png?resize=1024%2C1024",
          "alt": "A collage of four photos showing an Arduino breadboard project with multiple jumper wires and LEDs in different colors—blue, green, yellow, and red—lit up during various testing stages.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/restohack.png?w=582&resize=582%2C422",
          "alt": "A black terminal window displaying ASCII art of a tombstone reading “REST IN PEACE mjh 0 AU killed by a giant rat 2025,” from a retro text-based game.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/jukebox.png?resize=1024%2C466",
          "alt": "A pixel art jukebox interface in a terminal-based music player. The screen shows colorful pixel graphics in the center, a playlist of songs on the right, and playback controls with progress and volume bars at the bottom.",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/tuneminal.png?resize=1024%2C521",
          "alt": "A terminal-based karaoke interface titled “Tuneminal.” The screen displays a song library with “IRIS – Kenshi Yonezu,” current score and accuracy, and placeholders for lyrics and an audio visualizer.",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/netstalgia.png?resize=1024%2C640",
          "alt": "A retro 1990s-style web page called “Netsalgia.com” designed to look like a Windows 95 desktop. The page features colorful buttons, visitor counters, fake ads, and a pop-up asking users to star the GitHub repository for this nostalgic project.",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/the-git-roast-show.png?resize=1024%2C640",
          "alt": "A stylized image featuring a cartoon GitHub Octocat character in a tuxedo and sunglasses holding a microphone. The text above reads “The GitRoast Show,” and a speech bubble says “we don’t fork around here.” The background has a swirling teal marble texture.",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>This summer, we invited devs to participate in our hackathon for joyful, ridiculous, and wildly creative projects. Here are the winners of For the Love of Code!</p>\n<p>The post <a href=\"https://github.blog/open-source/from-karaoke-terminals-to-ai-resumes-the-winners-of-githubs-for-the-love-of-code-challenge/\">From karaoke terminals to AI résumés: The winners of GitHub’s For the Love of Code challenge</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "顶尖安全研究员分享其漏洞赏金流程 (原标题: Top security researcher shares their bug bounty process)",
      "link": "https://github.blog/security/top-security-researcher-shares-their-bug-bounty-process/",
      "pubDate": "Wed, 22 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-22T16:00:00.000Z",
      "creator": "Shilpa Kumari",
      "summary": "GitHub在网络安全意识月期间，重点介绍了其漏洞赏金计划中的顶尖安全研究员André Storfjord Kristiansen (@dev-bio)。GitHub致力于维护其平台和软件生态系统的安全，尤其是在GitHub Copilot等AI驱动功能快速增长的背景下。与熟练的安全研究员合作对于识别和解决传统及新兴技术中的漏洞至关重要。\n\n**GitHub VIP 赏金计划**\nGitHub邀请持续展现专业知识和影响力的研究员加入其独家VIP赏金计划，提供：\n*   新产品和功能的早期测试权限。\n*   与GitHub漏洞赏金团队及工程师直接互动。\n*   独家Hacktocat周边商品。\n\n**研究员André Storfjord Kristiansen (@dev-bio) 的洞察**\n\n1.  **参与漏洞赏金的契机与动力：**\n    *   偶然在业余时间进行个人项目时接触，源于对系统行为（尤其是在处理复杂边缘情况时）的好奇心。\n    *   持续参与的动力在于，能够展示看似微小的问题如何产生实际影响，并将小问题升级为严重漏洞的过程令人满足。\n2.  **工作之外的生活：**\n    *   作为两个孩子的父亲，大部分时间陪伴家人，并感谢伴侣的支持。\n    *   在挪威享受大自然，通过徒步、露营和越野滑雪来放松和充电。\n3.  **学习与保持更新：**\n    *   通过阅读其他研究员的报告来了解漏洞趋势和解决问题的方法。\n    *   努力识别并深入研究需要进一步探索的领域，以保持领先。\n    *   专业领域是软件供应链安全，致力于研究漏洞并开发缓解新兴威胁的解决方案。\n4.  **工具与工作流程：**\n    *   在业余研究中，倾向于编写自己的工具，以获得更深入的理解并发现新的探索领域。\n    *   计划发布一个工具包，用于构建GitHub组织的离线综合图谱，并提供可扩展的查询套件，以快速发现常见的错误配置和隐藏的攻击路径。\n5.  **偏爱的漏洞类型：**\n    *   注入相关漏洞、微妙的逻辑缺陷和被忽视的假设。\n    *   对绕过严格内容安全策略（CSP）的新技术很感兴趣。\n    *   最喜欢将看似无害的发现串联起来，形成具有重大影响的漏洞，揭示底层设计缺陷。\n6.  **漏洞发现过程：**\n    *   最重要的发现多是偶然的，是好奇心驱使下的“跑题”结果，而非严格方法论的产物。\n    *   当发现异常时，会深入挖掘，层层剥离，直到完全理解，并详细记录每一步，绘制潜在攻击路径，构建清晰全面的漏洞图景。\n7.  **给新研究员的建议：**\n    *   不要满足于简单的发现，要深入挖掘并探索其潜在影响，理解全局后，看似无害的问题也可能产生重大影响。\n8.  **社交媒体：**\n    *   拥有一个页面，未来将发布有趣内容；活跃于LinkedIn。\n\n**致谢与号召**\nGitHub感谢@dev-bio的参与，并强调每次漏洞提交都有助于提升GitHub、其产品和客户的安全性。鼓励安全研究社区通过HackerOne报告发现的漏洞。\n\n**相关内容与作者信息**\n*   作者：Shilpa Kumari\n    ![Shilpa Kumari](https://avatars.githubusercontent.com/u/82128924?v=4&s=200)\n*   探索更多来自GitHub：\n    *   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs\n    *   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub\n    *   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) Customer stories\n    *   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025",
      "shortSummary": "GitHub在网络安全意识月期间，重点介绍了顶尖漏洞赏金研究员André Storfjord Kristiansen (@dev-bio)。他因擅长发现注入相关漏洞和提供详细报告而闻名。André分享，其研究动力源于对系统行为的好奇心，并享受将小问题升级为重大漏洞的成就感。他通过阅读同行报告和编写自定义工具来保持领先，并建议其他研究员深入挖掘漏洞影响。GitHub鼓励社区继续通过HackerOne报告漏洞，共同提升平台安全性。",
      "translated_title": "顶尖安全研究员分享其漏洞赏金流程",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/82128924?v=4&s=200",
          "alt": "Shilpa Kumari",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>For this year’s Cybersecurity Awareness Month, the GitHub Bug Bounty team is excited to put the spotlight on a talented security researcher—André Storfjord Kristiansen!</p>\n<p>The post <a href=\"https://github.blog/security/top-security-researcher-shares-their-bug-bounty-process/\">Top security researcher shares their bug bounty process</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何使用AI更新社区健康文件 (原标题: How to update community health files with AI)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-to-update-community-health-files-with-ai/",
      "pubDate": "Tue, 21 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-21T16:00:00.000Z",
      "creator": "Alexandra Lietzke",
      "summary": "# 使用AI更新社区健康文件\n\n本文探讨了如何利用人工智能（特别是GitHub Copilot）来更新和维护项目中的社区健康文件，从而让开发者能够更专注于核心代码开发。\n\n## 什么是GitHub Copilot？\nGitHub Copilot已从一个智能自动补全工具发展成为一个多模型、代理式助手。它能够理解整个代码库，执行跨文件重构，运行终端命令，甚至起草拉取请求。\n\n## 什么是社区健康文件及其重要性？\n社区健康文件是标准化文档，旨在为开源项目维护一个欢迎、有组织和协作的环境。它们传达期望、指导贡献者并支持代码库的整体健康。这些文件通常位于代码库的根目录或特殊的`.github`文件夹中。\n\n### 重要性：\n*   **项目投资：** 它们是新贡献者的第一接触点，标志着项目的成熟度和可维护性。\n*   **提升协作：** 提高透明度、一致性和协作，并为贡献者和维护者之间的互动设定基调。\n*   **避免问题：** 缺少或过时的文件可能导致贡献者提交格式不正确的拉取请求、提出模糊的问题，甚至引入安全漏洞，从而使维护者不堪重负。\n*   **AI的帮助：** GitHub Copilot等AI工具可以自动检测缺失或过时的文件，提出更新建议，甚至生成草稿，从而节省时间并减少人为错误。\n\n## 三种常见的社区健康文件\n以下是三种对构建欢迎社区至关重要的常见社区健康文件：\n\n### 1. README.md\n*   **作用：** 通常是访问者查看代码库时首先看到的文件，它介绍项目并解释其目的，以及如何开始使用。\n*   **内容：** 提供项目是什么、功能信息以及如何安装或使用等关键信息，帮助用户快速上手。\n\n### 2. 贡献者指南 (CONTRIBUTING.md)\n*   **作用：** 提供关于贡献者如何以及应该如何参与的指导方针，例如编码标准和拉取请求说明。\n*   **内容：** 告知用户如何高效贡献以及期望什么（例如，项目是否接受贡献），有助于设定标准和期望。\n\n### 3. 许可证 (LICENSE)\n*   **作用：** 规定了项目可以被使用、修改和分发的法律条款。简而言之，它告诉人们如何使用你的软件。\n*   **重要性：** 如果不添加许可证，其他人将无权使用、修改或分发你的代码。若要项目被认定为开源项目，应选择一个广泛使用的OSI（开放源代码促进会）批准的开源许可证。\n*   **资源：** 文章提供了选择和添加许可证的外部资源链接。\n\n## 其他流行的社区健康文件\n*   **ISSUE/PULL REQUEST TEMPLATES：** 标准化提交问题或拉取请求所需的格式和信息。\n*   **SECURITY：** 提供报告漏洞的说明，并概述项目的安全策略。\n*   **GOVERNANCE：** 解释项目如何管理，包括角色、职责和决策过程。\n*   **CODE OF CONDUCT：** 定义社区参与行为标准。\n*   **SUPPORT：** 分享他人如何获得项目帮助的具体指导。\n*   **FUNDING：** 在代码库中显示赞助按钮，以增加开源项目资金选项的可见性。\n\n## Copilot指令文件\n虽然不完全是社区健康文件，但Copilot指令文件是一个AI配置，它补充了健康文档。它使用其他社区健康文件作为上下文，精确地告诉GitHub Copilot如何与代码库交互，包括优先处理或避免什么。这个文件有助于为大型语言模型（LLM）提供基础，使其理解项目的结构和内容，从而在整个代码库中保持一致性。\n\n## 使用GitHub Copilot更新社区健康文件的入门套件\nGitHub提供了一个入门套件，其中包含提示词最佳实践、核对清单以及使用Copilot向代码库添加三个常见文件的分步教程。\n\n### 第一部分：提示词工程\nGitHub Copilot可以帮助你通过简单的提示词编写更清晰、更一致的社区健康文件。\n*   **注意事项：** 驱动GitHub Copilot的LLM是非确定性的，每次提示模型都可能收到不同的输出。因此，需要验证输出的准确性，特别是对于具有法律效力的许可证等敏感文件。\n*   **提示词最佳实践：**\n    *   编写清晰、结构化的提示词，例如：“为Node.js项目生成一个包含设置说明、编码标准和拉取请求指南的CONTRIBUTING.md文件。”\n    *   包含重要的上下文，如受众类型、项目目标和语气。\n    *   使用现有提示词文件来帮助标准化请求。\n\n### 第二部分：核对清单\n此核对清单有助于确保Copilot生成的内容准确、包容、安全并与项目目标保持一致。\n\n*   **开始前：** 审查现有文件，明确文件目标，熟悉组织政策。\n*   **有效提示Copilot：** 提示词具体且有上下文，包含示例或语气偏好。\n*   **安全与隐私：** 避免敏感信息，审查代码库可见性设置，了解Copilot隐私设置。SECURITY.md应包含漏洞报告联系方式、安全问题分类说明和负责任披露政策链接。\n*   **审查Copilot输出：** 内容是否反映项目价值观，检查是否存在虚构链接/名称/政策，外部资源是否准确最新。\n*   **测试与反馈：** 请队友或贡献者审查，测试说明是否有效，并乐于根据社区反馈进行迭代。\n\n### 第三部分：教程\n本教程演示了如何使用Copilot快速轻松地更新README.md、LICENSE文件和CONTRIBUTING.md。\n\n#### 1. 创建README.md\n*   **目的：** 提供项目清晰概览，帮助用户和贡献者快速理解其目的、设置和用法。\n*   **操作步骤：**\n    1.  在IDE中打开GitHub Copilot Chat（例如VS Code）。\n    2.  切换到代理模式以启用项目感知协助。\n    3.  选择首选模型（例如Claude）。\n    4.  确保项目在IDE中打开，以便Copilot读取其上下文。\n    5.  在聊天窗口中输入：“帮助我为我的项目编写一个README.md。确保它包含安装说明、项目概述并遵循标准的README实践。”\n    6.  审查生成的README.md，手动验证安装说明的准确性。\n    7.  如果满意，点击“Keep”保存文件并提交到代码库。\n\n#### 2. 添加许可证\n*   **目的：** 定义他人如何合法使用、修改和分发你的代码，保护双方权利，消除歧义，防止滥用。\n*   **操作步骤：**\n    1.  在IDE中打开GitHub Copilot Chat。\n    2.  决定要添加的许可证类型。\n    3.  输入提示词：“你能为我的项目添加[你想要的许可证]吗？”\n    4.  审查生成的LICENSE文件，确保准确性（特别是版权所有者名称和声明）。\n    5.  如果正确，点击“Keep”保存文件并提交到代码库。\n\n#### 3. 创建贡献者指南 (CONTRIBUTING.md)\n*   **目的：** 通过概述贡献标准、工作流程和期望来简化协作，降低摩擦和错误，鼓励一致、可扩展的贡献。\n*   **操作步骤：**\n    1.  在IDE中打开GitHub Copilot Chat。\n    2.  点击“+”图标开始新聊天。\n    3.  输入提示词：“创建一个遵循最佳实践的贡献者指南文件，并将其链接到README中。”\n    4.  Copilot将生成包含贡献指南、代码标准、拉取请求说明和问题报告流程的CONTRIBUTING.md文件。\n    5.  审查并编辑指南以符合团队工作流程。\n    6.  保存并提交CONTRIBUTING.md文件。\n    7.  更新README以包含贡献者指南的链接，例如：`## Contributing See CONTRIBUTING.md for guidelines.`\n\n## 总结\nGitHub Copilot不仅可以编写代码，还可以作为你的文档助手，帮助你更智能、更快、更顺畅地编写文档。它能优化社区健康文件，推广最佳实践，并将良好意图转化为出色的文档。最终结果是：更好的文档、更强大的社区和更快乐的维护者。",
      "shortSummary": "GitHub Copilot等AI工具能帮助开发者高效更新社区健康文件，如README、贡献者指南和许可证。这些标准化文档对开源项目的健康、协作和吸引新贡献者至关重要。AI可自动检测、建议并生成文件草稿，节省时间并减少错误。通过清晰的提示词、核对清单和分步教程，开发者可利用Copilot快速创建和维护这些文件，从而提升项目文档质量，促进社区发展。",
      "translated_title": "如何使用AI更新社区健康文件",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Have you ever thought about using AI to update community health files for your repositories? This blog shares actionable next steps for doing just that, including a starter kit with a checklist and tutorials on how to create three useful files.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-to-update-community-health-files-with-ai/\">How to update community health files with AI</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "打破互联网的漏洞内幕：Log4Shell不为人知的故事 (原标题: Inside the breach that broke the internet: The untold story of Log4Shell)",
      "link": "https://github.blog/open-source/inside-the-breach-that-broke-the-internet-the-untold-story-of-log4shell/",
      "pubDate": "Mon, 20 Oct 2025 16:00:16 +0000",
      "isoDate": "2025-10-20T16:00:16.000Z",
      "creator": "Gregg Cochran",
      "summary": "Log4Shell事件揭示了开源安全并非理所当然，它不仅是代码问题，更是关于支持、赋能和激励那些构建我们数字基础设施项目背后的人们。\n\n## Log4Shell危机的爆发\n\n*   **发现经过**：Log4j维护者Christian Grobmeier在帮助儿子解决Minecraft问题时，偶然发现了游戏中的安全警告：“我们正遭受Log4j安全漏洞的困扰，请立即小心并更新。”他意识到这正是他维护的Log4j项目的问题。\n*   **漏洞范围**：在短短数小时内，Christian发现自己身处Log4Shell危机的中心。这个漏洞被认为是互联网历史上最严重的安全漏洞，影响了从财富500强公司到全球Minecraft服务器的数十亿设备。\n*   **Log4j的普遍性**：Log4j是一个拥有20多年历史的Java日志库，默默地为全球应用程序（如用户登录和计算结果）提供系统事件记录。它已成为Java生态系统中数千个项目的核心依赖，许多组织在不知情的情况下使用它。\n\n## 漏洞的严重性与技术细节\n\n*   **完美10分**：Log4Shell在通用漏洞评分系统（CVSS）中获得了满分10分，是最高可能分数。\n*   **攻击原理**：Log4j利用Java的命名和目录接口（JNDI）提供灵活性，允许从远程服务器加载软件组件。然而，该库未能验证JNDI查找字符串是否来自可信来源。攻击者只需在任何会被记录的应用程序字段（如用户名、搜索框、Minecraft聊天消息）中输入恶意JNDI字符串，即可在目标系统上执行远程代码。\n*   **易于利用**：Christian指出，利用此漏洞“甚至不需要特殊知识”，攻击者可以随意注入恶意字符串。\n\n## 维护者的巨大代价\n\n*   **个人压力**：Log4Shell危机给Christian及其团队（大多是志愿者）带来了巨大的个人压力。他们突然肩负起修补影响“半个互联网”的漏洞的责任，导致“有人停止了睡眠”。\n*   **持续挑战**：修复初始漏洞后，又发现了更多问题，Christian将其比喻为“一个有洞的水袋，补好一个洞又出现另一个”。\n*   **社区反应**：社区的反应褒贬不一，既有指责，也有支持。Christian指出，没有人关心维护者本身，只关心项目，也缺乏对他们辛勤工作的感谢。\n\n## GitHub安全开源基金的应对\n\n*   **解决痛点**：Log4Shell事件凸显了开源安全的关键缺陷：维护者通常缺乏从一开始就将安全性融入项目的培训和资源。\n*   **基金作用**：GitHub安全开源基金应运而生，为关键开源项目提供资金和安全培训，旨在成为开源供应链的“保险”。\n*   **培训效果**：Christian参与了该基金的安全培训项目，发现其具有变革性。培训不仅提供了技术知识，还改变了他的视角，使开发者成为“第一道防线”。他认为，如果这项培训早五年存在，Log4Shell可能就不会发生。\n\n## 技术与行业层面的经验教训\n\n### 技术经验教训：默认构建安全性\n\n1.  **验证所有外部输入**：永不信任跨越信任边界的数据，尤其是在处理用户输入的基础库中。\n2.  **默认禁用危险功能**：Log4j现在默认禁用JNDI查找。\n3.  **实施纵深防御**：现代应用程序需要多层保护。\n4.  **自动化安全扫描**：利用GitHub的代码扫描和Dependabot等工具在生产前发现漏洞。\n5.  **维护软件物料清单（SBOMs）**：帮助组织了解其依赖项，以便在漏洞发生时迅速确定影响范围。\n\n### 行业经验教训：可持续开源\n\n*   **社区至关重要**：单一维护者维护开源软件存在风险。\n*   **安全培训应普及**：传统安全教育往往未能触及最需要的维护者。\n*   **资金并非唯一**：培训和社区支持与资金同等重要。\n*   **善意至上**：提醒人们，每个开源库背后都有一个编写代码的人，应以帮助而非指责的态度对待问题。\n*   **项目安全可改进**：Christian在基金项目中实施了多项安全改进。\n\n## 共同的责任\n\n*   **维护者**：申请基金项目，启用内置安全工具，导出SBOMs，发布安全公告。\n*   **企业**：成为基金的资助或生态系统合作伙伴，投入工程时间，贡献代码、文档、安全审查和资金。\n*   **个人开发者**：谨慎选择新依赖项，严格验证不受信任的输入，贡献测试用例和文档。\n\nLog4j目前拥有8.3的OpenSSF评分，表明其良好的安全实践。Log4Shell事件提醒我们，学习是消除无知的唯一方法，并强调了社区响应、适应和改进的力量。",
      "shortSummary": "Log4Shell是互联网历史上最严重的漏洞之一，源于Log4j这一普遍存在的Java日志库中JNDI查找未经验证。Log4j维护者Christian Grobmeier在帮助儿子玩Minecraft时偶然发现此漏洞，其影响波及全球数十亿设备。此次危机揭示了开源维护者面临的巨大压力和资源匮乏。为应对此问题，GitHub安全开源基金应运而生，提供资金和安全培训，旨在将开发者转变为安全防线。事件促使行业吸取了验证输入、默认禁用危险功能、自动化扫描和维护SBOMs等技术教训，并强调了社区、培训和善意对开源可持续性的重要性。",
      "translated_title": "打破互联网的漏洞内幕：Log4Shell不为人知的故事",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Log4Shell proved that open source security isn't guaranteed and isn’t just a code problem. It's about supporting, enabling, and empowering the people behind the projects that build our digital infrastructure.</p>\n<p>The post <a href=\"https://github.blog/open-source/inside-the-breach-that-broke-the-internet-the-untold-story-of-log4shell/\">Inside the breach that broke the internet: The untold story of Log4Shell</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-10-31T04:35:20.208Z"
}