{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "GitHub 内部：我们如何加强 SAML 实施 (原标题: Inside GitHub: How we hardened our SAML implementation)",
      "link": "https://github.blog/security/web-application-security/inside-github-how-we-hardened-our-saml-implementation/",
      "pubDate": "Tue, 27 May 2025 16:00:00 +0000",
      "isoDate": "2025-05-27T16:00:00.000Z",
      "creator": "Greg Ose",
      "summary": "以下是关于 GitHub 如何加强其 SAML 实施的摘要：\n\n*   **背景：** GitHub 从 2014 年开始提供使用 SAML 的企业身份验证，但 SAML 代码的复杂性和攻击面使其风险较高。\n*   **改进措施：** 为了提高 SAML 实施的安全性，GitHub 采取了以下关键步骤：\n    *   **重新评估库：** 评估 ruby-saml 库并审计其实现。\n    *   **使用 A/B 测试验证新库：** 构建一个系统，可以安全地评估和观察 SAML 处理逻辑的更改。GitHub 使用 Scientist 库进行 A/B 测试，验证 ruby-saml 库的正确性，并识别配置差异和边缘情况。\n    *   **模式验证和最小化攻击面：** 通过加强模式验证来降低输入处理的复杂性。\n    *   **限制漏洞影响：** 使用多个解析器来降低风险。\n*   **A/B 测试：** GitHub 使用 Scientist 库进行 A/B 测试，验证 ruby-saml 库的正确性，并识别配置差异和边缘情况。例如，他们发现 ruby-saml 验证 issuer 时会针对空字符串，并修复了相关问题。\n*   **XML 签名：** SAML 依赖于 XML 签名来验证数据的完整性，但 XML 签名和文档结构之间的关系可能导致漏洞，例如 XML 签名包装攻击。\n*   **SAML 模式定义：** SAML 响应必须符合 SAML 2.0 XML 模式定义 (XSD)，但 SAML 模式的灵活性也可能导致安全问题。",
      "translated_title": "GitHub 内部：我们如何加强 SAML 实施",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Maintaining and developing complex and risky code is never easy. See how we addressed the challenges of securing our SAML implementation with this behind-the-scenes look at building trust in our systems.</p>\n<p>The post <a href=\"https://github.blog/security/web-application-security/inside-github-how-we-hardened-our-saml-implementation/\">Inside GitHub: How we hardened our SAML implementation</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-05-29T01:11:03.925Z"
}