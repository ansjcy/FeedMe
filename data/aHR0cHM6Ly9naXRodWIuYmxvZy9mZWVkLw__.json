{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "GitHub工程师如何解决平台问题 (原标题: How GitHub engineers tackle platform problems)",
      "link": "https://github.blog/engineering/infrastructure/how-github-engineers-tackle-platform-problems/",
      "pubDate": "Tue, 10 Jun 2025 16:00:00 +0000",
      "isoDate": "2025-06-10T16:00:00.000Z",
      "creator": "Fabian Aguilar Gomez",
      "summary": "# GitHub工程师如何解决平台问题\n\n## 引言：产品与平台工程的类比\n*   文章通过高达模型制作类比产品工程师和平台工程师的角色：\n    *   **产品工程师**：使用工具包构建最终产品（高达模型），专注于构建可玩或收藏的工作产品。\n    *   **平台工程师**：提供构建工具（如剪钳、锉刀）并可能搭建展示平台，确保构建者拥有所需工具，即使他们不亲自构建高达模型。\n*   作者的团队一年前转入基础设施组织，职责从解决外部客户问题（如构建新的部署视图）转变为服务内部客户，成为平台工程团队。这意味着他们现在负责构建产品组件，这要求他们重新思考代码测试和问题解决方法。\n\n## 解决平台问题的最佳实践\n\n### 1. 理解你的领域\n*   **定义**：“领域”是指团队和平台组织运作的业务和技术主题区域。\n*   **如何快速掌握**：\n    *   **与同事交流**：与对主题有更多知识和经验的团队安排交接会议，询问术语并深入理解问题。\n    *   **调查旧问题**：研究积压或持续存在的问题，以更好地理解系统的当前限制和潜在改进领域。\n    *   **阅读文档**：文档是知识的宝库，有助于理解系统的工作原理。\n\n### 2. 将概念与平台特定技能相结合\n*   平台团队作为基础层，需要更深入的理解：\n    *   **网络**：理解TCP、UDP、L4负载均衡等网络基础知识，以及`dig`等调试工具，这对于理解网络流量如何影响平台至关重要。\n    *   **操作系统和硬件**：选择合适的虚拟机（VM）或物理硬件对于可扩展性和成本管理至关重要，并需选择正确的操作系统以避免漏洞或接近生命周期结束的系统。\n    *   **基础设施即代码（IaC）**：熟练使用Terraform、Ansible、Consul等自动化工具，它们能显著减少基础设施配置和修改过程中的人为错误。\n    *   **分布式系统**：处理平台问题，尤其是在分布式系统中，需要深入理解故障是不可避免的。因此，采用故障转移和恢复机制等主动解决方案对于保持系统可靠性和防止不良用户体验至关重要。\n\n### 3. 知识共享\n*   通过分享经验和想法，工程师可以引入新视角，从而带来突破和创新。\n*   **重要性**：\n    *   **团队合作**：协作通常能更快地解决问题，并促进新解决方案的创新，因为工程师有机会相互学习并扩展现有想法。\n    *   **防止知识流失**：如果不分享经验教训，信息就无法在团队或组织内传播。当工程师离职或无法联系时，这会成为问题。\n    *   **提升客户成功**：工程师的解决方案应有效地服务客户。通过分享知识和经验教训，团队可以构建可靠、可扩展、安全的平台，从而创造出满足客户需求和期望的更好产品！\n\n## 产品工程与基础设施工程的显著差异\n\n### 1. 影响范围\n*   平台作为系统的基本构建块，任何（无论大小的）变更都可能影响广泛的产品。例如，DNS服务的一个微小改动就可能对GitHub Pages到GitHub Copilot等产品造成广泛影响。\n*   **如何理解影响范围**：\n    *   **与下游团队直接沟通**：与依赖服务的团队直接沟通，提供有关拟议变更可能如何影响其他服务的宝贵见解。\n    *   **事后分析（Postmortems）**：通过查看与平台相关的过去事件，并询问“此事件的影响是什么？”，可以更深入地了解引入了什么变更或故障、平台在其中扮演的角色以及如何修复。\n    *   **监控和遥测**：将重要的监控和日志信息浓缩成小巧且易于消化的介质（例如单一可用性指标SAM），以提供系统的总体健康状况。快速浏览单个仪表盘的能力使工程师能够迅速查明问题来源，并简化调试和事件缓解过程。\n\n### 2. 测试变更\n*   在分布式环境中测试变更（特别是像DNS这样的服务）可能具有挑战性。\n*   **关键步骤**：\n    *   **利用测试站点**：将其作为“真实”机器，可以在其中实施和评估所有变更。\n    *   **基础设施即代码（IaC）测试**：使用Terraform或Ansible等工具时，测试配置和解除配置机器等基本操作至关重要。在需要重新配置机器的情况下，要确保机器不会被意外删除，并且在需要时能够创建新机器。\n    *   **端到端（E2E）测试**：开始将一些网络流量导向这些服务器。团队可以通过直接与其交互来观察主机行为，或者通过分流一小部分流量来评估功能。\n    *   **自愈能力测试**：测试平台从意外负载中恢复的能力，并在影响用户之前识别瓶颈。早期识别瓶颈或错误对于维护平台健康至关重要。\n    *   **逐主机实施**：理想情况下，测试完成后应逐主机实施变更。这种方法允许单独机器回滚，并防止变更应用于未受影响的主机。\n\n## 总结\n*   平台工程可能很困难，GitHub的系统复杂且包含许多服务和活动部件。然而，当一切顺利运行时，所有幕后努力都得到了回报。当平台平稳运行，团队能够更快、更可靠地交付产品时，GitHub就能成为所有开发者的家园。\n\n由 ![Fabian Aguilar Gomez](https://avatars.githubusercontent.com/u/27039604?v=4&s=200) Fabian Aguilar Gomez 撰写\n\n### 相关文章\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs：掌握GitHub所需的一切。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub：在GitHub上构建未来，这里是任何地方的任何人都可以构建任何东西的地方。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) Customer stories：了解使用GitHub进行构建的公司和工程团队。\n*   ![Enterprise content](https://github.blog/wp-content/uploads/2022/05/careers.svg) Enterprise content：专为您策划的企业洞察。",
      "shortSummary": "GitHub工程师通过高达模型类比阐述了平台工程与产品工程的区别，强调平台工程师提供基础工具和基础设施。解决平台问题需深入理解领域知识、掌握网络、操作系统、IaC和分布式系统等平台特定技能，并重视知识共享。平台工程的挑战在于其广泛的影响范围和分布式环境下的测试复杂性。通过理解依赖、事后分析、有效监控和分阶段测试，确保平台稳定运行，从而支持产品团队更快、更可靠地交付产品。",
      "translated_title": "GitHub工程师如何解决平台问题",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/06/gundam.jpg?resize=1024%2C840",
          "alt": "A photograph of several Gundam models on a shelf.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://avatars.githubusercontent.com/u/27039604?v=4&s=200",
          "alt": "Fabian Aguilar Gomez",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2022/05/careers.svg",
          "alt": "Enterprise content",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Our best practices for quickly identifying, resolving, and preventing issues at scale.</p>\n<p>The post <a href=\"https://github.blog/engineering/infrastructure/how-github-engineers-tackle-platform-problems/\">How GitHub engineers tackle platform problems</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub 初学者指南：使用 GitHub Copilot 进行代码审查和重构 (原标题: GitHub for Beginners: Code review and refactoring with GitHub Copilot)",
      "link": "https://github.blog/ai-and-ml/github-copilot/github-for-beginners-code-review-and-refactoring-with-github-copilot/",
      "pubDate": "Mon, 09 Jun 2025 13:00:00 +0000",
      "isoDate": "2025-06-09T13:00:00.000Z",
      "creator": "Kedasha Kerr",
      "summary": "# GitHub 初学者指南：使用 GitHub Copilot 进行代码审查和重构\n\n本篇文章是“GitHub 初学者指南”系列的第八集，也是最后一集，深入探讨了 GitHub Copilot 在代码审查和重构中的应用。在任何开发项目中，维护一个清晰高效的代码库至关重要，而 GitHub Copilot 不仅能辅助编写代码，还能使代码审查和重构过程更顺畅、更高效。\n\n## 使用 Copilot 进行代码重构\n\nGitHub Copilot 能够帮助开发者重构代码，使其更易于理解和维护。\n\n### 操作步骤与建议类型\n\n1.  **高亮代码并提问：** 在代码编辑器中高亮需要重构的函数，然后在 Copilot Chat 中发送提示，例如“`please provide refactoring suggestions`”（请提供重构建议）。\n2.  **审查建议：** Copilot 会提供多种重构建议，包括将代码拆分为更小的部分、优化逻辑以提高性能，甚至更新变量名称以符合命名规范。\n3.  **应用更改：** 审查并确认建议后，点击“`Apply in editor`”按钮即可自动更新文件。\n\n### 重构范围与具体示例\n\n*   **局部重构：** 适用于对代码特定区域的关注。\n*   **文件或项目级重构：** Copilot 也可以审查整个文件或项目。例如，对于一个仪表盘组件，可以向 Copilot Chat 提问“`How can I improve this code?`”（我如何改进这段代码？），Copilot 会给出多条改进建议，并可进一步解释。\n*   **提取逻辑：** 可以通过提问“`How can I extract the data fetching logic into a custom hook?`”（如何将数据获取逻辑提取到自定义 Hook 中？）来将特定逻辑（如数据获取）提取到可重用的组件中。操作流程包括将更改保存到新文件、导入 Hook 并删除旧代码。\n*   **识别冗余代码：** 提问“`Is there any redundant code in this file?`”（此文件中是否有任何冗余代码？），Copilot 会扫描代码并识别可纠正的冗余部分。\n*   **其他重构辅助：** Copilot 还能提供性能改进建议、帮助函数模块化、添加注释以提高可读性，以及升级语法到更现代的版本等。\n\n![一张幻灯片，解释 Copilot 可以提供性能改进建议、如何使函数更模块化、添加注释以提高可读性、升级语法等等！](https://github.blog/wp-content/uploads/2025/06/copilot_refactor_help.png?resize=1024%2C573)\n\n## 在 GitHub.com 上进行代码审查\n\nGitHub Copilot 也能直接在 GitHub.com 上进行代码审查，使流程更加无缝。\n\n### 审查流程\n\n1.  **创建拉取请求：** 打开一个拉取请求（Pull Request）。\n2.  **请求 Copilot 审查：** 在右上角的“Reviewers”（审查者）部分，会看到 Copilot 列为可能的审查者。点击“Request”（请求）即可让 Copilot 审查代码。\n\n![一张截图，显示了在右侧“审查者”列表中如何请求 Copilot 进行审查。](https://github.blog/wp-content/uploads/2025/06/code_review.png?resize=1024%2C573)\n\n3.  **查看建议：** Copilot 完成审查后，向下滚动拉取请求即可看到其提出的任何建议。\n4.  **接受建议：** Copilot 总是留下“Comment review”（评论审查），从不留下“Approve”（批准）或“Request changes”（请求更改）审查，这意味着 Copilot 的审查永远不会是必需的，也不会阻止合并。要接受 Copilot 的建议，点击特定建议底部的“`Commit suggestion`”（提交建议），然后在上下文菜单中点击“`Commit changes`”（提交更改），GitHub 会更新拉取请求。\n\n![一张截图，显示了标题为“提交建议”的下拉菜单中的“提交更改”按钮。](https://github.blog/wp-content/uploads/2025/06/commit_code_review.png?resize=1024%2C573)\n\n5.  **批量处理与重新审查：** 可以通过点击单个建议下的“`Add to batch`”（添加到批次）按钮来批量处理多个建议。在集成建议后，可以通过点击“Reviewers”框中 Copilot 名称旁边的圆形箭头来再次请求 Copilot 审查。\n\nCopilot 代码审查可以作为团队最终代码审查前的初步审查。\n\n## 关键组成部分与局限性\n\n### 关键组成部分\n\n使用 Copilot 进行代码审查和重构主要包括以下五个方面：\n\n*   **自动化建议：** 在审查代码时，Copilot 会提出改进和优化建议。\n*   **一致性检查：** 通过建议一致的命名约定和函数结构，帮助维护编码标准。\n*   **重构辅助：** 提供可操作的重构建议，无论是简化复杂函数还是重组代码库。\n*   **错误检测：** 能够发现可能遗漏的潜在错误或低效率问题。\n*   **注释支持：** 帮助生成清晰的代码注释，使其更易于他人理解。\n\n### 局限性\n\n尽管 GitHub Copilot 功能强大，但它仍是一个辅助工具，并非人类审查的替代品：\n\n*   **依赖上下文：** Copilot 的建议质量取决于所提供的上下文，不清晰或文档不完善的代码可能导致建议效果不佳。\n*   **非人类审查替代品：** Copilot 无法替代彻底的人工审查。务必仔细检查其提供的建议，确保它们符合项目目标、标准以及组织政策。\n\n![一张幻灯片，列出了 Copilot 的功能：协助代码审查和重构；帮助维护整洁、高效和一致的代码；节省时间并减少错误；让您更专注于构建。](https://github.blog/wp-content/uploads/2025/06/copilot_can_do.png?resize=1024%2C573)\n\n## 总结\n\nGitHub Copilot 是代码审查和重构的宝贵助手，它能帮助开发者维护整洁、高效且一致的代码，从而节省时间并减少错误。通过将 Copilot 整合到工作流程中，开发者可以更专注于构建出色的功能，而不是纠结于代码维护的细节。",
      "shortSummary": "GitHub Copilot 是一个强大的代码审查和重构工具。它通过 Copilot Chat 提供重构建议，如优化代码、提取逻辑和识别冗余。在 GitHub.com 上，Copilot 可作为拉取请求的初步审查者，提供评论但不阻塞合并。其核心功能包括自动化建议、一致性检查和错误检测。尽管功能强大，Copilot 仍是辅助工具，不能替代彻底的人工审查，其建议需人工复核。它旨在帮助开发者维护整洁高效的代码，节省时间并减少错误。",
      "translated_title": "GitHub 初学者指南：使用 GitHub Copilot 进行代码审查和重构",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/06/copilot_refactor_help.png?resize=1024%2C573",
          "alt": "A slide explaining that Copilot can help with performance improvement suggestions, how to make functions more modular, adding comments for readability, upgrading syntax, and much more!",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/06/code_review.png?resize=1024%2C573",
          "alt": "A screenshot shoring where to request a review from Copilot, under the 'reviewers' list on the right.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/06/commit_code_review.png?resize=1024%2C573",
          "alt": "A screenshot showing the 'Commit changes' button in the drop down menu titled 'Commit suggestion.'",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/06/copilot_can_do.png?resize=1024%2C573",
          "alt": "A slide listing items Copilot can do: Assists with code review and refactoring; helps maintain clean, efficient, and consistent code; saves you time and reduces errors; and allows you to focus more on building.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://avatars.githubusercontent.com/u/47188731?v=4&s=200",
          "alt": "Kedasha Kerr",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn how to use GitHub Copilot to help review and polish your code.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/github-for-beginners-code-review-and-refactoring-with-github-copilot/\">GitHub for Beginners: Code review and refactoring with GitHub Copilot</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "使用GitHub Copilot中的编码代理分配和完成问题 (原标题: Assigning and completing issues with coding agent in GitHub Copilot)",
      "link": "https://github.blog/ai-and-ml/github-copilot/assigning-and-completing-issues-with-coding-agent-in-github-copilot/",
      "pubDate": "Fri, 06 Jun 2025 16:00:00 +0000",
      "isoDate": "2025-06-06T16:00:00.000Z",
      "creator": "Alexandra Lietzke",
      "summary": "# GitHub Copilot 编码代理：分配与完成问题\n\nGitHub Copilot 推出了一项新的编码代理功能，旨在帮助开发者更高效地工作，通过将 GitHub 问题分配给它，从而获得经过充分测试的拉取请求。\n\n## 编码代理概述\n\n*   **功能定位**：作为一种新型的软件工程代理，它直接内置于 GitHub 中，一旦被分配 GitHub Issue 或在 VS Code 中收到提示，便会开始工作。\n*   **工作方式**：它像一位异步协作的队友，基于您分配的问题构建拉取请求。它不是简单的自动补全，而是能够异步工作，帮助您加速开发、清理技术债务并专注于更重要的工作。\n*   **核心机制**：\n    *   基于 GitHub Actions 构建，提供集成、安全、可定制的环境。\n    *   接收问题后，会规划工作、打开拉取请求、编写代码、运行测试，然后请求您的审查。\n    *   如果收到反馈，它会修改拉取请求并持续工作直到您批准。\n    *   能够整合相关问题或 PR 讨论的上下文，并遵循团队设定的自定义仓库指令。\n\n## 编码代理与代理模式的区别\n\n*   **代理模式 (Agent Mode)**：\n    *   同步协作器，在您工作时进行配对。\n    *   在 IDE（如 VS Code, JetBrains, Eclipse, Xcode）内作为实时协作器工作，迭代代码、运行测试并实时修正错误。\n*   **编码代理 (Coding Agent)**：\n    *   异步协作器，代表您像队友一样工作。\n    *   作为 SWE 代理在 GitHub Actions 内部运行，接收您分配的问题，探索仓库以获取上下文，编写代码，通过测试，并打开拉取请求供您审查。\n*   **资源消耗**：两者都使用 Copilot 高级请求，编码代理还会消耗 GitHub Actions 分钟数。\n\n## 编码代理的优势与应用场景\n\nGitHub 高级软件工程师 Brittany Ellich 指出，编码代理能帮助开发者更好地完成多项任务：\n\n*   **卸载重复性任务**：例如添加和扩展单元测试、快速修复拼写错误、进行小型重构等。\n*   **改善问题管理和文档**：通过快速修复和小型重构来维护更好的问题卫生和文档。\n*   **提升用户体验**：修复错误、更新用户界面功能和增强可访问性。\n\n通过将这些低到中等复杂度的任务分配给编码代理，开发者可以有更多精力专注于高层次的问题解决和设计、处理积压的技术债务、学习新技能等。\n\n## 使用编码代理完成问题的步骤\n\n尽管 Copilot 执行工作，但您始终掌握控制权：您决定分配什么、批准什么以及需要更改什么。Copilot 还可以通过其“创建问题流程”预览功能帮助您构建问题。\n\n1.  **编写并分配问题给 Copilot**\n    *   这是最关键的步骤，需要提供充足的上下文，如同向团队成员简要说明任务。\n    *   **包含信息**：相关背景信息、预期结果、技术细节、格式或 linting 规则。\n    *   **分配方式**：通过 github.com、GitHub 移动应用或 GitHub CLI。\n    *   **任务范围**：最适合范围明确的任务，但也能处理大型任务（可能耗时更长）。可以批量分配多个问题。\n    *   **实用技巧**：\n        *   使用问题模板（如“描述”和“验收标准”字段）提高一致性。\n        *   Copilot 会利用仓库中的自定义指令（如自动生成文件、格式化规则）。\n        *   代理能够识别分配问题中包含的图片，因此您可以分享新功能的外观图片。\n\n2.  **Copilot 规划代码**\n    *   分配后，Copilot 会添加 👀 表情符号反应，并启动 GitHub Actions 会话。\n    *   在此环境中，Copilot 会探索和分析代码库、运行测试并进行更改。\n    *   它会同时打开一个分支和一个拉取请求，并随着工作进展而演变。\n    *   Copilot 会阅读问题并将其分解为任务清单，然后更新拉取请求。\n    *   完成任务后，Copilot 会将其勾选并推送提交。您可以实时查看会话、查看日志或刷新 PR。\n\n3.  **Copilot 编写代码**\n    *   当拉取请求时间线显示“Copilot started work”事件时，表示工作已开始。\n    *   Copilot 会根据问题修改代码库，运行自动化测试和 linter（如果存在），并根据需要更新或生成测试。\n    *   它会迭代推送提交。您可以实时查看工作进展，并在必要时介入以确保方向正确。\n\n4.  **审查并合并拉取请求**\n    *   Copilot 完成工作后，会标记您进行审查。您可以：\n        *   批准拉取请求\n        *   留下评论\n        *   要求更改\n    *   Copilot 会根据仓库规则自动请求审阅者。可以进行多轮审查。\n    *   **重要提示**：问题创建者不能是最终批准者。需要由同事、经理或指定审阅者批准，以促进协作并确保代码安全。\n\n## 成功使用编码代理的建议\n\n*   **编写全面的问题**：清晰、范围明确、文档完善的问题会带来更好的结果。\n*   **从小处着手**：尝试将代理用于测试、文档或简单的重构。\n*   **故障排除**：如果 Copilot 遇到问题，在评论中标记它并添加更多上下文。迭代和完善问题要求也有帮助。\n\n## 展望\n\nAI 和 LLM 正在快速发展，编码代理已在实际工作流程中展现出实用性。鼓励开发者尝试使用编码代理，构建自己的代理工作流。",
      "shortSummary": "GitHub Copilot 推出了一项新的编码代理功能，允许开发者将 GitHub 问题分配给它。该代理作为异步队友，能自动规划、编写代码、运行测试并创建拉取请求，从而帮助开发者卸载重复性任务，专注于更复杂的开发工作。用户始终保持控制权，通过细致的问题描述和审查流程指导代理。这项功能旨在显著提升开发效率，加速软件交付。",
      "translated_title": "使用GitHub Copilot中的编码代理分配和完成问题",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Have you tried the new coding agent in GitHub Copilot? Here’s how developers are using it to work more efficiently. </p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/assigning-and-completing-issues-with-coding-agent-in-github-copilot/\">Assigning and completing issues with coding agent in GitHub Copilot</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何在GitHub上快速创建问题和拉取请求 (原标题: How to create issues and pull requests in record time on GitHub)",
      "link": "https://github.blog/developer-skills/github/how-to-create-issues-and-pull-requests-in-record-time-on-github/",
      "pubDate": "Thu, 05 Jun 2025 16:00:00 +0000",
      "isoDate": "2025-06-05T16:00:00.000Z",
      "creator": "Jon Peck",
      "summary": "## GitHub Copilot如何加速问题和拉取请求的创建\n\n软件开发的核心始于对话，而GitHub上的“问题”（Issue）正是这种对话的结晶。一个精心设计的问题为后续的拉取请求（PR）、代码审查、测试和部署奠定了基础。GitHub Copilot正在改变从想法到问题再到PR的流程，通过协助起草问题并将其分配给其编码代理，从而显著加速整个开发周期。\n\n本文将深入探讨：\n\n*   问题为何仍然是GitHub上工作的核心，无论是由人工还是Copilot创建。\n*   与团队或Copilot协作时，构建优质问题的最佳实践。\n*   Copilot驱动的工作流如何帮助您更快地推进工作，确保一致性，并为Copilot编码代理的自动化修复做好准备。\n\n## 为何优质的问题和拉取请求至关重要\n\nGitHub上的问题和拉取请求是核心构建块。每个问题描述一项独立的工作，并提供有用的细节和要求；PR则捆绑已完成的工作以进行代码审查和合并。即使在AI加速的工作流中，这些“工件”仍是团队理解工作进展的关键。无论由谁（或什么）创建，结构良好的问题和拉取请求都能带来四大关键优势：\n\n*   **共享上下文**：一个URL即可捕获问题陈述、复现步骤和完成定义，便于新成员快速了解。\n*   **异步协作**：减少会议，让开发人员可以异步工作，仅在必要时进行同步。\n*   **审计和分析**：标签、里程碑和模板支持仪表盘、SLA和合规性报告。\n*   **自动化钩子**：Actions工作流、项目看板和代理工具都依赖于附加到每个问题的可预测元数据。\n\n**不良问题的示例**：文章中提到一个糟糕的问题示例，仅有标题“Issue #12609: Found broken link. Please fix!”，但正文没有任何解释、实际链接、上下文、环境或版本信息，也没有可复现的示例或建议修复。这种模糊的提示会导致模糊的输出，无论是人类还是机器。\n\nAI（如大型语言模型）在目标、约束和成功标准明确时表现最佳。Copilot通过协助创建问题，让开发者能够专注于清晰度，而非复制粘贴，因为它能定位相关引用、构建初始问题结构，甚至添加标签或项目分配。\n\n## 优质GitHub问题的构成要素\n\n创建或审查问题时，请使用以下清单（Copilot会协助编写，但您仍需把控）：\n\n*   **行动导向的标题**：以名词开头，动词结尾（例如：“登录按钮 – 在Safari 17 beta上禁用”）。\n*   **问题或用户故事**：描述痛点（例如：“作为购物者，我无法在移动Safari上点击购买，因此放弃购物车并哭泣。”）。\n*   **预期行为与实际行为**：简洁的对比（例如：“应渲染主按钮” vs. “按钮不可点击，无CSS pointer-events。”）。\n*   **复现步骤或视觉证据**：GIF、截图或命令行细节，帮助团队成员（或Copilot）快速理解问题。\n*   **验收标准/完成定义**：明确的通过/失败标准（例如：“所有测试通过”，“Lighthouse分数 > 90”，“功能标志已移除”）。\n*   **范围和约束**：防止过度开发（例如：性能预算、浏览器列表、无新依赖）。\n*   **元数据**：标签、负责人、里程碑、项目，这是驱动看板、筛选和Slack通知的关键。\n\n## 如何使用Copilot在GitHub上更快地起草问题\n\n优质问题具备两个特点：编写快速且上下文丰富。GitHub Copilot的“创建问题”流程兼顾两者。您无需在不同字段间跳转或复制粘贴片段，只需打开Copilot Chat并用自然语言描述问题，例如：“创建关于octo-org/octo-web登录表单500错误的bug报告。”\n\nCopilot会起草标题、正文，甚至建议标签和负责人，并根据您的仓库首选模板进行格式化，确保每次问题都以正确的格式呈现。\n\n**分步指南**：\n\n1.  在github.com/copilot打开Copilot Chat的沉浸式视图。\n2.  描述您的需求。提及仓库（组织/仓库）或让Copilot根据您上次提交问题的位置推断。\n3.  如果图片能更快地说明问题，请插入截图；Copilot会将其嵌入草稿并引用在描述中。\n4.  审查草稿。可以提出后续提示（例如：“添加复现步骤”、“切换到bug模板”）或直接修改Markdown。\n5.  确认无误后点击“创建”。\n\n**使用GitHub Copilot构建优质问题的技巧**：\n\n| 您做什么           | Copilot如何帮助                                | 为何重要                                     |\n| :----------------- | :--------------------------------------------- | :------------------------------------------- |\n| 提供上下文         | 将您的措辞解析到正确的模板部分。               | 团队成员（或Copilot）获得清晰度。            |\n| 附上证据           | “图像转问题”将文件保留在问题正文中。           | 未来的调试者能准确看到您所看到的。           |\n| 标记后续操作       | 一次性添加负责人、标签、里程碑。               | 保持看板整洁，工作流自动化。                 |\n| 批量处理相关bug    | 生成多个草稿供您单独批准。                     | 在分类模式下无需切换标签页。                 |\n\n## 如何通过GitHub Copilot的编码代理将问题转化为草稿PR\n\n一旦您通过Copilot获得了清晰的问题，就可以通过编码代理将其分配给Copilot（它会像任何团队成员一样显示）或直接询问：“将此分配给Copilot。”当您点击“创建”时，Copilot会接管并开始修复工作——您会在问题线程上看到👀表情符号。\n\n**幕后流程**：\n\n1.  Copilot启动一个安全的GitHub Actions工作区。\n2.  它克隆仓库，进行语义代码搜索（RAG风格），并制定修复计划。\n3.  提交会实时推送到草稿PR，您可以实时查看——没有意外的强制推送。\n4.  您的标准分支保护和CI门禁仍会运行。\n\n**这样做的好处**：\n\n*   **并行化**：您在审查时Copilot在编写，开发周期完美重叠。\n*   **可审计性**：每次提交、差异和评论都清晰可见，没有黑盒AI的神秘感。\n*   **安全保障**：遵循相同的CODEOWNERS和签名规则，在提高速度的同时保持控制。\n\n## 常见问题与快速解答\n\n*   **“Copilot会用低质量问题淹没我的仓库吗？”**：它起草，您完善并点击“创建”。相同的速率限制，相同的模板——只是减少了打字量。\n*   **“它能更新现有问题吗？”**：目前不能。目前仅支持新建；更新现有问题的功能正在路线图上。\n*   **“它理解我的自定义模板吗？”**：是的！Copilot会从您的仓库中推断，并且您可以在起草过程中切换模板而不会丢失提示上下文。\n*   **“支持移动端吗？”**：目前仅支持桌面端；移动端支持正在计划中。\n\n## 总结\n\n下次当您觉得“天哪，提交这个bug比修复它还费时间”时，打开Copilot Chat，让机器人处理表单字段，您则专注于捕捉意图。将想法更快地转化为问题和PR，用户就能更快地获得功能——您也能更快地回到有趣的工作中。祝您编码愉快！\n\n想要了解更多关于GitHub Copilot的信息？请访问我们的文档。\n\n**作者**：\n\n![Jon Peck](https://avatars.githubusercontent.com/u/5299412?v=4&s=200)\n\n**探索更多来自GitHub的内容**：\n\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) **文档**：掌握GitHub所需的一切，尽在一个地方。 [前往文档](https://docs.github.com/)\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) **GitHub**：在GitHub上构建未来，这里是任何人、任何地点构建任何东西的地方。 [开始构建](https://github.com/)\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) **客户案例**：了解使用GitHub进行构建的公司和工程团队。 [了解更多](https://github.blog/customer-stories/)\n*   ![Enterprise content](https://github.blog/wp-content/uploads/2022/05/careers.svg) **企业内容**：专为您策划的执行洞察。 [开始](https://github.blog/enterprise/)",
      "shortSummary": "GitHub Copilot显著加速了在GitHub上创建问题和拉取请求的流程。它能根据自然语言描述自动起草清晰的问题，包括标题、正文和元数据，并支持添加截图和遵循自定义模板。更进一步，Copilot的编码代理可直接接管问题，自动生成并提交草稿PR，实现开发工作的并行化和自动化。这大大提高了开发效率，确保了工作流的清晰性和可审计性。",
      "translated_title": "如何在GitHub上快速创建问题和拉取请求",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/5299412?v=4&s=200",
          "alt": "Jon Peck",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2022/05/careers.svg",
          "alt": "Enterprise content",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn how to spin up a GitHub Issue, hand it to Copilot, and get a draft pull request in the same workflow you already know.</p>\n<p>The post <a href=\"https://github.blog/developer-skills/github/how-to-create-issues-and-pull-requests-in-record-time-on-github/\">How to create issues and pull requests in record time on GitHub</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "攻破模型：通过GitHub安全代码游戏构建AI安全技能 (原标题: Hack the model: Build AI security skills with the GitHub Secure Code Game)",
      "link": "https://github.blog/security/hack-the-model-build-ai-security-skills-with-the-github-secure-code-game/",
      "pubDate": "Tue, 03 Jun 2025 16:37:03 +0000",
      "isoDate": "2025-06-03T16:37:03.000Z",
      "creator": "Joseph Katsioloudes",
      "summary": "# GitHub安全代码游戏第三季：构建AI安全技能\n\nGitHub近日推出了安全代码游戏第三季，本次重点聚焦人工智能引入的安全风险，旨在通过实践帮助开发者提升AI安全技能。\n\n## 关于GitHub安全代码游戏\n\n*   **免费软件安全课程**：适合所有开发者水平。\n*   **学习方式**：玩家通过修复故意设置的漏洞代码来构建代码安全技能。\n*   **沉浸式体验**：游戏直接在代码编辑器中进行，模拟开发者日常工作环境。\n*   **快速上手**：使用Codespaces，两分钟内即可开始。\n\n## 历史与成就\n\n*   **第一季（2023年3月）**：旨在弥补开发者培训中安全技能的不足，通过看似完美但实则包含OWASP Top 10等关键漏洞的代码片段吸引玩家。\n*   **游戏化学习**：挑战玩家高效修复问题，同时避免引入新漏洞或遗漏边缘情况。\n*   **第二季**：在强大社区支持下推出，已有超过10,000名来自企业、开源和教育领域的开发者参与，磨练了技能。\n*   **玩家反馈**：\n    *   Sanyam Mehta（后端开发者）：“这让我意识到识别最基本缺陷的差距有多大，也让我更加谨慎。”\n    *   Tyler Anton（计算机科学学生）： “这是一种非常有趣的学习方式！我绝对会推荐这款游戏，它帮助我更清楚地认识到存在的漏洞。”\n\n## 第三季：聚焦AI安全\n\n*   **推出背景**：随着生成式AI的广泛应用（麦肯锡报告显示，生成式AI使用率从2023年的33%增至2024年的71%），以及GitHub Copilot被超过77,000个组织使用，提升AI安全技能正当其时。\n*   **学习内容**：第三季包含六个现实挑战，难度递增，涵盖以下防御技术：\n    1.  **构建健壮的系统提示**：安全地设计引导模型行为的初始指令，确保输出安全、相关且符合预期。\n    2.  **输出验证**：通过验证输出是否符合预定义规则、格式或预期来防止信息泄露。\n    3.  **输入过滤**：在用户提供的文本输入模型之前进行检查、修改或阻止，以防止有害或不相关内容影响模型生成输出。\n    4.  **LLM自我验证**：利用大型语言模型（LLM）检查自身输出的准确性、一致性和合规性。\n\n## 游戏玩法\n\n*   玩家需“攻破”大型语言模型（LLM）。\n*   每个挑战始于LLM的一组指导指令（代码和系统消息），其中可能包含可被恶意提示利用的漏洞或边缘情况。\n*   **任务一**：识别漏洞，并精心设计提示来操纵模型，使其泄露隐藏的秘密。\n*   **任务二**：在保持代码功能的同时，完善代码和系统消息，以防止未来出现类似的恶意提示泄露。\n\n## 玩家感言\n\n*   Rajeev Mandalam（波音公司应用安全）： “我学会了发现漏洞，了解它们发生的位置和方式，并在将其发布到世界之前有效地纠正它们。我绝对会向任何人推荐这项培训，不仅是网络安全领域，也包括软件开发领域。”\n*   Reshmi Mehta（爱尔康安全分析师）： “一个主要收获是，关注细节很重要，因为它们常常会导致你意想不到的漏洞。在格式方面，我喜欢它不专注于某一种特定的编程语言，而是强调代码概念。我也喜欢游戏关卡之间切换的便捷性。这款游戏为我的职业生涯增添了很棒的新技能。”\n\n## 如何开始\n\n*   访问Secure Code Game GitHub仓库，其中包含所有季度的说明。\n\n## 第三季的诞生\n\n*   第三季由Bartosz Gałek（@bgalek）贡献，源于他在FOSDEM 2025上与Joseph Katsioloudes的交流。\n*   Bartosz创建的“HackMerlin”游戏（挑战玩家的提示工程技能）成为了第三季的基础。\n*   **游戏界面截图**：\n    ![游戏界面截图，显示了第6关的交互式游戏界面。游戏指示玩家通过巧妙提问来智取梅林，以揭示密码。顶部显示卡通巫师梅林，说着“你好，旅行者！问我任何问题……”。下方是一个文本框，用户可以在其中输入问题，一个“提问”按钮，以及一个标有“输入秘密密码”的字段，后面跟着一个“提交”按钮，用于检查答案的有效性。](https://github.blog/wp-content/uploads/2025/06/hackmerlin.png?resize=932%2C1240)\n*   **技术实现**：\n    *   从HackMerlin的UI中心方法转向安全代码游戏的“代码优先”方法，同时确保用户友好性是一个关键挑战。\n    *   Codespaces预配置了开发环境，并自动化了对GitHub Models的访问，后者提供了内置的LLM集成。\n    *   第三季通过遵循GitHub Models的默认安全防护措施来优先考虑真实性。\n\n## 参与贡献\n\n*   欢迎提出新挑战的想法，成为下一季的贡献者。\n\n## 立即体验\n\n*   立即开始游戏，释放你的创造力，迎接第三季的挑战！",
      "shortSummary": "GitHub发布了安全代码游戏第三季，专注于AI安全技能培训。这款免费课程让开发者通过在代码编辑器中实践，学习如何识别和修复大型语言模型（LLM）中的安全漏洞。内容涵盖构建健壮提示、输出验证、输入过滤和LLM自我验证等。游戏基于社区贡献，旨在帮助开发者应对日益增长的AI安全风险，提升其在AI时代的关键技能。",
      "translated_title": "攻破模型：通过GitHub安全代码游戏构建AI安全技能",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/06/hackmerlin.png?resize=932%2C1240",
          "alt": "Screenshot of an interactive game interface at Level 6. The game instructs the player to outsmart Merlin by asking clever questions to reveal a password. A cartoon wizard, Merlin, appears at the top, saying 'Hello traveler! Ask me anything...'. Below is a text box where the user can type questions, an 'Ask' button, and a field labeled 'Enter the secret password' followed by a 'Submit' button to check the validity of the answer.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://avatars.githubusercontent.com/u/31040295?v=4&s=200",
          "alt": "Joseph Katsioloudes",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2022/05/careers.svg",
          "alt": "Enterprise content",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Dive into the novel security challenges AI introduces with the open source game  that over 10,000 developers have used to sharpen their skills.</p>\n<p>The post <a href=\"https://github.blog/security/hack-the-model-build-ai-security-skills-with-the-github-secure-code-game/\">Hack the model: Build AI security skills with the GitHub Secure Code Game</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "DNS重绑定攻击解析：查找源自内部！ (原标题: DNS rebinding attacks explained: The lookup is coming from inside the house!)",
      "link": "https://github.blog/security/application-security/dns-rebinding-attacks-explained-the-lookup-is-coming-from-inside-the-house/",
      "pubDate": "Tue, 03 Jun 2025 16:00:00 +0000",
      "isoDate": "2025-06-03T16:00:00.000Z",
      "creator": "Jaroslav Lobacevski",
      "summary": "# DNS重绑定攻击解析：查找源自内部！\n\n本文深入探讨了DNS重绑定攻击，这是一种严重的浏览器安全漏洞，能够绕过同源策略（Same-Origin Policy, SOP），从而允许攻击者访问受害者本地机器或网络上的内部应用程序。\n\n## 同源策略 (Same-Origin Policy, SOP)\n\n同源策略是Netscape于1995年引入的浏览器安全基石。其核心思想是阻止来自一个源的脚本访问另一个源的数据，以保护用户隐私（例如，防止恶意网页读取用户的网络邮件）。一个“源”由协议（schema）、主机（DNS名称）和端口号三部分组合定义。这三者中任何一个不匹配，都意味着是不同的源。\n\n| URL | 结果 | 原因 |\n| :----------------------------------------- | :--- | :----------------------------------- |\n| `https://www.somedomain.com:81/sub/page.html` | 不同 | 端口81与HTTPS默认端口443不匹配 |\n| `https://somedomain.com/sub/page.html` | 不同 | 需要精确匹配`www.somedomain.com` |\n| `http://www.somedomain.com:443/sub/page.html` | 不同 | 协议HTTP与HTTPS不匹配 |\n| `https://www.somedomain.com/admin/login.html` | 相同 | 只有路径不同 |\n\n## 攻击原理：DNS重绑定\n\n人们常误以为在本地运行的服务是与外部世界完全隔离的。然而，浏览器可能成为攻击者访问本地网络应用的门户。DNS重绑定攻击利用了浏览器安全机制与网络协议之间的脱节：即使解析的IP地址发生变化，浏览器仍会将来自同一主机的请求视为同源。攻击者控制一个域名（例如`somesite.com`）及其DNS服务器。他们最初将该域名解析到一个公共IP地址，然后迅速将后续解析切换到本地网络IP地址（如`192.168.0.1`或`127.0.0.1`）。从`somesite.com`加载的JavaScript将在受害者浏览器中运行，其后续对`somesite.com`的请求将被导向新的本地IP地址。由于浏览器仍认为这是“同源”请求，攻击者便能通过JavaScript与受害者的本地网络进行交互。需要注意的是，本地服务的认证Cookie不会被发送，因为浏览器仍处于攻击者域名的上下文中。\n\n## 防御尝试：DNS缓存\n\n浏览器试图通过缓存DNS响应来抵抗DNS重绑定，但这种防御远非完美。一些浏览器已实现本地网络访问（CORS-RFC1918）规范，但仍存在绕过方式，例如在Linux和macOS上使用`0.0.0.0`IP地址。由于涉及浏览器DNS缓存、操作系统DNS缓存和DNS名称服务器等多个层面，这种攻击常被认为不可靠。然而，也存在自动化攻击工具，如Tavis Ormandy的Simple DNS Rebinding Service和NCCGroup的Singularity of Origin。\n\n## 真实世界漏洞案例：Deluge BitTorrent客户端\n\nDeluge BitTorrent客户端（已在v2.2.0中修复）曾存在一个真实世界的漏洞，可被DNS重绑定攻击利用。Deluge WebUI（一个可选的本地运行服务）的未认证`/js`端点存在路径遍历漏洞，允许任意文件读取。攻击者可以通过构造请求（例如`/js/known_keyword/../...`）绕过路径验证，读取系统上的任意文件，只要其MIME类型能被识别。例如，攻击者可以读取Deluge的`web.conf`配置文件，其中包含WebUI管理员密码的SHA1哈希（带盐）和会话列表。如果能获取有效会话或暴力破解密码，攻击者便可利用CVE-2017-7178漏洞，通过`/json` Web API下载、安装并运行恶意插件。\n\n## 漏洞利用（Deluge示例）\n\n即使Deluge WebUI仅在本地可访问，攻击者也可以利用DNS重绑定攻击来访问这个未认证的服务。对于实现了CORS-RFC1918的浏览器，攻击者可以利用Linux和macOS上的非路由`0.0.0.0`IP地址作为绕过。攻击流程大致如下：\n\n1.  Deluge WebUI用户访问一个恶意网站（`somesite.com`），该网站包含多个IFrames。\n2.  每个IFrame尝试从攻击者控制的子域（例如`http://sub.somesite.com:8182/attack.html`）加载内容。\n3.  攻击者控制的DNS解析器会交替返回`0.0.0.0`和真实服务器IP地址，并设置极低的TTL（生存时间）。\n4.  当DNS解析到真实IP地址时，IFrame中的脚本会等待DNS条目过期。\n5.  一旦DNS重绑定成功，脚本将尝试请求并读取本地配置文件（例如`http://sub.somesite.com:8182/js/deluge-all/..%2F..%2F..%2F..%2F..%2F..%2F.config%2Fdeluge%2Fweb.conf`）。\n6.  如果攻击成功，配置文件中的敏感信息将被窃取。\n\n## 如何主动防御DNS重绑定攻击\n\n*   **使用HTTPS服务：** DNS重绑定攻击对HTTPS服务无效。一旦与`somesite.com`建立TLS会话，浏览器会验证证书主题与域名是否匹配。IP地址改变后，浏览器需要建立新的会话，但由于本地部署的Web应用程序的证书与域名不匹配，连接将失败。\n*   **强制强认证：** 即使是未加密的HTTP服务，也要确保使用强认证。由于浏览器在攻击者域名的上下文中运行，本地服务的认证Cookie不会被发送给攻击者。\n*   **验证Host头：** 检查请求的Host头，并拒绝不严格匹配允许列表的请求。重绑定请求的Host头将包含攻击者的域名（例如`somesite.com`）。\n\n## 总结与建议\n\n在本地运行Web应用程序是开发人员的常见做法，但永久部署的、无需认证且不使用TLS（即无HTTPS加密）的本地网络Web应用程序是一个危险信号。DNS重绑定攻击生动地说明了看似隔离的本地服务如何通过浏览器行为和对网络边界的错误假设而被暴露。切勿仅仅因为服务“仅在本地运行”就认为它是安全的。始终对所有本地服务或开发工具强制实施强密码认证和严格的访问控制。任何没有严格访问控制的本地服务都可能通过受害者的浏览器被暴露。务必验证Host头，并尽可能使用HTTPS。在开发下一个Web应用程序时，请务必将DNS重绑定纳入您的威胁模型。\n\n---\n\n**作者：**\n\n![Jaroslav Lobacevski](https://avatars.githubusercontent.com/u/26652396?v=4&s=200)\n\n**探索更多来自GitHub的资源：**\n\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) **文档**\n    掌握GitHub所需的一切，尽在一处。\n    [前往文档](https://docs.github.com/)\n\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) **GitHub**\n    在GitHub上构建未来，这里是任何地方的任何人构建任何东西的地方。\n    [开始构建](https://github.com/)\n\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) **客户案例**\n    了解使用GitHub进行构建的公司和工程团队。\n    [了解更多](https://github.com/customer-stories)\n\n*   ![Enterprise content](https://github.blog/wp-content/uploads/2022/05/careers.svg) **企业内容**\n    专为您策划的执行洞察。\n    [开始](https://github.com/enterprise)",
      "shortSummary": "DNS重绑定攻击利用浏览器同源策略与DNS解析的脱节，通过控制DNS服务器将域名解析从公共IP切换到本地IP。这使得攻击者网站的JavaScript能够与受害者本地网络或机器上的内部Web应用交互，即使这些服务“仅在本地运行”。防御措施包括使用HTTPS、强制强认证和验证Host头，以保护本地服务免受此类隐蔽攻击。",
      "translated_title": "DNS重绑定攻击解析：查找源自内部！",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/26652396?v=4&s=200",
          "alt": "Jaroslav Lobacevski",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2022/05/careers.svg",
          "alt": "Enterprise content",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>DNS rebinding attack without CORS against local network web applications. Explore the topic further and see how it can be used to exploit vulnerabilities in the real-world.</p>\n<p>The post <a href=\"https://github.blog/security/application-security/dns-rebinding-attacks-explained-the-lookup-is-coming-from-inside-the-house/\">DNS rebinding attacks explained: The lookup is coming from inside the house!</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "事半功倍：GitHub Copilot 编码代理与代理模式的区别 (原标题: Less TODO, more done: The difference between coding agent and agent mode in GitHub Copilot)",
      "link": "https://github.blog/developer-skills/github/less-todo-more-done-the-difference-between-coding-agent-and-agent-mode-in-github-copilot/",
      "pubDate": "Mon, 02 Jun 2025 16:00:00 +0000",
      "isoDate": "2025-06-02T16:00:00.000Z",
      "creator": "Andrea Griffiths",
      "summary": "## GitHub Copilot 编码代理与代理模式的区别\n\nGitHub Copilot 在2025年推出了两项全新的、截然不同的AI超能力：**代理模式（Agent mode）**和**编码代理（Coding agent）**。虽然两者都是AI代理，但它们针对日常工作流的不同部分进行了优化，旨在帮助开发者“减少待办，增加完成”。\n\n### 核心区别速览\n\n*   **代理模式（Agent mode）**：\n    *   **同步**：在VS Code（以及JetBrains/Eclipse/Xcode预览版）等编辑器内部工作。\n    *   **实时协作者**：作为自主协作者，实时迭代代码、运行测试并修复自身错误。\n*   **编码代理（Coding agent）**：\n    *   **异步**：在GitHub Actions中运行（公开预览版）。\n    *   **异步队友**：接收你分配的问题（`assignee: Copilot`），探索仓库，编写代码，通过测试，并为你提交经过充分测试的拉取请求（PR）。\n\n可以将代理模式想象成与你结对编程的资深开发者，而编码代理则是勤奋地处理明确范围任务的队友。两者可以（也应该）协同使用：例如，在代理模式下进行交互式原型开发，然后将后续任务交给编码代理。\n\n### 代理模式（Agent mode）：您的实时协作者\n\n代理模式将Copilot Chat转变为一个工具编排器（如 `read_file`、`edit_file`、`run_in_terminal` 等）。你只需给出自然语言目标（例如：“为我们的Flask应用添加OAuth并编写测试”），它就会规划、编辑文件、运行测试套件、读取失败、修复错误，并循环直到通过。你可以观察其步骤，随时介入，所有更改都保留在本地。\n\n**如何开启代理模式：**\n\n1.  在VS Code中打开Copilot Chat。\n2.  从模式下拉菜单中选择“Agent”。\n3.  （可选但推荐）点击“Tools”→“Manage”来启用或禁用功能并添加MCP扩展。\n\n**充分利用代理模式的专业技巧：**\n\n*   **明确结果范围**：清晰地表达你想要什么，避免模糊描述。\n*   **提供上下文**：指向规范文件或粘贴架构，避免其重新发明。\n*   **交互式迭代**：让它运行，但在偏离时进行引导，就像与一位快速但偶尔需要指导的熟练队友结对编程。\n*   **通过MCP服务器扩展**：如果你需要自定义工具（如数据库迁移、云部署等）。\n*   **选择模型**：OpenAI GPT-4o 提供原始能力，Anthropic Claude 适用于更长的上下文，可通过模型选择器切换。\n\n### 编码代理（Coding agent）：您的异步队友\n\n代理模式存在于IDE中，而编码代理则存在于你的仓库中。将一个问题分配给Copilot，它就会启动一个安全的云工作区（通过GitHub Actions），制定计划，在自己的分支上编辑代码，运行你的测试/Linter，并打开一个拉取请求，标记你进行审查。\n\n**如何启用编码代理：**\n\n1.  **计划资格**：需要Copilot Pro+或Copilot Enterprise。\n2.  **开启开关**：企业管理员必须在组织策略中启用“Copilot coding agent”。\n3.  **分配问题**：通过将问题分配给Copilot，并用自然语言描述来启动编码代理。例如：`### Feature: add dark-mode toggle assignees: Copilot`。\n\n**编码代理的理想任务：**\n\n*   测试完善的仓库中低到中等复杂度的更改。\n*   添加或扩展单元测试。\n*   小型重构（重命名服务、提取辅助函数）。\n*   文档或错别字修复。\n\n**目前不适合：**大规模重写、跨仓库更改、测试覆盖率为0%的代码库。\n\n**使用GitHub Copilot编码代理的专业技巧：**\n\n*   **在问题中编写清晰的验收标准**：代理会将其视为规范。\n*   **链接到更改涉及的文件或函数**：节省探索时间。\n*   **保持原子性**：每个问题只包含一个逻辑任务。多个小问题比一个庞然大物更容易扩展。\n*   **利用PR评论**：要求代理进行调整，然后你可以将逻辑提取到单独的函数中并添加错误处理。\n*   **注意分钟数**：繁重任务会消耗Actions分钟数和高级请求，因此请策略性地排队。\n\n### 并排比较：选择合适的工具\n\n| 决策维度     | 代理模式（Agent mode）                               | 编码代理（Coding agent）                               |\n| :----------- | :--------------------------------------------------- | :----------------------------------------------------- |\n| 工作流节奏   | 实时协作、对话式、迭代式                             | 即发即忘、后台任务                                     |\n| 界面         | VS Code / JetBrains / Eclipse / Xcode 聊天           | GitHub Issues 或 Copilot Chat → 通过拉取请求监控       |\n| 典型任务     | 重构、原型开发、调试、迁移                           | 添加功能、修复Bug、扩展测试、无聊和重复的工程任务      |\n| 人工监督     | 持续（你观察编辑）                                   | 在拉取请求审查检查点                                   |\n| 资源成本     | 高级请求                                             | 高级请求 + Actions 分钟数                              |\n| 最佳适用场景 | 探索未知代码、紧密的反馈循环                         | 清理待办、并行化琐事                                   |\n\n### 通过协同使用两者实现事半功倍\n\nCopilot的超能力并非非此即彼，它们是互补的。当实时、编辑器内的代理模式遇到稳定、后台运行的编码代理时，其魔力才真正展现。以下是三种经过验证的搭配，可让你充分发挥两者的生产力：\n\n1.  **代理模式原型开发，编码代理交付**：使用代理模式快速实现一个功能分支。然后，创建一个描述完善任务的问题，并分配给Copilot。\n2.  **代理模式生成规范，编码代理实现**：要求代理模式根据代码上下文起草设计文档。对其进行微调，然后将任务交给编码代理执行。\n3.  **编码代理回归修复，代理模式紧急修补**：如果编码代理的拉取请求导致构建失败，在本地打开分支并召唤代理模式进行诊断和即时修补。\n\n### 安全与质量检查清单\n\n在合并代码之前，请务必进行以下快速检查，以确保质量、安全和版本控制的良好实践：\n\n*   **测试通过**：两个代理都依赖测试——投入测试覆盖率，否则它们将盲目运行。\n*   **秘密安全**：编码代理在安全的临时环境中运行；但仍需保护 `.env` 文件。\n*   **全面审查**：代理加速工作；它们不会消除你作为记录审查者的责任。\n*   **版本控制**：代理模式在本地分支中进行编辑，因此请尽早并经常提交。\n\n### 常见问题解答\n\n*   **编码代理能否修复2002年的旧Perl CGI脚本？** 它可以尝试——但没有测试就像教金毛犬微积分。建议先使用代理模式进行重构。\n*   **代理模式是否支持Vim？** 暂不支持。\n*   **我能同时向编码代理抛出多少问题？** 多个，但请记住每个问题都会消耗计算资源和你的拉取请求队列容忍度。\n*   **GitHub Copilot编码代理能否处理图片？** 是的！借助视觉模型，它可以“看到”GitHub问题中包含的Bug截图或原型图，使视觉Bug报告更加有效。\n*   **能否访问外部数据源？** 是的！通过模型上下文协议（MCP）支持，GitHub Copilot编码代理可以连接到GitHub之外的外部数据和功能。\n\n### 总结\n\n**代理模式**是编辑器内的同步掌握；**编码代理**是GitHub问题和PR中的异步工作。清晰的提示、良好的测试和小范围的任务仍然是成功的秘诀。协同使用这两个代理可以覆盖整个开发周期——从“嗯，如果……”到“LGTM，发布吧。”\n\n让人类工程师参与架构选择、安全审查和庆祝击掌。AI代理不会取代工程师；它们将取代工程中无聊的部分。这意味着有更多时间用于创新功能、更好的代码质量和构建未来。这不正是我们热爱成为开发者的原因吗？\n\n### 作者信息及相关链接\n\n本文由 **Andrea Griffiths** 撰写，她是GitHub的高级开发者倡导者，拥有十多年的开发者工具经验。她将技术深度与使先进技术更易于访问的使命相结合。她住在佛罗里达州，与她的威尔士伴侣、两个儿子和两条狗一起生活，并通过GitHub的全球倡议继续推动创新和支持开源。\n\n![Andrea Griffiths](https://github.blog/wp-content/uploads/2025/03/cropped-IMG_1971-200x200.jpeg)\n\n探索更多来自GitHub的内容：\n\n*   **文档**：掌握GitHub所需的一切，尽在一处。\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n*   **GitHub**：在GitHub上构建未来，这里是任何人、任何地方、构建任何东西的场所。\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n*   **客户案例**：了解使用GitHub进行构建的公司和工程团队。\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n*   **企业内容**：专为您策划的执行洞察。\n    ![Enterprise content](https://github.blog/wp-content/uploads/2022/05/careers.svg)",
      "shortSummary": "GitHub Copilot新增了“代理模式”（Agent mode）和“编码代理”（Coding agent）两大AI能力。代理模式是编辑器内的实时协作工具，用于即时代码迭代和修复；编码代理是云端的异步队友，可自动处理GitHub问题、编写代码并提交PR。两者可协同使用，提升开发效率，取代重复性工作，让工程师专注于创新。尽管AI加速了工作，但仍需人工审查、测试和版本控制来确保代码质量和安全。",
      "translated_title": "事半功倍：GitHub Copilot 编码代理与代理模式的区别",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/03/cropped-IMG_1971-200x200.jpeg",
          "alt": "Andrea Griffiths",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2022/05/careers.svg",
          "alt": "Enterprise content",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>We’ll decode these two tools—and show you how to use them both to work more efficiently. </p>\n<p>The post <a href=\"https://github.blog/developer-skills/github/less-todo-more-done-the-difference-between-coding-agent-and-agent-mode-in-github-copilot/\">Less TODO, more done: The difference between coding agent and agent mode in GitHub Copilot</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub Universe 2025：开发者奇境的精彩预告 (原标题: GitHub Universe 2025: Here’s what’s in store at this year’s developer wonderland)",
      "link": "https://github.blog/news-insights/company-news/github-universe-2025-heres-whats-in-store-at-this-years-developer-wonderland/",
      "pubDate": "Fri, 30 May 2025 16:00:00 +0000",
      "isoDate": "2025-05-30T16:00:00.000Z",
      "creator": "Jeimy Ruiz",
      "summary": "# GitHub Universe 2025：开发者奇境的精彩预告\n\nGitHub Universe，这场被誉为“软件世界博览会”的盛会，将于2025年10月28日至29日在旧金山历史悠久的梅森堡中心（Fort Mason Center）再度举行。本次全球性活动将汇聚开发者、技术领袖、GitHub客户、安全专业人士等，共同度过两天充满学习与社区建设的时光。活动将在一个以“奇境”为主题的空间内，庆祝AI驱动开发的无限潜力，旨在激发参与者的下一个伟大创意。\n\n目前，现场普通门票正以“超级早鸟”优惠价发售，可享受700美元折扣，是全年最低价。若团队购票，还可额外享受最高35%的优惠。您可以选择亲临现场，或免费在线参与。\n\n## 您将体验到什么 👐\n\nGitHub Universe 旨在帮助您更快、更安全、更自信地交付软件。\n\n### 提升技能、测试新工具、建立联系\n活动将提供技术会议、互动演示和真实世界的成功案例，帮助您磨练技能、测试新工具，并与志同道合的开发者建立联系。\n\n### 学习AI驱动开发的最新进展 🧠\n大会设置了入门、中级和高级三个内容轨道，旨在让您的开发流程更高效、更有创意、更愉悦：\n\n*   **🚀 更快构建，保持流畅：** 探索如何利用AI原生工具改造开发生命周期，与智能AI代理协作，并了解GitHub Copilot如何突破现有界限。\n*   **🔐 安全保障每次提交：** 深入了解AI驱动的漏洞检测，学习如何将安全性无缝嵌入工作流程，并在不影响创新的前提下扩展安全程序。\n*   **⚡ 自信自动化与规模化：** 优化您的CI/CD管道，衡量GitHub Copilot在组织中的投资回报率，并将工程指标与业务成果对齐。\n\n### 沉浸式互动体验 🛠️\n您将有机会观看产品演示，品尝美味的活动餐饮，并体验最新的工具和技术，将宝贵见解带回您的团队：\n\n*   **Makerspace：** 在全新的Makerspace互动游乐场中，代码将驱动艺术、音乐、机器人等，供创作者、开发者和好奇心旺盛的人们尽情探索、实验。\n*   **开源区：** 在扩大的开源区与维护者和开源爱好者建立联系。\n*   **项目演示：** 如果您想在GitHub Universe展示您的项目，现在即可申请，有机会向全球数千名开发者展示您的作品。\n*   **职业角：** 在职业角完善您的GitHub和LinkedIn个人资料。\n\n### 协作与人脉建立\nUniverse 不仅仅是主题演讲和会议，它更是一个为协作和连接而设计的空间。无论是在午餐时聊天，在开源区展开对话，还是在演示展位结识新朋友，这些“走廊交流”的自发时刻都能激发出真正的关系。与同行开发者建立联系，结识您的开源英雄，并与塑造软件未来的人们互动——所有这些都将在一个旨在凝聚社区的环境中进行。\n\n### 抢先了解未来趋势 🔮\n2025年，GitHub已经推出了强大的新工具来增强开发工作流程，包括Copilot Code Reviews、支持数据驻留的GitHub Enterprise Cloud，以及Projects和Issues中的新功能。在Universe大会上，您将独家预览即将推出的功能，通过现场演示直接与GitHub专家交流，并抢先了解塑造软件开发未来的洞察。\n\n## GitHub Universe 适合我吗？ 👋\nUniverse 适合任何构建、扩展、保护或重新构想软件可能性的人。无论您是日常编码，还是从高层领导，您都能在这里找到志同道合的人。\n\n*   **开发者和维护者：** 经验丰富的专业人士和周末编码员——来提升您的技能，结识您的下一个结对编程伙伴，探索AI的可能性。\n*   **领导者：** 工程经理、团队负责人和有远见的创新者——发现解锁开发者生产力并将大胆想法变为现实的策略。\n*   **安全专业人士：** 您的代码库的守护者——学习如何“左移”，自动化安全检查，并在不降低速度的情况下扩展信任。\n*   **创始人：** 创业公司创始人、高管和创作者——分享您的故事，招募顶尖人才，并走在软件创新下一波浪潮的前沿。\n\n## 立即行动 💫\n即日起至7月8日，购买“超级早鸟”票（仅需799美元），即可享受700美元的优惠，这是全年最低价。如果您想带团队参加，购买三张或更多门票可额外节省25%，购买八张或更多门票可节省35%。如果无法亲临旧金山，虚拟票可免费观看直播主题演讲和点播会议。\n\n## 附加资源 📚\n*   需要说服您的经理？使用我们可定制的电子邮件模板。\n*   想随时了解演讲者和会议的最新消息？注册获取更新。\n*   好奇您可能会学到什么？浏览去年的会议，体验Universe。\n\n---\n\n**图片信息：**\n\n*   Jeimy Ruiz：![Jeimy Ruiz](https://avatars.githubusercontent.com/u/94011710?v=4&s=200)\n*   文档：![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n*   GitHub：![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n*   客户案例：![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n*   企业内容：![Enterprise content](https://github.blog/wp-content/uploads/2022/05/careers.svg)",
      "shortSummary": "GitHub Universe 2025将于10月28-29日在旧金山举行，聚焦AI驱动的软件开发。活动旨在通过技术会议、互动演示和社区交流，帮助开发者、技术领导者、安全专家和创始人提升技能、探索AI工具、优化开发流程。大会涵盖AI原生工具、安全、自动化等主题，并提供未来趋势预览。现场票有早鸟优惠，虚拟票免费。",
      "translated_title": "GitHub Universe 2025：开发者奇境的精彩预告",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/94011710?v=4&s=200",
          "alt": "Jeimy Ruiz",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2022/05/careers.svg",
          "alt": "Enterprise content",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Sharpen your skills, test out new tools, and connect with people who build like you.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/github-universe-2025-heres-whats-in-store-at-this-years-developer-wonderland/\">GitHub Universe 2025: Here’s what’s in store at this year’s developer wonderland</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "影响开源项目资助的4大趋势——以及它们对维护者的意义 (原标题: 4 trends shaping open source funding—and what they mean for maintainers)",
      "link": "https://github.blog/open-source/maintainers/4-trends-shaping-open-source-funding-and-what-they-mean-for-maintainers/",
      "pubDate": "Thu, 29 May 2025 16:00:00 +0000",
      "isoDate": "2025-05-29T16:00:00.000Z",
      "creator": "Jeimy Ruiz",
      "summary": "# 影响开源项目资助的4大趋势——以及它们对维护者的意义\n\nGitHub专家团队分析了八个成功获得资助的开源项目，旨在为维护者和贡献者提供关于开源项目如何吸引赞助的见解。这些分析揭示了几个关键模式，有助于项目在不断发展的开源环境中脱颖而出。\n\n## 核心趋势概览\n\n分析显示，以下特点的项目更容易获得资助：\n\n*   **社区参与是成功的驱动力：** 拥有热情用户群体的项目，这些用户既重视维护者也重视项目本身。\n*   **解决特定痛点能建立强大的社区：** 以独特方式解决困难或小众问题的项目能为用户创造价值。\n*   **面向用户的工具和打包通常获得更多关注：** 开发者和用户日常交互的打包工具或“产品”更容易被看到。相比之下，作为这些工具基础的底层基础设施项目，尽管对生态系统至关重要，却可能难以获得关注和资助。\n*   **通过其他有价值的方式提供服务：** 通过支持合同、培训、会员资格或其他服务提供明确价值的项目。\n\n## 八个成功获得资助的开源项目案例分析\n\n1.  **Ladybird：开源网页浏览器**\n    *   **项目简介：** 由SerenityOS前维护者发起，GitHub联合创始人Chris Wanstrath资助。这是一个从零开始用C++/Swift构建的独立、跨平台网页浏览器，拥有自己的LibWeb渲染引擎和LibJS JavaScript引擎。其501(c)(3)非营利组织Ladybird Browser Initiative完全拒绝广告和搜索引擎版税，仅通过无限制捐赠获得资助。\n    *   **资助启示：** 这是一个价值观驱动资助的完美案例，它满足了用户对隐私、独立和道德技术的渴望。此外，项目受益于强大的“创始人效应”，知名开发者发起能更快吸引关注和资金。\n\n2.  **Neovim：激发奉献精神的编辑器**\n    *   **项目简介：** 2014年推出的经典Vim文本编辑器的现代化重构，旨在增强可扩展性、可维护性和用户体验。它引入了内置LSP支持、异步I/O和Lua脚本功能，同时保持与Vim大部分功能的兼容性。\n    *   **资助启示：** 开发者愿意为他们每天使用并已成为其身份一部分的工具付费。面向用户的工具通常比底层工具获得更多资助，因为它们更容易被用户记住和认同。\n\n3.  **RunAsUser：简化系统权限**\n    *   **项目简介：** Kelvin Tegelaar开发的PowerShell模块，允许在当前登录用户的安全上下文中启动进程，即使脚本本身以SYSTEM身份运行。这对于系统管理员和托管服务提供商常用的RMM工具、计划任务等自动化非常有用。\n    *   **资助启示：** 当项目为特定受众解决痛点时，他们更有可能提供资金支持。该项目通过简化Windows系统管理员的工作来提供价值，甚至能吸引来自企业预算的资助。\n\n4.  **Zig：日益受到关注的C语言替代品**\n    *   **项目简介：** 一种低级、基于LLVM的编程语言和工具链，旨在构建快速、小型、可靠的软件。它作为C语言的替代品，具有一流的交叉编译、C/C++互操作性以及内置的包和构建系统。\n    *   **资助启示：** 该项目主要通过草根开发者支持获得了大量赞助，而非企业资助。这表明，当个人开发者真正相信一个项目的价值时，他们的热情足以维持可观的财务支持。\n\n5.  **Yjs：实时协作**\n    *   **项目简介：** 一种高性能无冲突复制数据类型（CRDT）框架，能将任何数据结构转换为自动点对点协作模型。它允许多个对等方同时编辑同一文档（离线或在线），并通过任何传输方式高效同步更改并自动解决冲突。\n    *   **资助启示：** 解决了实时数据协作这一日益增长的需求（尤其在AI和ML领域）。项目通过解决一个困难的技术问题并提供清晰的支持路径（如优秀的文档、培训和入门资源）来吸引资助。\n\n6.  **Caddy：无忧的Web服务器**\n    *   **项目简介：** 一个现代化的开源Web服务器和反向代理（用Go编写），能自动为托管的每个站点配置和续订TLS和PKI证书。它具有模块化架构、JSON-API配置和跨平台二进制文件。\n    *   **资助启示：** 通过自动HTTPS简化了互联网安全。项目清晰地解释了资助需求，并在README中突出显示了赞助选项。良好的文档是促进资助转化的关键因素。\n\n7.  **Crystal (Graphile)：改进GraphQL + Postgres**\n    *   **项目简介：** Graphile的Crystal monorepo是一个强大的工具包，可将PostgreSQL数据库转换为动态、开发者友好的API。它包括PostGraphile（从数据库模式自动生成GraphQL API）和Grafast（优化数据获取和解析的执行引擎）。\n    *   **资助启示：** 如果项目能极大地简化一项困难的任务，它就更有可能获得关注和资助。特别是当它解决了广泛采用、对工作流程至关重要但难以实现的技术问题时。\n\n8.  **Vuetify：Vue开发者美观的UI组件**\n    *   **项目简介：** 一个强大的Vue.js UI库，通过手工制作的组件将Google的Material Design变为现实，提供大量即用型元素。\n    *   **资助启示：** (文章内容在此处截断，但可推断其成功在于为流行框架提供高质量、开箱即用的UI组件，从而解决开发者的痛点并提高生产力，进而吸引资助。)",
      "shortSummary": "GitHub专家分析了8个成功获得资助的开源项目，总结出4个关键趋势：社区参与、解决特定痛点、面向用户的工具更受欢迎，以及通过支持/培训等提供额外价值。案例包括Ladybird（价值观驱动）、Neovim（日常工具）、RunAsUser（解决特定痛点）、Zig（草根支持）、Yjs（实时协作）、Caddy（简化安全）和Crystal（简化复杂技术）。这些项目通过满足用户需求、建立强大社区和提供清晰价值来吸引资助，为开源维护者提供了宝贵经验。",
      "translated_title": "影响开源项目资助的4大趋势——以及它们对维护者的意义",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Get insights on the latest trends from GitHub experts while catching up on these exciting new projects.</p>\n<p>The post <a href=\"https://github.blog/open-source/maintainers/4-trends-shaping-open-source-funding-and-what-they-mean-for-maintainers/\">4 trends shaping open source funding—and what they mean for maintainers</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub 内部：我们如何强化 SAML 实现 (原标题: Inside GitHub: How we hardened our SAML implementation)",
      "link": "https://github.blog/security/web-application-security/inside-github-how-we-hardened-our-saml-implementation/",
      "pubDate": "Tue, 27 May 2025 16:00:00 +0000",
      "isoDate": "2025-05-27T16:00:00.000Z",
      "creator": "Greg Ose",
      "summary": "## GitHub 内部：我们如何强化 SAML 实现\n\n### 引言与背景\n\n*   **SAML SSO 在 GitHub 的重要性**：自 2014 年 GitHub Enterprise Server 2.0.0 发布以来，GitHub 便开始提供基于 SAML（安全断言标记语言）的企业认证服务。SAML 单点登录（SSO）允许企业将其现有身份提供商与 GitHub 产品集成，扩展条件访问策略，并实现企业组织管理。\n*   **SAML 实现的复杂性与安全风险**：\n    *   SAML 2.0 规范定义了身份提供商和服务提供商之间如何进行认证和建立信任，涉及生成 SAML 元数据、发起认证请求以及最关键的——处理和验证来自身份提供商的 SAML 响应。\n    *   这些代码路径在安全上至关重要，任何漏洞都可能导致认证绕过或用户冒充。\n    *   涉及 XML 解析、密码学以及复杂的标准（如 XML Signature、XML Encryption 和 XML Schema）。\n    *   SAML 代码的攻击面非常广，用户（和潜在攻击者）浏览器中传递的数据可能被篡改。这种安全性关键性、复杂性和攻击面的结合，使得 SAML 实现的风险高于大多数代码。\n\n### 自研 SAML 实现的挑战\n\n*   **早期选择与持续投入**：2014 年推出 SAML 支持时，可用库很少。GitHub 在尝试 `ruby-saml` 后，决定创建自己的实现以更好地满足需求。多年来，GitHub 持续投入强化这些认证流程，包括与内部安全研究员和通过安全漏洞赏金计划合作，识别并修复漏洞。\n*   **现有问题的根源与重新思考的必要性**：尽管修复了许多漏洞，但由于根本原因的广度和复杂性，担忧依然存在。因此，GitHub 决定重新审视，以更可持续和整体的方式来保障其 SAML 实现的安全性。\n\n### 强化 SAML 实现的四大关键步骤\n\n为了在 SAML 这样复杂且高风险的技术中建立信任，GitHub 团队采取了以下四个关键步骤：\n\n1.  **重新评估库选择**：评估 `ruby-saml` 库并对其实现进行审计。\n2.  **通过 A/B 测试验证新库**：构建一个系统，安全地评估和观察 SAML 处理逻辑的变化。\n3.  **模式验证与最小化攻击面**：通过收紧模式验证来降低输入处理的复杂性。\n4.  **限制漏洞影响**：使用多个解析器来降低风险。（此部分在原文中未完全展开）\n\n### 步骤一：重新评估库选择\n\n*   **为何转向社区支持的 `ruby-saml`**：\n    *   GitHub 认识到转向一个拥有强大社区支持的库的优势，可以与更广泛的开发者共同贡献。\n    *   `ruby-saml` 库（由 Sixto Martín 维护）被许多关键 SaaS 产品使用，并通过 `omniauth-saml` 广泛采用。\n    *   该库近期有活跃的漏洞报告和修复，并通过 GitHub Advisory Database、CVEs 和 Dependabot 进行更新，与 GitHub 现有的漏洞管理流程良好集成。这是自研实现无法获得的优势。\n*   **对 `ruby-saml` 的安全审计与测试**：\n    *   尽管转向新库并非易事，GitHub 仍与漏洞赏金团队、产品安全团队和 GitHub 安全实验室合作，进行了一系列严格的验证和测试活动。\n    *   包括安全审计、深入的代码分析和应用程序安全测试，并邀请了经验丰富的漏洞赏金研究员（Hacktocats）和 GitHub 安全实验室的研究员参与。\n    *   这些工作识别了 `ruby-saml` 库中的关键漏洞，并指出了可以应用于库的整体强化领域，以消除某些类别的漏洞。\n    *   然而，GitHub 意识到仅凭一次性测试和审计不足以完全信任新库，因为底层代码路径过于复杂。\n\n### 步骤二：通过 A/B 测试验证新库\n\n*   **GitHub.com SAML 流量的巨大规模与测试需求**：GitHub.com 每天处理约一百万个 SAML 有效载荷，是其支持的最广泛使用的外部认证形式。任何更改都需要高度的审查和测试。\n*   **`Scientist` 工具的应用**：\n    *   为了在评估 `ruby-saml` 的同时保持 SAML 处理代码的稳定性，GitHub 使用了其开源工具 `Scientist`。\n    *   `Scientist` 允许同时执行“控制”（现有代码）和“候选”（新代码），比较结果并记录差异，同时始终以控制代码的结果为准，并隔离候选代码中的故障，从而安全地进行实验。\n*   **`Scientist` 在 SAML 响应验证中的具体实践**：\n    *   主要关注 SAML 响应验证（即 Assertion Consumer Service - ACS URL），这是大多数漏洞发生的地方。\n    *   **粒度化发布门控**：`Scientist` 提供基于百分比的流量控制，GitHub 还增加了额外的功能标志，确保可以先通过自己的测试账户，再引入实际客户流量。\n    *   **可观察性**：利用 GitHub 的自定义实验仪表，将指标发送到 Datadog，并添加补充日志以生成更细粒度的验证数据，帮助调试库之间的差异。\n    *   **幂等性**：确保实验不会修改 SAML 流程中跟踪的状态（如 CSRF 令牌）。\n*   **A/B 测试如何帮助建立信心**：\n    *   **识别配置差异**：例如，在 2024 年 9 月，日志显示约 3% 的不匹配是由 SAML 颁发者验证差异引起的。发现 `ruby-saml` 会针对空字符串验证颁发者，而 GitHub 历史上的实现如果值为空或未设置则会跳过验证。为了处理这种遗留情况，GitHub 进行了更改，阻止 `ruby-saml` 配置空或 null 的颁发者值，从而允许库跳过验证。\n    *   **覆盖边缘案例**：通过实验，GitHub 能够让所有流量通过 `ruby-saml` 运行，长时间观察其性能，这对于建立覆盖所有边缘案例的信心至关重要。\n    *   **识别安全相关后果**：通过识别不同实现处理某些输入时的差异，GitHub 能够调查这些差异是否具有安全相关后果，并主动识别新旧实现中的不正确行为。\n    *   **优化实现**：例如，发现 `ruby-saml` 拒绝包含多个 SAML 断言的响应，而 GitHub 的实现则更宽松，这促使 GitHub 意识到其原有实现“做得太多”。\n\n### 步骤三：模式验证与最小化攻击面\n\n在深入研究更严格的输入验证之前，需要了解构成输入的关键因素：\n\n1.  **内嵌 XML 签名与文档结构的关系**：\n    *   SAML 的关键组成部分是 XML 签名规范，它提供了一种签署和验证 SAML 数据完整性的方法。SAML 主要依赖内嵌 XML 签名，即签名本身嵌入在其所覆盖的元素内部。\n    *   验证过程涉及查找签名、提取值、提取引用和摘要、验证摘要，然后验证完整性。\n    *   **核心问题**：为了处理使元素内容合法化的签名，必须首先解析元素的内容。SAML 数据的完整性与其文档结构相关联，但该文档结构在验证方式中扮演着关键角色。这种结构与完整性之间令人不安的关系可能被利用，并已多次被利用，例如 XML 签名包装攻击。\n    *   SAML 库通常通过查询文档并拒绝意外或模糊的输入形状来处理此问题，但这仍然需要在验证真实性之前信任文档，因此任何小错误都可能成为攻击目标。\n2.  **宽松的 SAML 模式定义**：\n    *   SAML 响应必须符合 SAML 2.0 XML 模式定义（XSD）。XSD 文件用于定义 XML 的结构，创建发送方和接收方之间关于元素序列、数据类型和属性的契约。\n    *   （文章在此处截断）",
      "shortSummary": "GitHub 强化其 SAML 单点登录（SSO）实现，以提升系统信任度。面对自研代码的复杂性和风险，团队决定转向社区支持的 `ruby-saml` 库。他们通过严格的安全审计和 A/B 测试（使用 `Scientist` 工具）验证新库，识别并解决了配置差异和边缘案例。此外，还通过加强模式验证来缩小攻击面，以应对 XML 签名和宽松 SAML 模式带来的安全挑战。这些措施显著提升了 SAML 认证的安全性与稳定性。",
      "translated_title": "GitHub 内部：我们如何强化 SAML 实现",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Maintaining and developing complex and risky code is never easy. See how we addressed the challenges of securing our SAML implementation with this behind-the-scenes look at building trust in our systems.</p>\n<p>The post <a href=\"https://github.blog/security/web-application-security/inside-github-how-we-hardened-our-saml-implementation/\">Inside GitHub: How we hardened our SAML implementation</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-06-11T04:39:11.322Z"
}