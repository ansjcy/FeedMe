{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "GitHub Copilot 和 AI 代理如何拯救遗留系统 (原标题: How GitHub Copilot and AI agents are saving legacy systems)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-github-copilot-and-ai-agents-are-saving-legacy-systems/",
      "pubDate": "Tue, 14 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-14T16:00:00.000Z",
      "creator": "Andrea Griffiths",
      "summary": "# GitHub Copilot 和 AI 代理如何拯救遗留系统\n\n## 遗留系统现代化挑战\n文章指出，COBOL 等遗留系统（如处理数百万 ATM 交易的主机系统）虽然已运行 65 年，但仍在支撑全球最关键的业务。然而，COBOL 开发者日益稀缺，而现有 2000 亿行 COBOL 代码急需现代化。GitHub Copilot 和自主 AI 代理为这一挑战提供了新的解决方案。\n\n## AI 驱动的现代化方法\n微软的 Julia Kordick 团队展示了无需学习 COBOL 即可实现系统现代化的方法。关键在于将 AI 专业知识与拥有数十年领域知识的专家相结合，AI 负责设计智能解决方案，专家提供遗留系统知识。这种合作是成功的关键。\n\n## AI 驱动的遗留系统现代化三步框架\nJulia 团队开发了一个系统化的框架，适用于任何遗留系统现代化项目：\n\n### 1. 代码准备（逆向工程）\n*   **问题**：组织往往不清楚其遗留代码的具体功能。\n*   **解决方案**：利用 GitHub Copilot 作为“考古工具”进行代码分析。\n*   **Copilot 功能**：\n    *   从遗留文件中提取业务逻辑。\n    *   将所有内容以 Markdown 格式文档化，便于人工审查。\n    *   自动识别调用链和依赖关系。\n    *   清理不相关的注释和历史日志。\n    *   根据需要添加额外注释。\n*   **专家提示**：始终由人类专家审查 AI 生成的分析结果，领域知识对业务上下文至关重要。\n*   **Copilot 生成示例**：包括文件清单、业务目的（如客户账户验证、余额计算、交易日志生成）和发现的依赖项（如 DB2 数据库连接、外部验证服务调用、遗留打印队列系统）。\n\n### 2. 丰富（使代码易于 AI 理解）\n*   **添加上下文**：帮助 AI 更好地理解代码。\n*   **关键步骤**：\n    *   **翻译**：将非英语注释翻译成英语，因为模型在英语上下文中表现更好。\n    *   **结构分析**：COBOL 具有确定性模式（如 IDENTIFICATION DIVISION、ENVIRONMENT DIVISION、DATA DIVISION、PROCEDURE DIVISION 四个固定分区）。可以要求 GitHub Copilot 映射这些分区并总结其功能，或列出数据结构、提取业务逻辑。AI 可以解析这些结构化部分并用通俗易懂的语言解释，无需理解 COBOL 语法。\n    *   **文档作为事实来源**：将所有 AI 生成的内容保存为 Markdown 文件，作为主要参考资料。\n*   **专家提示**：COBOL 的冗长性反而是优势，如 `ADD TOTAL-SALES TO ANNUAL-REVENUE` 语句几乎是自文档化的，可要求 Copilot 将这些业务规则提取为自然语言描述。\n\n### 3. 自动化辅助（规模化流程）\n*   从交互式使用 Copilot 转向使用 AI 代理构建自动化工作流。\n*   **Microsoft Semantic Kernel 框架**：用于编排多个专业代理，每个代理负责特定任务，协同处理复杂性。\n*   **实践中的编排示例**：\n    *   **调用链映射**：生成 Mermaid 图表展示文件间的交互。一个代理读取 COBOL 文件，另一个追踪程序间的 `CALL` 语句，第三个生成可视化图表，从而无需手动追踪即可获得整个系统映射。\n    *   **测试驱动现代化**：代理 1 提取业务逻辑，代理 2 生成验证该逻辑的测试用例，代理 3 生成通过这些测试的现代代码。测试成为迁移过程中的安全网。\n    *   **依赖优化**：识别可替换为现代等效项的实用类和库。代理分析第三方 COBOL 库，检查是否存在现代替代方案，并指出简化迁移的机会。\n*   **专家提示**：在进行任何更改之前，使用 Mermaid 图表可视化复杂的依赖关系，有助于及早发现边缘情况。\n*   **Mermaid 图表示例**：\n    ![COBOL 到 Java 现代化代理工作流流程图](https://github.blog/wp-content/uploads/2025/10/mermaid.png?resize=475%2C908)\n\n## 现实检验：并非万能药\nJulia 坦言，AI 并非解决所有主机问题的“一键式”方案。人类必须参与验证，每个 COBOL 代码库都是独特且复杂的，完全自动化可能还需要至少五年。但即便如此，AI 仍能带来巨大进展。\n\n## Azure 示例框架\nJulia 团队已开源其整个框架（基于 Microsoft Semantic Kernel），包括：\n*   多个专业代理（如 DependencyMapperAgent, COBOLAnalyzerAgent, JavaConverterAgent）。\n*   成本跟踪（每 1000 行分析通常 2-5 美元）。\n*   内置的人工验证点。\n*   `doctor.sh` 配置和测试脚本，可快速启动。\n*   **快速设置**：通过 `git clone`、`cd`、`./doctor.sh setup` 和 `./doctor.sh run` 即可开始现代化过程。\n\n## 改变一切的商业案例\n这不仅仅是技术债务问题，更是关乎企业生存。传统方法（昂贵顾问、手动转换、生成难以维护的代码）效率低下。AI 驱动的方法则能帮助团队理解业务逻辑、生成可读的现代代码，并保持对知识产权的控制，使团队在过程中学习并维护代码。\n\n## 成为现代化英雄的路径\n*   **从小处着手**：识别小型遗留系统（少于 5000 行），用 GitHub Copilot 分析单个文件，文档化并分享。\n*   **构建 AI 工具包**：尝试 Azure 示例框架，学习代码分析的提示工程，实践迭代现代化技术。\n*   **超越代码**：考虑云原生设计的非功能性需求，规划分布式系统架构。\n\n## 现在是最佳时机\nAI 不会取代开发者专业知识，而是放大它。COBOL 专家提供领域知识，现代开发者带来架构视角，AI 提供规模化的模式识别和翻译能力。三者结合，遗留系统现代化将从不可能变为可实现。",
      "shortSummary": "GitHub Copilot 和 AI 代理正革新遗留系统现代化。面对 COBOL 等老旧系统和开发者短缺，AI 提供了一个三步框架：代码准备（逆向工程）、代码丰富（使 AI 易于理解）和自动化辅助（通过 AI 代理规模化）。该方法结合了 AI 的分析能力与人类领域知识，帮助企业理解业务逻辑，生成可维护的现代代码，从而有效解决技术债务和业务生存挑战。虽然人类验证仍不可或缺，但 AI 大幅加速了现代化进程。",
      "translated_title": "GitHub Copilot 和 AI 代理如何拯救遗留系统",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/mermaid.png?resize=475%2C908",
          "alt": "Flowchart showing the COBOL to Java modernization agent workflow. Seven boxes connected by arrows flow top to bottom: COBOLAnalyzerAgent, DependencyMapperAgent, Business Logic Extractor, Test Generator, JavaConverterAgent, Human Validation, and Production-Ready Java Quarkus Output.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg",
          "alt": "Andrea Griffiths",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>GitHub Copilot and AI agents are making legacy COBOL systems accessible to modern developers.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-github-copilot-and-ai-agents-are-saving-legacy-systems/\">How GitHub Copilot and AI agents are saving legacy systems</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub Copilot CLI：如何开始使用 (原标题: GitHub Copilot CLI: How to get started)",
      "link": "https://github.blog/ai-and-ml/github-copilot/github-copilot-cli-how-to-get-started/",
      "pubDate": "Mon, 13 Oct 2025 22:40:04 +0000",
      "isoDate": "2025-10-13T22:40:04.000Z",
      "creator": "Andrea Griffiths",
      "summary": "## GitHub Copilot CLI：将AI带入命令行\n\nGitHub Copilot CLI 是一款创新工具，旨在将人工智能辅助直接集成到命令行界面（CLI）中，从而消除开发者在终端、编辑器和浏览器之间频繁切换上下文的需要。它允许用户在不中断工作流的情况下，在熟悉的终端环境中获得AI的帮助。\n\n### 安装与认证\n要开始使用 Copilot CLI，用户需要：\n1.  通过 npm 全局安装：`npm install -g @github/copilot`。\n2.  启动 Copilot CLI：`copilot`。\n3.  使用现有的 GitHub 账户登录并认证，这需要有效的 GitHub Copilot Pro、Pro+、Business 或 Enterprise 计划。\n\n**系统要求**：Node v22+ 和 npm version 10 或更高版本。\n\n### 核心使用场景：从克隆到拉取请求\nCopilot CLI 旨在简化从项目克隆到提交拉取请求的整个开发流程，提供以下关键辅助功能：\n\n1.  **克隆并启动 Copilot**\n    *   用户首先克隆一个仓库，然后在该仓库目录中运行 `copilot`。\n    *   在 Copilot 界面中，可以随时输入 `/` 查看可用命令，或使用 `Ctrl+R` 查看 Copilot 执行的命令日志。\n\n2.  **了解新代码库结构**\n    *   无需手动浏览文件或拼凑 README，用户可以直接提问：“Explain the layout of this project.”。\n    *   Copilot 会利用 `find`、`tree` 命令和 `README` 文件来分析仓库，并返回一个清晰的 Markdown 格式项目结构摘要。\n\n3.  **检查环境准备情况**\n    *   用户可以询问：“Make sure my environment is ready to build this project.”。\n    *   Copilot 会验证项目依赖项，安装缺失的工具（如 GitHub CLI 所需的 Go），并确认本地构建环境已准备就绪。\n\n4.  **查找合适的“首次贡献”问题**\n    *   为了帮助用户快速开始贡献，可以提问：“Find good first issues in this repository and rank them by difficulty.”。\n    *   Copilot 会通过其内置的 GitHub MCP 服务器查询 GitHub Issues，并提供一份根据难度排序的精选问题列表。\n\n5.  **开始实现**\n    *   在找到要处理的问题后，用户可以指示 Copilot 起草解决方案，例如：“Start implementing issue #1234. Show me the diff before applying.”。\n    *   Copilot 会制定计划，进行必要的修改，并展示差异（diff）供用户审查和批准，确保用户始终掌控代码变更。\n    *   **专业提示**：在提示中 `@-mention` 文件可以引导 Copilot 关注代码的特定部分。\n\n6.  **提交并创建草稿拉取请求**\n    *   当更改满意后，用户可以要求 Copilot 自动化 Git 流程：“Stage changes, write a commit referencing #1234, and open a draft PR.”。\n    *   Copilot 将暂存文件，编写提交信息，并为用户创建草稿拉取请求。\n\n7.  **额外功能：终止占用端口的进程**\n    *   Copilot 还能处理常见的开发难题，例如端口占用。用户可以提问：“What process is using port 8080? Kill it and verify the port is free.”。\n    *   Copilot 会运行 `lsof` 命令查找进程 ID，终止该进程，并验证端口是否已释放。\n\n### 控制与权限管理\nCopilot CLI 始终将控制权交给用户。在执行任何命令或访问目录之前，它会提示用户选择：\n*   允许一次 (Allow once)\n*   始终允许此命令 (Allow always for this command)\n*   拒绝 (Deny)\n\n用户还可以使用以下命令管理权限：\n*   `/session`：查看当前允许的权限。\n*   `/reset`：随时重置所有权限。\n*   `/add-directory`：将目录添加到允许列表中。\n\n### 通过MCP服务器扩展\nCopilot CLI 内置了 GitHub MCP（Model Context Protocol）服务器，用于支持问题搜索和仓库交互。用户还可以使用 `/mcp` 命令从注册表添加任何自定义 MCP 服务器，从而根据特定工作流（如 Playwright 浏览器测试或公司内部工具集成）扩展其功能。\n\n![GitHub Copilot CLI MCP服务器添加界面](https://github.blog/wp-content/uploads/2025/10/image1_8dda93.png?resize=1024%2C785)\n\n### 重要意义\nCopilot CLI 的主要价值在于它能与开发者现有的终端工作流无缝融合，减少了在不同工具之间切换的认知负担。这对于新贡献者入门项目或开发者探索新代码库时，保持工作流的连贯性和效率至关重要。它被定位为 IDE 的补充工具，而非替代品。\n\n### 未来展望\nGitHub Copilot CLI 目前处于公开预览阶段，鼓励用户通过 `/feedback` 命令分享使用体验，以帮助塑造未来的开发路线图。\n\n![作者：Andrea Griffiths](https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg)\n\n**作者**：Andrea Griffiths，GitHub 高级开发者倡导者。",
      "shortSummary": "GitHub Copilot CLI 将AI助手直接集成到命令行，让开发者无需离开终端即可获得帮助。它通过 `npm` 安装，支持 Copilot Pro/Business/Enterprise 账户登录。Copilot CLI 能协助完成从代码库克隆、理解项目结构、检查环境、查找任务、实现代码到提交和创建拉取请求等一系列开发工作。它在执行操作前会征求用户许可，确保控制权，并支持通过 MCP 服务器扩展功能。该工具旨在减少上下文切换，提高开发效率，是 IDE 的有力补充，目前处于公开预览阶段。",
      "translated_title": "GitHub Copilot CLI：如何开始使用",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image1_8dda93.png?resize=1024%2C785",
          "alt": "A terminal window showing the GitHub Copilot CLI interface where a user is adding a new MCP (Model Context Protocol) server. The screen includes input fields for server name, type (Local, HTTP, or SSE), command, arguments, environment variables, and tools to include. The interface indicates the user is logged in as “Andrea@Griffiths11” and offers navigation shortcuts for saving or canceling.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg",
          "alt": "Andrea Griffiths",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Discover how to use GitHub Copilot directly in the terminal. From cloning a repository to opening a pull request, here’s how to streamline your workflow with Copilot CLI.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/github-copilot-cli-how-to-get-started/\">GitHub Copilot CLI: How to get started</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何使用代理原语和上下文工程构建可靠的AI工作流 (原标题: How to build reliable AI workflows with agentic primitives and context engineering)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-to-build-reliable-ai-workflows-with-agentic-primitives-and-context-engineering/",
      "pubDate": "Mon, 13 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-13T16:00:00.000Z",
      "creator": "Daniel Meppiel",
      "summary": "本文介绍了一个三部分框架，旨在将临时性的AI探索转化为可重复、可靠的工程实践，从而构建可靠的AI工作流。该框架的核心是**代理原语**（可重用、可配置的构建块）和**上下文工程**（确保AI代理专注于正确的信息）。\n\n### AI原生开发框架\n\n该框架的公式是：Markdown提示工程 + 代理原语 + 上下文工程 = 可靠性。它旨在帮助开发者构建、扩展和共享能够学习并不断改进的智能系统。\n\n**💡 尝试使用GitHub Copilot CLI**：通过GitHub Copilot CLI，用户可以直接在终端中运行、调试和自动化AI工作流，无需设置脚本，也无上下文丢失，并能直接连接到GitHub仓库、拉取请求和问题。\n\n### 三层框架详解\n\n该框架通过结合Markdown的结构、代理原语的能力和智能上下文管理，将临时性的AI实验转变为可靠、可重复的过程。\n\n#### 第一层：使用Markdown进行更具策略性的提示工程\n\n清晰、精确、上下文丰富的提示能带来更好、更准确的结果。Markdown的结构（标题、列表、链接）可以自然地引导AI的推理，使输出更可预测和一致。关键技术包括：\n\n*   **上下文加载**：使用链接作为上下文注入点，从文件或网站中提取相关信息。\n*   **结构化思维**：使用标题和项目符号为AI创建清晰的推理路径。\n*   **角色激活**：使用“你是一名[此角色]的专家”等短语来触发专业知识领域。\n*   **工具集成**：使用`MCP tool tool-name`让AI代理在MCP服务器上以受控、可重复的方式运行代码。\n*   **精确语言**：通过具体指令消除歧义。\n*   **验证门**：“停止并获得用户批准”，确保在关键决策点有人工监督。\n\n例如，一个复杂的调试提示会明确指定AI的角色、参考文档、步骤、使用的工具以及在提交修复前寻求用户验证。\n\n#### 第二层：代理原语——系统化部署提示工程技术\n\n手动为每个任务编写完美的提示是不可持续的。代理原语是简单、可重用的文件或模块，为AI代理提供特定的能力或规则，从而系统化地实施提示工程技术。核心代理原语包括：\n\n*   **指令文件（.instructions.md）**：通过模块化文件部署结构化指导。\n*   **聊天模式（.chatmode.md）**：通过具有MCP工具边界的文件部署基于角色的专业知识，防止安全漏洞和跨域干扰。\n*   **代理工作流（.prompt.md）**：通过内置验证部署可重用提示。\n*   **规范文件（.spec.md）**：创建可重复结果的实施就绪蓝图。\n*   **代理记忆文件（.memory.md）**：在会话之间保留知识。\n*   **上下文辅助文件（.context.md）**：优化信息检索。\n\n**示例**：一个简单的“实现安全用户认证系统”提示，通过选择后端开发聊天模式，自动触发安全指令，加载上下文，生成规范文件，并执行带有验证门的实现工作流，最终实现开发者驱动的知识积累和持续改进。\n\n#### 第三层：上下文工程——帮助AI代理专注于重要信息\n\n大型语言模型（LLM）的记忆（上下文窗口）有限，且容易遗忘。战略性地提供上下文可以帮助AI专注于相关信息，提高其可靠性和效率。关键技术包括：\n\n*   **会话拆分**：为不同的开发阶段和任务使用不同的代理会话（例如，规划、实施、测试）。\n*   **模块化和自定义规则/指令**：仅通过有针对性的`.instructions.md`文件应用相关指令，节省上下文空间。\n*   **记忆驱动开发**：利用`.memory.md`文件在会话和时间轴上维护项目知识和决策。\n*   **上下文优化**：战略性地使用`.context.md`上下文辅助文件加速信息检索并减少认知负荷。\n*   **认知焦点优化**：在`.chatmode.md`文件中使用聊天模式，使AI的注意力集中在相关领域，防止跨域干扰。\n\n### 代理工作流：完整的系统实践\n\n当所有三层结合时，就形成了代理工作流——一个完整的、系统化的过程，其中所有代理原语协同工作，理解提示，并仅使用所需的上下文。这些工作流可以作为`.prompt.md`文件实现，协调多个代理原语，无论是在IDE、终端还是CI管道中执行。\n\n### 工具：如何扩展代理原语\n\n代理原语本质上是用自然语言编写的可执行软件，其扩展方式类似于任何编程生态系统的演变。它们具有模块化、可重用性、依赖性、演进性和可分发性等特性，因此需要适当的工具基础设施。\n\n*   **代理CLI运行时**：\n    *   **内循环（VS Code和GitHub Copilot）**：用于交互式开发、测试和工作流优化。\n    *   **外循环（代理CLI运行时，如Copilot CLI）**：用于可重现的执行、CI/CD集成和生产部署，将自然语言程序从个人工具转变为强大、可共享的解决方案。\n*   **运行时管理（APM - 代理包管理器）**：\n    *   APM通过提供统一的运行时管理和包分发来解决管理多个代理CLI运行时的复杂性。\n    *   它允许用户安装和配置不同的运行时（如Copilot CLI、OpenAI Codex CLI），安装依赖项，编译代理原语文件，并运行工作流，同时保持一致的VS Code开发体验。\n\n本文强调，通过迭代改进，该框架能够创建复合智能，不断提升AI系统的性能和可靠性。",
      "shortSummary": "本文介绍了一个三部分框架，旨在通过将AI探索转化为可靠的工程实践，构建可靠的AI工作流。该框架结合了**Markdown提示工程**（结构化提示）、**代理原语**（可重用构建块）和**上下文工程**（优化AI注意力）。它通过GitHub Copilot CLI和APM等工具，将自然语言编写的代理原语视为软件，支持其开发、自动化和部署，从而实现AI系统的持续学习和改进，确保可预测和一致的输出。",
      "translated_title": "如何使用代理原语和上下文工程构建可靠的AI工作流",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>See how this three-part framework will turn AI into a repeatable and reliable engineering practice.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-to-build-reliable-ai-workflows-with-agentic-primitives-and-context-engineering/\">How to build reliable AI workflows with agentic primitives and context engineering</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "Git 二十年，GitHub 总部两天：Git Merge 2025 亮点回顾 🎉 (原标题: 20 Years of Git, 2 days at GitHub HQ: Git Merge 2025 highlights 🎉)",
      "link": "https://github.blog/open-source/git/20-years-of-git-2-days-at-github-hq-git-merge-2025-highlights/",
      "pubDate": "Thu, 09 Oct 2025 08:00:00 +0000",
      "isoDate": "2025-10-09T08:00:00.000Z",
      "creator": "Lee Reilly",
      "summary": "# Git Merge 2025 亮点回顾\n\nGit Merge 2025 在 GitHub 旧金山总部举行，庆祝 Git 诞生二十周年。此次活动汇聚了来自世界各地的贡献者，共同回顾 Git 的历史并展望其未来。超过 100 人亲临现场，另有 600 多人在线参与。\n\n## 第一天：面向所有人的精彩演讲\n\n第一天的议程内容丰富，涵盖了从 Git 内部机制的深入探讨到面向初学者的创意工作流介绍，满足了不同背景参与者的需求。演讲者包括维护者、教育工作者、业余爱好者，甚至还有一名高中生，他们分享了 Git 如何塑造他们的工作和学习。演讲者通过线上和线下方式参与，使得本次 Git Merge 成为迄今为止最具包容性和可访问性的活动之一。\n\n![Git 贡献者峰会期间，人们围坐在 GitHub 总部行政简报中心的一张长会议桌旁。笔记本电脑打开着，几位参与者通过房间前方的大屏幕远程加入。](https://github.blog/wp-content/uploads/2025/10/gitmerge2.png?resize=1600%2C1200)\n\n在 GitHub 总部的圆形剧场，与会者齐聚一堂。多位专家带来了精彩分享：\n*   **Scott Chacon**：通过现场演示 GitButler CLI，将幽默与代码相结合。\n*   **Google 的 Martin von Zweigbergk**：深入剖析 Jujutsu 如何与 Git 集成。\n*   **Jacob Stopak**：通过可视化和游戏化重新构想 Git 学习。\n*   **Steffen Hiller 和 Zoran Petrovic**：展示了可视化仓库随时间增长的新方法。\n*   **brian m. carlson**：探讨了 SHA-256 互操作性的未来发展。\n\n所有这些演讲及更多内容都可在活动播放列表中观看。\n\n## 第二天：社区协作的核心\n\n第二天的活动聚焦于社区协作，包括年度 Git 贡献者峰会和一场非正式会议（Unconference）。核心维护者和贡献者通过线上和线下方式会面，共同规划 Git 未来一年的发展路线图，这也是迄今为止最支持远程参与的聚会之一。\n\n![Git 贡献者峰会期间，人们围坐在 GitHub 总部行政简报中心的一张长会议桌旁。笔记本电脑打开着，几位参与者通过房间前方的大屏幕远程加入。](https://github.blog/wp-content/uploads/2025/10/498627888-b18da4a6-d427-48b5-915b-b99cf10bbb57_4c4af4.png?resize=2600%2C1950)\n\n在峰会期间，非正式会议为所有人提供了开放的交流平台，白板上迅速填满了关于分支策略、Git 教育和创意工作流的各种想法。\n\n## 感谢\n\nGit Merge 2025 的成功离不开整个社区的贡献。衷心感谢所有分享工作的演讲者、付出时间和精力的贡献者和志愿者，以及每一位前来学习和交流的与会者。同时，也特别感谢 GitHub 幕后团队为全球与会者提供无缝的活动体验，以及赞助商 GitButler 和 Google 对本次活动的大力支持。",
      "shortSummary": "Git Merge 2025 在 GitHub 总部举行，庆祝 Git 诞生二十周年。活动汇聚了全球贡献者，共同回顾 Git 历史并展望未来。第一天有丰富的技术演讲，涵盖 Git 内部机制到创意工作流。第二天则专注于社区协作，通过贡献者峰会和非正式会议规划 Git 路线图。本次活动吸引了超过 100 人现场参与，600 多人在线观看，并感谢了社区、GitHub 团队及赞助商 GitButler 和 Google 的支持。",
      "translated_title": "Git 二十年，GitHub 总部两天：Git Merge 2025 亮点回顾 🎉",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/gitmerge2.png?resize=1600%2C1200",
          "alt": "People seated around a long conference table at GitHub HQ’s Executive Briefing Center during the Git Contributors Summit. Laptops are open, and several participants join remotely on large screens at the front of the room.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/498627888-b18da4a6-d427-48b5-915b-b99cf10bbb57_4c4af4.png?resize=2600%2C1950",
          "alt": "People seated around a long conference table at GitHub HQ’s Executive Briefing Center during the Git Contributors Summit. Laptops are open, and several participants join remotely on large screens at the front of the room.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://avatars.githubusercontent.com/u/121322?v=4&s=200",
          "alt": "Lee Reilly",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 7
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Git Merge 2025 celebrated 20 years of Git with talks, collaboration, and community. Catch the highlights and recordings.</p>\n<p>The post <a href=\"https://github.blog/open-source/git/20-years-of-git-2-days-at-github-hq-git-merge-2025-highlights/\">20 Years of Git, 2 days at GitHub HQ: Git Merge 2025 highlights 🎉</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub可用性报告：2025年9月 (原标题: GitHub Availability Report: September 2025)",
      "link": "https://github.blog/news-insights/company-news/github-availability-report-september-2025/",
      "pubDate": "Thu, 09 Oct 2025 02:19:28 +0000",
      "isoDate": "2025-10-09T02:19:28.000Z",
      "creator": "Jakub Oleksy",
      "summary": "GitHub在2025年9月经历了三次导致服务性能下降的事件。以下是详细报告：\n\n## 2025年9月GitHub服务可用性报告\n\n2025年9月，GitHub共发生了三起导致服务性能下降的事件。\n\n### 事件一：Copilot可用性下降\n*   **日期与时间**：2025年9月15日，UTC时间17:55至18:20（持续25分钟）。\n*   **受影响服务**：Copilot的大部分功能可用性下降，返回403错误。\n*   **根本原因**：一个特性标志被部分部署到全局限速器，意外触发了限速逻辑中的一个未检测到的边缘情况。该标志旨在为部分用户降低限速，却导致限速配置进入无效状态，限制了100%的请求。\n*   **解决方案**：回滚了该特性标志，服务立即恢复。\n*   **未来改进**：\n    *   增加流量异常监控器，以便及早发现问题。\n    *   扩大限速扩展测试的覆盖范围，加强预生产验证，以增强系统弹性。\n\n### 事件二：电子邮件投递延迟\n*   **日期与时间**：\n    *   2025年9月23日，UTC时间15:29至17:38。\n    *   2025年9月24日，UTC时间14:02至15:12。\n*   **受影响服务**：电子邮件投递，导致大多数类型的电子邮件通知显著延迟。两次事件总影响约130分钟，客户经历的峰值延迟约为50分钟。\n*   **根本原因**：异常高的流量导致部分出站电子邮件服务器资源争用。\n*   **解决方案**：更新了配置，以在高流量时更好地分配容量。\n*   **未来改进**：更新监控器以提高检测能力。\n\n### 事件三：Copilot API部分性能下降\n*   **日期与时间**：2025年9月29日，UTC时间16:26至17:33（持续67分钟）。\n*   **受影响服务**：Copilot API出现部分性能下降，导致平均0.2%的GitHub MCP服务器请求出现间歇性404错误，峰值时约2%。\n*   **根本原因**：内部依赖升级暴露了服务中的一个配置错误。\n*   **解决方案**：回滚了升级以解决配置错误。\n*   **未来改进**：修复配置问题，并将改进文档和发布流程，以防止类似问题再次发生。\n\n### 更多信息\n\n*   请关注GitHub状态页面获取实时更新和事后回顾。\n*   如需了解更多GitHub正在进行的工作，请查阅GitHub工程博客。\n\n本文作者：\n\n![Jakub Oleksy](https://avatars.githubusercontent.com/u/6147691?v=4&s=200)\n\n### 相关资源\n\n探索更多来自GitHub的内容：\n\n*   **文档**：\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n    掌握GitHub所需的一切，尽在一个地方。\n*   **GitHub**：\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n    在GitHub上构建未来，这里是任何人、任何地点构建任何东西的平台。\n*   **客户案例**：\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n    了解使用GitHub进行构建的公司和工程团队。\n*   **GitHub Universe 2025**：\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)\n    最后机会：节省700美元购买Universe现场通行证，于10月28-29日在旧金山与我们相聚。",
      "shortSummary": "2025年9月，GitHub经历了三次服务性能下降事件。9月15日，Copilot因限速逻辑边缘情况导致25分钟可用性下降。9月24日，电子邮件投递因高流量导致约50分钟的峰值延迟。9月29日，Copilot API因内部依赖升级暴露配置错误，导致67分钟的部分性能下降。GitHub已采取措施解决问题，并计划通过增强监控、扩大测试覆盖和改进发布流程来提升系统弹性。",
      "translated_title": "GitHub可用性报告：2025年9月",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/6147691?v=4&s=200",
          "alt": "Jakub Oleksy",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>In September, we experienced three incidents that resulted in degraded performance across GitHub services.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/github-availability-report-september-2025/\">GitHub Availability Report: September 2025</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "使用 GitHub Copilot 编码代理和移动设备随时随地完成紧急修复 (原标题: Completing urgent fixes anywhere with GitHub Copilot coding agent and mobile)",
      "link": "https://github.blog/developer-skills/github/completing-urgent-fixes-anywhere-with-github-copilot-coding-agent-and-mobile/",
      "pubDate": "Wed, 08 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-08T16:00:00.000Z",
      "creator": "Scott Lusk",
      "summary": "## 引言：GitHub Copilot 编码代理与 GitHub Mobile 的强大结合\n\n文章指出，在软件开发中，结合多种工具可以产生巨大的力量，就像视频游戏中的组合升级一样。GitHub 相信，这种组合能够赋能开发者应对任何挑战，无论是修复关键错误、添加新功能还是发布产品。本文通过作者的亲身经历，展示了 GitHub Copilot 编码代理和 GitHub Mobile 应用如何协同工作，帮助开发者在任何地点高效完成紧急修复。\n\n## 亲身经历：移动设备上的紧急修复\n\n作者分享了一个紧急场景：在一次高可见度演示前，一个关键网站功能出现错误，而他当时远离笔记本电脑。传统修复方式耗时过长，回滚也不是选项。在这种情况下，作者利用手机上的 GitHub Copilot 编码代理和 GitHub Mobile 应用解决了问题。\n\n**操作流程：**\n\n1.  **识别问题：** 作者在 GitHub Mobile 上扫描了最近的拉取请求（PR），识别出一个可能导致问题的 PR（添加了 Markdown 渲染和富文本编辑器）。\n2.  **创建问题：** 他创建了一个新问题，详细描述了问题，并引用了可疑的 PR，同时利用了仓库中预设的 `copilot-instructions` 文件来指导 Copilot 代理。\n3.  **分配任务：** 作者将该问题分配给了 GitHub Copilot 编码代理。\n4.  **Copilot 修复：** 仅仅六分钟后，GitHub Mobile 上收到通知，Copilot 已生成一个包含修复方案的 PR。\n5.  **移动审查与批准：** 作者立即在手机上审查了 PR，确认这是一个清晰、简单的解决方案。他甚至可以在手机上通过预览分支测试修复，然后批准了 PR。\n6.  **自动化部署：** 修复通过仓库中由 GitHub Actions 管理的自动化工作流部署到生产环境。\n\n**结果：** 在作者到达汽车时，问题已解决，演示得以顺利进行。这次完全通过手机管理修复的经历，揭示了 GitHub 平台内强大的能力，并促使作者探索更多平台内组合以提升工作效率。\n\n以下是作者在手机上审查并批准拉取请求后，通过 GitHub Mobile 应用看到的视图，显示了 Copilot 对问题的修复摘要：\n\n![Copilot Coding Agent with a suggested fix for our issue.](https://github.blog/wp-content/uploads/2025/10/01-copilot-pr-fix.jpeg?resize=472%2C1024)\n\n## 解锁这种“能力提升”的关键\n\n作者强调，虽然并非所有开发任务都应通过移动设备委派给 Copilot，但拥有正确的工具应对特定情况至关重要。以下是实现这种效率提升的三个关键点：\n\n### 关键 1：利用指令文件 (Instructions Files)\n\n指令文件为 GitHub Copilot 提供了项目特定的指导和规则，显著影响其建议的质量和相关性。\n\n*   **作用：** 提供仓库的核心目的、技术栈、架构约束、编码标准、测试策略、依赖管理、可观察性、文档、错误处理等上下文信息。\n*   **位置：** 通常位于仓库根目录下的 `.github/copilot-instructions.md` 文件中。\n*   **示例：** 文章提供了一个详细的 `copilot-instructions.md` 示例，涵盖了 Next.js App Router、React、TypeScript、Tailwind CSS、pnpm、shadcn/ui 组件、服务器组件、Vitest 测试、文件夹结构、常用命令等。\n*   **路径特定指令：** 可以使用 `applyTo` 关键字定义针对特定目录、文件模式、语言或任务上下文的指令，例如针对 `src/components/ui` 和 `src/components/shared` 目录的组件创建规范。\n*   **生成指令：** 在 VS Code 中，可以通过“配置聊天”选项生成指令文件。\n\n![Location of copilot-instructions in .github folder](https://github.blog/wp-content/uploads/2025/10/02-github-copilot-instructions_v2.png?resize=2400%2C2528)\n\n![Generate instructions in VS Code using configure chat.](https://github.blog/wp-content/uploads/2025/10/03-configure-chat_v2.png?resize=1200%2C992)\n\n**要点：** 编写良好的指令文件能帮助 Copilot 更好地理解项目和编码标准，从而提供更高质量的输出，加快任务完成速度。\n\n### 关键 2：熟悉 Copilot 编码代理\n\n将 Copilot 编码代理视为团队成员，了解其擅长的技能，并充分利用这些技能。\n\n*   **熟悉方式：** 通过分配问题、创建拉取请求和跟踪 Copilot 在仓库中的会话来熟悉其工作方式。\n*   **创建问题时的指导：** 在将问题分配给 Copilot 之前，确保问题描述提供正确的上下文、明确意图并定义清晰。\n*   **审查与迭代：** Copilot 完成工作后，务必审查其生成的 PR。可以通过在评论中使用 `@copilot` 来请求修改，而不是盲目接受。\n\n![Assign an issue to Copilot coding agent.](https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v3.png?resize=2400%2C1770)\n\n![Copilot as an assignee on an issue.](https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v2.png?resize=836%2C1024)\n\n![Copilot fixed the issue with and had a pull request in six minutes.](https://github.blog/wp-content/uploads/2025/10/05-6min-fix-pr_v3.png?resize=2400%2C806)\n\n![Use @copilot in a pull request comment to have copilot make changes.](https://github.blog/wp-content/uploads/2025/10/06-mention-copilot_v2.png?resize=2400%2C588)\n\n**要点：** 将任务委派给 Copilot 编码代理可以释放开发者的精力，专注于其他关键任务，但仍需仔细审查其结果并提供具体的指导。\n\n### 关键 3：建立最佳实践和自动化\n\n结合 IssueOps 和 GitHub Actions 自动化是提升效率的另一个重要方面。\n\n*   **IssueOps：** 将 GitHub Issues 转化为自动化的控制接口。结构化的命令可以触发 GitHub Actions 工作流，执行部署、配置、迁移等操作，并将结果写回问题中，便于审计。\n*   **问题模板：** 使用预先创建的问题模板（例如针对 Bug 的模板）可以帮助开发者提供详细的上下文信息，节省创建问题的时间。\n*   **示例：** 文章提供了一个“Bug (Copilot Coding Agent-ready)”问题模板示例，包含环境、复现步骤等字段，旨在为 Copilot 提供修复所需的详细信息。\n\n**要点：** 自动化和结构化的流程（如 IssueOps 和问题模板）进一步提升了开发和问题解决的效率。",
      "shortSummary": "本文介绍了如何结合 GitHub Copilot 编码代理和 GitHub Mobile 应用，实现随时随地处理紧急软件修复。作者通过亲身经历展示了在远离电脑时，如何利用手机创建问题、分配给 Copilot 自动生成修复拉取请求，并在手机上审查、批准并部署。文章强调了利用自定义指令文件指导 Copilot、熟悉其工作方式以及通过 IssueOps 和 GitHub Actions 建立自动化流程的重要性，以显著提高开发效率和应对突发情况的能力。",
      "translated_title": "使用 GitHub Copilot 编码代理和移动设备随时随地完成紧急修复",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/01-copilot-pr-fix.jpeg?resize=472%2C1024",
          "alt": "Copilot Coding Agent with a suggested fix for our issue.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/02-github-copilot-instructions_v2.png?resize=2400%2C2528",
          "alt": "Location of copilot-instructions in .github folder",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/03-configure-chat_v2.png?resize=1200%2C992",
          "alt": "Generate instructions in VS Code using configure chat.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v3.png?resize=2400%2C1770",
          "alt": "Assign an issue to Copilot coding agent.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v2.png?resize=836%2C1024",
          "alt": "Copilot as an assignee on an issue.",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/05-6min-fix-pr_v3.png?resize=2400%2C806",
          "alt": "Copilot fixed the issue with and had a pull request in six minutes.",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/06-mention-copilot_v2.png?resize=2400%2C588",
          "alt": "Use @copilot in a pull request comment to have copilot make changes.",
          "title": "",
          "position": 7
        },
        {
          "url": "https://avatars.githubusercontent.com/u/2342987?v=4&s=200",
          "alt": "Scott Lusk",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Unlock the full potential of the GitHub platform. See how Copilot coding agent and GitHub Mobile combine to help you tackle development tasks and urgent fixes, no matter where you are.</p>\n<p>The post <a href=\"https://github.blog/developer-skills/github/completing-urgent-fixes-anywhere-with-github-copilot-coding-agent-and-mobile/\">Completing urgent fixes anywhere with GitHub Copilot coding agent and mobile</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "我们如何使用GitHub Copilot在五小时内实现无障碍合规自动化 (原标题: How we automated accessibility compliance in five hours with GitHub Copilot)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-we-automated-accessibility-compliance-in-five-hours-with-github-copilot/",
      "pubDate": "Tue, 07 Oct 2025 17:00:00 +0000",
      "isoDate": "2025-10-07T17:00:00.000Z",
      "creator": "Janice Rimmer",
      "summary": "## 引言：手动无障碍合规流程的挑战\n\nGitHub每周都会收到核心服务的无障碍等级报告。此前，当服务等级低于阈值时，他们依赖一个完全手动的修复链：有人阅读报告，在仓库中创建问题，猜测负责人，在单独的治理跟踪器中追踪状态，并尝试向领导层汇报。这种方式导致了反应迟缓、跟进不均衡，并且随着服务和检查的增加，无法实现规模化。他们意识到需要改变，并决定利用GitHub Copilot将这个脆弱的流程转变为一个自动化、可审计的循环。\n\n**传统手动流程的低效性：**\n\n*   每周三，无障碍等级报告会出现在跟踪板上，低于预定义分数的服务需要立即修复。\n*   当发现不合格等级时，管理方式效率低下：\n    *   手动在仓库中创建跟踪问题。\n    *   猜测正确的负责人。\n    *   希望有人跟进。\n    *   手动在无障碍治理仓库中跟踪进度。\n\n**具体痛点：**\n\n*   无法扩展。\n*   团队收到的沟通不一致。\n*   领导层缺乏可见性。\n*   修复时间从几天延长到几周。\n\n## 解决方案：利用GitHub Copilot实现自动化\n\n为了解决这些问题，GitHub需要一种可扩展、低维护的方式来触发、跟踪和关闭无障碍修复，而无需持续的手动协调。他们选择使用GitHub Copilot来自动化整个工作流程。\n\n**自动化后的新工作流程：**\n\n*   当无障碍等级低于某个分数时，自动在服务仓库中创建GitHub Issues。\n*   对于持续不合规的情况，使用新的等级数据更新现有问题。\n*   将修复问题与客户关系管理（CRM）跟踪板进行交叉引用。\n*   当服务恢复到可接受的等级时，自动关闭链接。\n*   同步治理板和服务团队之间的负责人。\n*   提及利益相关者以提高透明度，同时避免仓库垃圾信息。\n\n## Copilot如何改变开发方式\n\n传统的内部自动化构建方法意味着起草详细需求、将其优先级排入团队待办事项、等待工程能力，并经历多个冲刺迭代才能看到端到端的工作价值，这可能需要数周甚至更长时间。相反，GitHub团队花了五到六个小时直接与Copilot对话，快速原型设计和测试想法。\n\n**Copilot驱动的快速迭代模式：**\n\n他们的工作循环刻意保持轻量化。每次迭代大致遵循以下模式：\n\n*   用简单的语言描述一个规则（例如，检测持续不合规并确保问题存在或已更新当前上下文）。\n*   要求Copilot搭建或调整代码（例如，新的辅助函数、数据解析调整、API优化），而不是从头开始编写所有内容。\n*   使用少量合成的等级快照（例如，初始下降、持续下降、恢复）在本地验证逻辑。\n*   审查输出（例如，问题主体、标签、负责人）并优化提示，以收紧命名、阈值或分支。\n*   添加防护措施：幂等性（即，如果有效问题已打开则跳过）、简单的阻尼以避免频繁关闭和重新打开，以及对不完整数据的防御性处理。\n*   记录高级决策（例如，“更新现有问题”与“无操作 – 合规”）以快速验证意图。\n*   重新运行测试（加上一个变体）以确认没有回归，然后提交并进入下一个规则。\n\n**带来的好处：**\n\n*   每次迭代都针对单一行为，Copilot的建议保持相关性，避免了大型重构。\n*   当出现新的边缘情况（如短暂的分数下降或因服务重命名导致重复创建问题）时，他们会添加另一个短循环，而不是安排会议。\n*   这种快速的节奏使他们能够在没有正式项目计划的情况下，收敛到一个可投入生产的方案。\n\n## 从原型到生产的演进\n\n他们首先构建了一个快速原型，以可靠地检测不合规服务、提出或更新修复问题，并保持所有权可见。他们还希望证明无需任何人工分类即可实现这一点。最初的目标是在一个具有历史已知等级波动性的预生产环境中，对一小组服务进行受控推广。\n\n**逐步推广计划：**\n\n1.  在预生产环境中使用个人访问令牌进行原型开发。\n2.  在预生产环境中使用模拟服务仓库观察少量测试周度等级周期，并调整阈值或标签。\n3.  重构代码并迁移到GitHub App，以实现适当的安全性和范围权限。\n4.  部署到生产环境，并推广到所有跟踪无障碍合规的服务。\n5.  在噪音最小化后，正式化治理报告。\n\n**验证与成果：**\n\n为了验证，他们录制了一个简洁的端到端演示，展示了输入等级变化如何触发自动问题创建、交叉链接、负责人同步以及重复失败时的后续更新。这个演示让利益相关者能够异步评估完整体验。反馈是决定性的。看到实时问题以清晰的结构和可追溯性出现，加速了从原型阶段推进的批准。他们获得了工程合作伙伴关系，以将流程投入生产，建立了用于强化的沙盒环境，并开始实施具有适当安全和规模考虑的GitHub App版本。\n\n## 实际影响\n\n影响来自两个层面：引入的自动化以及Copilot改变了谁可以构建和迭代它的方式。\n\n**自动化带来的成果：**\n\n*   修复问题现在及时出现（或更新），而不是等待人工分类，这使得服务所有者能够立即理解解决这些问题的策略要求，并在请求例外时承担责任。\n*   所有权、状态和交叉链接集中在一处，为领导层提供了一个可靠的快照，无需临时电子表格或通知。这也加强了无障碍项目所有者与工程团队之间的合作。\n*   由于幂等逻辑和阻尼机制防止了嘈杂的关闭和重新打开，重复或陈旧的联系减少了。\n*   治理工作从文书跟踪转向对系统性无障碍模式进行更高价值的分析，并实现了更严格的治理控制。\n\n**Copilot赋能交付的成果：**\n\n*   领域专家构建了原型，使工程师能够专注于其关键的路线图工作。\n*   减少了工程师的上下文切换。\n*   合作时间用于安全、规模和生产强化，而不是基本的搭建工作。\n*   降低了未来合规或治理工具的门槛，因为现在有了一个其他人可以遵循的可重复模式。\n\n**核心转变：**\n\n这种转变在无障碍等级发出新风险信号时最为重要：系统现在会在跟进时间流逝之前，发现问题、分配所有权并保持状态可见，而不是等待某人注意到并启动手动链条。得益于Copilot，这个系统提前数周投入使用，并且可以由最接近治理问题的人进行迭代。\n\n底线是，他们从“让我写一张工单”转变为“这是具有可衡量影响修复速度和可见性的工作代码”。这种转变改变了人们对内部合规工具实现速度的期望。\n\n## 文章作者与相关资源\n\n本文由 **Janice Rimmer** 撰写，她是一名员工项目经理，致力于通过协作加速创新。\n\n![Janice Rimmer](https://avatars.githubusercontent.com/u/105733155?v=4&s=200)\n\n探索更多来自GitHub的资源：\n\n*   **文档**：掌握GitHub所需的一切，尽在一处。\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n*   **GitHub**：在GitHub上构建未来，这里是任何人、任何地点构建任何东西的地方。\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n*   **客户案例**：了解使用GitHub进行构建的公司和工程团队。\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n*   **GitHub Universe 2025**：抓住最后机会，节省700美元购买Universe现场通行证，并于10月28-29日在旧金山加入我们。\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)",
      "shortSummary": "GitHub利用GitHub Copilot在五小时内自动化了其无障碍合规流程。此前，该流程完全手动，导致响应慢、跟进不一致且难以扩展。通过Copilot，他们构建了一个自动化系统，能自动创建和更新GitHub Issues、同步负责人、追踪进度并自动关闭已解决的问题。这不仅显著加快了修复速度，提高了可见性，还让领域专家而非工程师主导了原型开发，降低了未来工具开发的门槛，将治理工作从文书处理转向高价值分析。",
      "translated_title": "我们如何使用GitHub Copilot在五小时内实现无障碍合规自动化",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/105733155?v=4&s=200",
          "alt": "Janice Rimmer",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>See how we turned weekly accessibility signals into an automated, accountable remediation workflow—powered by GitHub Copilot and cross‑functional collaboration.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-we-automated-accessibility-compliance-in-five-hours-with-github-copilot/\">How GitHub Copilot enabled accessibility governance process improvements in record time</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "一位顶级漏洞赏金研究员如何开启他们的安全生涯 (原标题: How a top bug bounty researcher got their start in security)",
      "link": "https://github.blog/security/how-a-top-bug-bounty-researcher-got-their-start-in-security/",
      "pubDate": "Tue, 07 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-07T16:00:00.000Z",
      "creator": "Shilpa Kumari",
      "summary": "GitHub在网络安全意识月期间，重点介绍了其漏洞赏金计划中的一位顶级安全研究员——@xiridium。GitHub致力于维护其平台和更广泛软件生态系统的安全，尤其是在GitHub Copilot等AI驱动功能快速增长的背景下。与经验丰富的安全研究员合作至关重要，有助于识别和解决传统及新兴技术中的漏洞。\n\nGitHub还设立了VIP漏洞赏金计划，邀请那些持续展现专业知识和影响力的研究员加入。VIP研究员可获得：\n*   产品和功能公开发布前的早期预览。\n*   与GitHub漏洞赏金团队及工程师的专属互动。\n*   独家Hacktocat周边商品。\n\n@xiridium以发现业务逻辑漏洞而闻名，并在GitHub生态系统中发现了许多细致且有影响的问题。他们提交的报告清晰、可操作，大大简化了调查和分类过程。\n\n**@xiridium的访谈亮点：**\n\n*   **如何参与漏洞赏金？**\n    *   通过玩CTF（夺旗赛）了解到漏洞赏金，梦想是找到真实应用中的漏洞。\n    *   社区的专业认可和技术技能的提升是他们持续参与的动力。\n\n*   **业余爱好？**\n    *   30岁时开始学习音乐和唱歌，这有助于他们从工作和漏洞赏金中放松。\n    *   也会将部分赏金用于购买乐高玩具。\n\n*   **如何学习漏洞趋势？**\n    *   按需学习：当遇到Protobuf（Protocol Buffers）代码或新的云提供商时，会深入学习相关技术。\n    *   建议关注X（Twitter）上的Intigriti等账号，但强调要理解技巧背后的原理，避免盲目使用。\n\n*   **研究工具与流程？**\n    *   **ChatGPT及其他大型语言模型（LLMs）：** 视为初级开发人员，将大任务分解为小任务，批准其计划后再让其编写代码。这有助于编写小脚本、验证凭证和快速了解新技术。\n    *   **研究方法：** 倾向于深入研究一个应用程序，而非广撒网。目标是彻底理解应用程序的每个端点和请求参数。\n    *   **流程：** 重读程序规则，记录看起来异常的事物，例如：\n        *   同一功能存在两个不同的API端点（`/user` 和 `/data/users`），可能表明开发团队之间缺乏同步。\n        *   子域名分布在不同的云服务商（如AWS和GCP），可能意味着由不同团队管理，从而增加漏洞的可能性。\n\n*   **最喜欢的漏洞类型？**\n    *   泄露凭证和业务逻辑漏洞，擅长发现细微之处。\n    *   **技巧：** 在GitHub上搜索独特的端点；使用Google dork在Slideshare、Postman、Figma等开发或管理工具中搜索目标公司信息，以更好地理解应用程序工作原理。\n\n*   **给新研究员的建议？**\n    *   **资源：** 强烈推荐Portswigger Labs和hacker101。从每个类别的最简单任务开始，找到感兴趣的领域，然后深入学习（阅读报告、解决CTF、HackTheBox等）。\n    *   **心态：** 不要抱有“这肯定没有漏洞”或“这个资产已经被充分检查过”的假设。即使是主域名也可能存在漏洞。\n    *   **尝试罕见漏洞：** 如果了解一些罕见的漏洞类别，不要犹豫进行测试。@xiridium曾在一个Web应用的认证Cookie中发现Oracle填充漏洞。\n\nGitHub感谢@xiridium的参与，并强调每次漏洞提交都为GitHub、其产品和客户带来了更高的安全性。GitHub持续欢迎并感谢安全研究社区的合作，鼓励研究员通过HackerOne报告发现。\n\n**更多来自GitHub的探索：**\n*   ![Shilpa Kumari](https://avatars.githubusercontent.com/u/82128924?v=4&s=200)\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs：掌握GitHub所需的一切。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub：在GitHub上构建未来。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) 客户案例：了解使用GitHub构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025：注册参加旧金山会议。",
      "shortSummary": "GitHub在网络安全意识月期间，聚焦顶级漏洞赏金研究员@xiridium。@xiridium分享了其从CTF开始的漏洞赏金生涯，强调深入研究应用、利用LLM辅助、关注业务逻辑和凭证泄露漏洞。他建议新研究员利用Portswigger Labs等资源，并避免假设资产安全。GitHub通过漏洞赏金计划和VIP项目，持续与安全社区合作，以确保平台安全，尤其是在AI功能快速发展之际。",
      "translated_title": "一位顶级漏洞赏金研究员如何开启他们的安全生涯",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/82128924?v=4&s=200",
          "alt": "Shilpa Kumari",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>For this year’s Cybersecurity Awareness Month, the GitHub Bug Bounty team is excited to feature another spotlight on a talented security researcher — @xiridium!</p>\n<p>The post <a href=\"https://github.blog/security/how-a-top-bug-bounty-researcher-got-their-start-in-security/\">How a top bug bounty researcher got their start in security</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "开发者角色正在演变。以下是如何保持领先。 (原标题: The developer role is evolving. Here’s how to stay ahead.)",
      "link": "https://github.blog/ai-and-ml/the-developer-role-is-evolving-heres-how-to-stay-ahead/",
      "pubDate": "Mon, 06 Oct 2025 20:12:49 +0000",
      "isoDate": "2025-10-06T20:12:49.000Z",
      "creator": "Gwen Davis",
      "summary": "## 开发者角色正在演变：如何在AI时代保持领先\n\n### 引言：AI时代的开发者转型\n\n文章指出，开发者角色正经历一场深刻的变革。在未来五年内，人工智能（AI）预计将编写95%的代码，这标志着一个由AI驱动的新时代的到来。开发者将不再仅仅是手动编码者，而是转变为AI驱动开发生态系统的“协调者、战略家和协作者”。未来的价值将更多地体现在解决问题、设计和启发上，而非单纯的打字速度。GitHub的研究预测，到2030年，AI带来的生产力提升将为全球劳动力增加相当于1500万名有效开发者，并创造超过1.5万亿美元的经济价值。正如《从今天的代码到明天的交响乐：2030年开发者日常的AI转型》的合著者Ketai Qiu所言，未来的编程将更侧重于定义意图、指导AI系统并整合其输出，而非编写大量代码。\n\n### 关键技能：在AI时代保持领先的三个策略\n\n为了适应这一转变并保持竞争力，开发者需要培养以下三项核心技能：\n\n#### 1. 通过提供更好的上下文使AI编码更可靠\n\nAI虽然速度快，但并非“通灵”，它需要精确的上下文才能生成有意义且相关的代码。提供正确的信号——包括意图、数据和任务目的——能够引导AI（如GitHub Copilot）生成高质量的输出。\n\n*   **GitHub Copilot Spaces**：这是一个专用环境，允许团队通过上传源文件（如文档、代码库）、设定意图和协作来为Copilot提供关键上下文，从而确保其建议准确、相关并符合实际工作。\n*   **如何设置GitHub Space：**\n    1.  访问github.com/copilot/spaces并创建一个新空间。\n    2.  上传上下文，可以是文档、示例文件，甚至是整个代码仓库。\n    3.  开始聊天，向Copilot提问，使其利用您已添加的源信息。\n*   **提示：** 团队可以创建组织范围的空间，以便所有成员都能从相同的共享上下文受益。\n*   **GitHub Universe 2025相关会议：**\n    *   “代理的黎明：利用AI驱动工具加速软件开发”\n    *   “从意图到输出：用AI代理进行设计”\n\n![幻灯片标题为“代理的黎明：利用AI驱动工具加速软件开发”，包含GitHub的Maya Ross和Nick Liffen的头像。](https://github.blog/wp-content/uploads/2025/10/image1.png?resize=1024%2C538)\n\n#### 2. 提供洞察力、判断力和战略\n\nAI可以生成代码，但无法取代人类的洞察力、创造力或协作能力。在AI时代，将机器效率与人类判断和团队合作相结合的开发者将脱颖而出，而“协调能力”将成为主要的竞争优势。\n\n*   **GitHub Copilot代码审查**：这是一个AI工具，能够自动扫描拉取请求，突出潜在问题并提出改进建议，帮助团队更快地交付代码并减少瓶颈。\n*   **如何尝试Copilot代码审查：**\n    1.  请求Copilot审查：打开一个现有拉取请求，并将Copilot添加为审阅者。\n    2.  审查Copilot的反馈：稍后，它将添加评论、建议和可直接提交的内联更改。\n    3.  完善审查：您可以重新审查、对反馈进行点赞/踩，或添加`.github/copilot-instructions.md`文件以设置自定义规则。\n*   **提示：** 一旦Copilot提供反馈，您可以启用自动审查，使其默认检查每个拉取请求，但除非您决定，否则Copilot不会阻止合并。\n*   **GitHub Universe 2025相关会议：**\n    *   “从结对到同行：Copilot代码审查的下一次演变”\n    *   会议还将提供可编程徽章、GitHub专家中心、职业角和开源区，以促进协作和创新。\n\n![会议幻灯片标题为“从结对到同行：Copilot代码审查的下一次演变。”左侧包含GitHub Universe 2025标志，以及发言人Elle Shwer的照片及其GitHub所属机构。](https://github.blog/wp-content/uploads/2025/10/image2.png?resize=1024%2C538)\n\n#### 3. 认识到学习永无止境\n\n技术技能的半衰期在AI驱动的世界中变得更短，因此持续学习是保持领先的关键。今天的知识可能不足以应对明天的挑战。\n\n*   **在GitHub内部提升AI技能的实用路线图：**\n    1.  **学习基本语言和框架：** 从Python开始，扩展到Java和C++；探索TensorFlow、PyTorch和Scikit-learn等框架。\n    2.  **掌握机器学习基础知识：** 深入学习深度学习、自然语言处理（NLP）和计算机视觉；利用Awesome Machine Learning、NLTK或OpenCV等开源仓库进行实践。\n    3.  **在GitHub上展示技能：** 组织好您的代码仓库，发布清晰的README文件，积极贡献开源项目，并在GitHub Pages上建立出色的个人资料。\n    4.  **获得GitHub Copilot认证：** 学习完整的工具包，通过文档和项目进行准备，并获得Copilot认证徽章。\n*   **提示：** 不仅要学习AI技能，更要展示您的工作成果。每个仓库、贡献或徽章都向雇主表明您正紧跟AI时代步伐。\n*   **GitHub Universe 2025亮点：**\n    *   “用GitHub Copilot引领：重新思考体验、战略和协作”（由GitHub工程副总裁Sharanya Doddapaneni主讲）\n    *   “与AI高飞：国泰航空转型软件开发”（由国泰航空IT基础设施和安全总经理Rajeev Nair主讲）\n\n![会议幻灯片标题为“与AI高飞：国泰航空转型软件。”](https://github.blog/wp-content/uploads/2025/10/image3.png?resize=1024%2C538)\n\n### 总结：共同迎接未来\n\n文章鼓励开发者积极参与GitHub Universe等活动，这是一个汇集上下文、协作和创造力的平台。通过参与，开发者可以获取洞察、工具和人脉，从而更好地适应和塑造AI驱动的开发未来。\n\n![GitHub Universe 2024户外活动，有帐篷、拱门和与会者。](https://github.blog/wp-content/uploads/2025/10/image4.png?resize=1024%2C1024)",
      "shortSummary": "AI正迅速改变开发者角色，未来五年内将编写95%的代码。开发者需从手动编码者转变为AI驱动开发生态系统的协调者、战略家和协作者。为保持领先，关键在于掌握三大技能：为AI提供精确上下文（如通过GitHub Copilot Spaces）、运用人类洞察力与判断力进行战略决策（如通过GitHub Copilot代码审查），以及持续学习新技能。这些能力将帮助开发者在不断变化的就业市场中保持韧性并脱颖而出。",
      "translated_title": "开发者角色正在演变。以下是如何保持领先。",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image1.png?resize=1024%2C538",
          "alt": "Slide titled 'Dawn of the agents: Leveraging AI-powered tools to accelerate software development' with headshots of Maya Ross and Nick Liffen from GitHub.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image2.png?resize=1024%2C538",
          "alt": "Conference slide titled ‘From pair to peer: The next evolution of Copilot code review.’ Includes GitHub Universe 2025 logo on the left, speaker photo of Elle Shwer with GitHub listed as affiliation.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image3.png?resize=1024%2C538",
          "alt": "Conference slide titled ‘Flying high with AI: Cathay Pacific on transforming software.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image4.png?resize=1024%2C1024",
          "alt": "GitHub Universe 2024 outdoor event with tents, archway, and attendees.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://avatars.githubusercontent.com/u/94031472?v=4&s=200",
          "alt": "Gwen Davis",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>AI is changing how software gets built. Explore the skills you need to keep up and stand out.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/the-developer-role-is-evolving-heres-how-to-stay-ahead/\">The developer role is evolving. Here’s how to stay ahead.</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "规范驱动开发：在使用AI构建时将Markdown作为编程语言 (原标题: Spec-driven development: Using Markdown as a programming language when building with AI)",
      "link": "https://github.blog/ai-and-ml/generative-ai/spec-driven-development-using-markdown-as-a-programming-language-when-building-with-ai/",
      "pubDate": "Tue, 30 Sep 2025 19:07:46 +0000",
      "isoDate": "2025-09-30T19:07:46.000Z",
      "creator": "Tomas Vesely",
      "summary": "# 规范驱动开发：使用Markdown作为AI编程语言\n\n## 引言：AI编码代理的挑战\n\n传统的AI编码代理（如GitHub Copilot）工作流程通常是迭代式的：“编写应用A实现X”，“添加功能Y”，“修复bug Z”。然而，这种方式容易导致代理丢失应用目的或之前的决策上下文，表现为重复提问或提出与先前指令矛盾的建议。尽管一些代理支持自定义指令文件（如`copilot-instructions.md`），但作者发现，在编码过程中常常忘记更新这些文件，且在聊天提示和指令文件中重复相同信息显得多余。\n\n## 核心理念：Markdown驱动的规范开发\n\n作者提出了一种新的方法：将整个应用“编写”在Markdown指令文件中。在他的最新项目——GitHub Brain MCP Server中，作者尝试将应用代码完全用Markdown编写，然后让GitHub Copilot将其编译成实际的Go代码。通过这种方式，他很少直接编辑或查看Go代码。这种方法理论上适用于任何AI编码代理和编程语言，本文以VS Code、GitHub Copilot和Go为例进行阐述。\n\n## 关键文件与工作流程\n\n该工作流程涉及四个核心文件：\n\n*   `.github/prompts/compile.prompt.md`：AI编码代理的编译提示文件。\n*   `main.go`：由AI代理生成的实际Go代码。\n*   `main.md`：应用的Markdown格式规范文件，是应用的“源代码”。\n*   `README.md`：面向用户的文档。\n\n**高层工作流程：** 编辑`README.md`或`main.md`进行开发，调用`compile.prompt.md`让AI代理生成`main.go`，然后像普通Go应用一样构建和运行`main.go`。\n\n### `README.md`：用户文档\n\n`README.md`提供清晰的用户安装和使用说明。对于GitHub Brain MCP Server这个命令行工具，它包含了`pull`和`mcp`等命令的用法和参数说明。例如：\n\n```markdown\n# GitHub Brain MCP Server\n**GitHub Brain** 是一个实验性的MCP服务器，用于总结GitHub讨论、问题和拉取请求。\n\n## 用法\n```sh\ngo run main.go <command> [<args>]\n```\n\n**工作流程：**\n1.  使用 `pull` 命令填充本地数据库。\n2.  使用 `mcp` 命令启动MCP服务器。\n\n### `pull`\n使用GitHub数据填充本地数据库。\n示例：\n```sh\ngo run main.go pull -o my-org\n```\n参数：\n- `-t`: 您的GitHub个人访问令牌。**必需。**\n- `-o`: 要从中拉取数据的GitHub组织。**必需。**\n- `-db`: SQLite数据库目录路径。默认值：当前目录中的 `db` 文件夹。\n\n### `mcp`\n使用本地数据库启动MCP服务器。\n```\n\n### `main.md`：AI编码代理规范\n\n`main.md`是应用的实际“源代码”，当需要添加功能或修复bug时，作者会编辑此文件。它将`README.md`中的用户文档嵌入到规范中，确保文档和实现同步。例如：\n\n```markdown\n# GitHub Brain MCP Server\nAI编码代理规范。面向用户的文档在 [README.md](README.md) 中。\n\n## CLI\n实现 [Usage](README.md#usage) 部分的CLI。遵循精确的参数/变量名称。仅支持 `pull` 和 `mcp` 命令。\n\n## pull\n- 将CLI参数和环境变量解析为 `Config` 结构体：\n  - `Organization`：组织名称（必需）\n  - `GithubToken`：GitHub API令牌（必需）\n  - `DBDir`：SQLite数据库路径（默认：`./db`）\n- 始终使用 `Config` 结构体，避免多次读取环境变量\n- 拉取项：仓库、讨论、问题、拉取请求、团队\n- 使用 `log/slog` 自定义日志记录器，用于控制台输出中带有时间戳的最后5条日志消息\n```\n\n`main.md`中还包含具体的逻辑描述，如查询GitHub Discussions的GraphQL片段、处理数据更新的逻辑，以及数据库模式定义：\n\n```markdown\n### Discussions\n- 查询每个 `has_discussions_enabled: true` 仓库的讨论\n- 在拉取第一页之前，从数据库记录最近的仓库讨论 `updated_at` 时间戳\n```graphql\n{\n  repository(owner: \"<organization>\", name: \"<repository>\") {\n    discussions(first: 100, orderBy: { field: UPDATED_AT, direction: DESC }) {\n      nodes {\n        url\n        title\n        body\n        createdAt\n        updatedAt\n        author {\n          login\n        }\n      }\n    }\n  }\n}\n```\n- 如果仓库不存在，则从数据库中删除该仓库及其所有相关项并继续\n- 按最近的 `updatedAt` 排序查询讨论\n- 当遇到 `updatedAt` 早于记录时间戳的讨论时停止拉取\n- 通过主键 `url` 保存或更新\n- 保留讨论的Markdown正文\n\n## Database\nSQLite数据库位于 `{Config.DbDir}/{Config.Organization}.db`（如果需要则创建文件夹）。避免事务。立即保存每个GraphQL项。\n\n### Tables\n#### table:repositories\n- 主键：`name`\n- 索引：`updated_at`\n- `name`：仓库名称（例如，`repo`），不带组织前缀\n- `has_discussions_enabled`：布尔值，指示仓库是否启用了讨论功能\n- `has_issues_enabled`：布尔值，指示仓库是否启用了问题功能\n- `updated_at`：上次更新时间戳\n```\n\n### `compile.prompt.md`：AI编码代理提示\n\n`compile.prompt.md`使用GitHub Copilot的提示文件格式，指示代理将`main.md`编译为`main.go`。其内容简洁，将大部分信息委托给`main.md`：\n\n```markdown\n---\nmode: agent\n---\n- 更新应用以遵循 [规范](../../main.md)\n- 使用VS Code任务构建代码。避免要求我手动运行 `go build` 或 `go test` 命令。\n- 获取每个使用的库的GitHub主页，以获取文档和示例。\n```\n\n## 整合工作流程\n\n开发循环直接而高效：\n\n1.  编辑`main.md`或`README.md`中的规范。\n2.  请求AI编码代理将其编译为Go代码（在GitHub Copilot for VS Code中，使用`/`命令调用提示）。\n    ![在VS Code中使用GitHub Copilot的/命令调用AI编码代理提示的截图。](https://github.blog/wp-content/uploads/2025/09/image-2.png?resize=1024%2C516)\n3.  运行并测试应用。\n4.  如果出现问题，更新规范并重复。\n\n对于较小的规范，GitHub Copilot通常会自动捕获更改。随着规范的增长，可以通过添加“focus on <the-change>”来引导代理。\n\n![在VS Code中演示如何使用/命令提示GitHub Copilot专注于特定更改的截图。](https://github.blog/wp-content/uploads/2025/09/image-2_87448b.png?resize=1770%2C2836)\n\n## Markdown中的编码辅助\n\n直接在`main.md`中编码有时比直接编写Go代码更具挑战性，因为它要求清晰地描述所需功能。幸运的是，GitHub Copilot可以协助编写Markdown规范本身，例如，帮助为MCP工具添加分页逻辑，并推荐适当的分页样式和参数名称。\n\n![在Markdown规范中，GitHub Copilot在VS Code中为MCP工具推荐分页样式和参数名称的截图。](https://github.blog/wp-content/uploads/2025/09/image-4.png?resize=1760%2C2672)\n\n## Markdown规范的Linting\n\n与任何代码一样，`main.md`也可能变得混乱。为了解决这个问题，可以使用另一个提示文件`lint.prompt.md`来请求Copilot清理规范：\n\n```markdown\n---\nmode: agent\n---\n- 优化 [应用规范](../../main.md) 以提高清晰度和简洁性\n- 将英语视为一种编程语言\n- 最小化同义词的数量 - 即 pull/get/fetch。坚持使用一个术语。\n- 删除重复内容\n- 保留所有重要细节\n- 不要修改Go代码。只优化Markdown文件。\n- 不要修改此提示本身。\n```\n\nAI编码代理会根据此提示对`main.md`进行Linting，如果结果满意，再使用`compile.prompt.md`将其编译为Go代码。\n\n![GitHub Copilot在VS Code中清理和Linting Markdown规范以提高清晰度和简洁性的截图。](https://github.blog/wp-content/uploads/2025/09/image-3_bc6205.png?resize=1742%2C2416)\n\n## 总结与展望\n\n经过几个月的使用，作者观察到：\n\n*   该工作流程有效，并随着Copilot的代理更新而不断改进。\n*   随着`main.go`代码量的增长，编译速度会变慢。下一步计划是修改规范，将编译后的代码拆分为多个模块。\n*   测试仍然至关重要。规范描述了预期行为，但测试验证了它。\n*   未来尝试：完全丢弃Go代码，并从头开始用另一种语言重新生成应用，以验证新代码的即时可用性。\n\n作者鼓励读者尝试这些实验性工作流程，并对该领域的快速发展表示乐观。",
      "shortSummary": "本文介绍了一种“规范驱动开发”新范式，利用Markdown作为AI编码代理的“编程语言”。开发者在Markdown文件（如`main.md`）中详细定义应用逻辑、CLI和数据库架构，然后由AI代理（如GitHub Copilot）将其编译成实际代码（如Go）。这种方法解决了AI代理上下文丢失问题，确保文档与实现同步，并允许AI协助编写和优化规范。该工作流程提高了开发效率，尽管大型项目可能面临编译速度挑战，但其潜力巨大，尤其是在跨语言代码生成方面。",
      "translated_title": "规范驱动开发：在使用AI构建时将Markdown作为编程语言",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-2.png?resize=1024%2C516",
          "alt": "Screenshot showing the use of the / command in GitHub Copilot for VS Code to invoke the AI coding agent prompt.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-2_87448b.png?resize=1770%2C2836",
          "alt": "Screenshot demonstrating how to prompt GitHub Copilot in VS Code to focus on a specific change using the / command.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-4.png?resize=1760%2C2672",
          "alt": "Screenshot showing GitHub Copilot in VS Code recommending pagination style and parameter names for MCP tools in the Markdown specification.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-3_bc6205.png?resize=1742%2C2416",
          "alt": "Screenshot of GitHub Copilot in VS Code cleaning up and linting the Markdown specification for improved clarity and conciseness.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://avatars.githubusercontent.com/u/448809?v=4&s=200",
          "alt": "Tomas Vesely",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>I coded my latest app entirely in Markdown and let GitHub Copilot compile it into Go. This resulted in cleaner specs, faster iteration, and no more context loss.  ✨</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/spec-driven-development-using-markdown-as-a-programming-language-when-building-with-ai/\">Spec-driven development: Using Markdown as a programming language when building with AI</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-10-15T04:33:33.897Z"
}