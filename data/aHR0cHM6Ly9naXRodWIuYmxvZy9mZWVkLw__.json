{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "如何使用GitHub MCP注册表查找、安装和管理MCP服务器 (原标题: How to find, install, and manage MCP servers with the GitHub MCP Registry)",
      "link": "https://github.blog/ai-and-ml/generative-ai/how-to-find-install-and-manage-mcp-servers-with-the-github-mcp-registry/",
      "pubDate": "Fri, 24 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-24T16:00:00.000Z",
      "creator": "Andrea Griffiths",
      "summary": "# GitHub MCP注册表：AI工具发现、安装与管理的新范式\n\nGitHub MCP注册表是一个革命性的平台，旨在解决Model Context Protocol (MCP) 服务器发现和管理的混乱问题。MCP是开发者将工具、API和工作流连接到其AI系统的核心协议。每个MCP服务器都是AI堆栈中的一个“组件”，例如用于浏览器自动化的Playwright、知识访问的Notion，或包含百余种工具的GitHub自有MCP服务器。该注册表提供了一个单一、权威的来源，用于在GitHub上发现、安装和管理MCP服务器。\n\n## 注册表现状\n\n目前，GitHub MCP注册表已收录44个MCP服务器，包括：\n\n*   **Playwright**：自动化和测试Web应用程序。\n*   **GitHub MCP服务器**：访问100多种GitHub API工具。\n*   **Context7, MarkItDown (Microsoft), Terraform (HashiCorp)**。\n*   来自**Notion、Unity、Firecrawl、Stripe**等合作伙伴的服务器。\n\n用户可以通过标签、流行度或GitHub星标来浏览和查找所需工具。\n\n## 如何安装MCP服务器\n\n注册表使在VS Code或VS Code Insiders中安装服务器成为一键式体验：\n\n1.  在GitHub MCP注册表中导航到目标MCP服务器（例如Playwright）。\n2.  点击“在VS Code中安装”。\n3.  VS Code将启动并预填充配置。\n4.  接受或调整可选参数（如存储路径）。\n\n**专业提示**：远程MCP服务器（如GitHub的）在安装过程中使用OAuth，无需手动处理令牌或密钥，只需一次身份验证即可开始构建。\n\n## 如何发布自己的MCP服务器\n\n发布自己的MCP服务器涉及以下步骤：\n\n1.  **安装MCP Publisher CLI**：\n    *   macOS/Linux/WSL (推荐Homebrew)：`brew install mcp-publisher`\n    *   macOS/Linux/WSL (预构建二进制文件)：通过curl下载并解压安装。\n2.  **初始化 `server.json` 文件**：\n    *   进入服务器源目录，运行 `mcp-publisher init`，这将创建一个包含服务器元数据（名称、标题、描述、版本、包信息等）的 `server.json` 文件。\n3.  **证明包所有权**：\n    *   NPM：在 `package.json` 中添加 `\"mcpName\"` 字段。\n    *   PyPI/NuGet：在 `README` 中添加 `mcp-name:`。\n    *   Docker：在 `Dockerfile` 中添加 `LABEL io.modelcontextprotocol.server.name=`。\n4.  **身份验证**：\n    *   GitHub命名空间 (`io.github.*`)：运行 `mcp-publisher login github` 进行OAuth登录。\n    *   自定义域名 (`com.yourcompany/*`)：遵循官方文档中的DNS验证步骤。\n5.  **发布服务器**：\n    *   身份验证成功后，运行 `mcp-publisher publish`。\n    *   发布后，服务器将在MCP注册表中可被发现。\n    *   完成上述步骤后，发送电子邮件至 `partnerships@github.com` 请求收录您的服务器。\n\n**专业提示**：\n*   命名空间：使用 `io.github.username/*` 进行GitHub身份验证，或 `com.yourcompany/*` 进行DNS验证。\n*   远程端点：在 `server.json` 中添加 `\"remotes\"` 数组，用于云/HTTP端点。\n*   多部署选项：可以同时列出“packages”和“remotes”以实现混合部署。\n\n### 使用GitHub Actions自动化发布\n\n可以通过GitHub Actions自动化发布流程，确保每次带标签的发布都能同步到包注册表和MCP注册表。这通过创建一个 `.github/workflows/publish-mcp.yml` 文件实现，该工作流会在标签推送时触发，并执行构建、测试、发布到NPM（如果适用）以及发布到MCP注册表等步骤。\n\n**专业提示**：\n*   将代码托管在公共GitHub仓库中以显示经过验证的所有权。\n*   在 `server.json` 中添加标签，以便开发者按类别轻松发现您的服务器。\n*   更新会自动向下游传播，无需手动通知。\n\n## 企业级MCP服务器管理（治理）\n\n对于管理大型组织中MCP使用的管理员来说，治理至关重要。GitHub现在支持注册表允许列表，管理员可以控制开发者可以安装哪些MCP服务器，尤其是在这些服务器与敏感数据交互时。\n\n**管理员步骤**：\n\n1.  建立或连接一个遵循MCP API规范的内部注册表。\n2.  将经过审查的MCP服务器（内部和外部）添加到您的注册表。\n3.  将GitHub Enterprise设置指向该注册表端点。\n4.  支持MCP的界面（从VS Code开始）将自动执行允许列表。\n\n这种治理模型允许企业在确保合规性的同时，为开发者提供所需的工具。\n\n**专业提示**：使用GitHub的API或现有安全管道在将MCP服务器添加到允许列表之前对其进行审查。\n\n## 高级用户技巧\n\n*   **更智能地排序**：利用GitHub星标和组织验证快速评估服务器的质量和合法性。\n*   **本地测试**：在发布前使用MCP Inspector测试您的MCP服务器，及早发现问题。\n*   **代理协同**：Copilot编码代理预加载了GitHub和Playwright MCP服务器，可实现自动生成带有Web应用截图的拉取请求。\n*   **工具过载解决**：VS Code正在推出语义工具查找功能，根据提示只显示相关工具，使大型MCP服务器更易管理。\n\n## 未来展望\n\nGitHub MCP注册表仍在发展中，未来计划包括：\n\n*   **自助发布**：预计在未来几个月内推出，将促进社区驱动的增长。\n*   **更多IDE支持**：目标是无论在何处编写代码，都能实现MCP服务器的无缝安装。\n*   **企业功能**：为受监管行业（如金融服务、医疗保健）提供治理流程。\n*   **代理工作流**：GitHub MCP服务器将开始将工具捆绑到以用例为导向的流程中（例如，“分析仓库+打开拉取请求”），而非仅仅暴露原始API端点。\n\nGitHub MCP注册表旨在成为MCP服务器的单一事实来源，提供一个发现、安装和治理工具的集中平台，从而提升AI辅助开发中的工具编排能力。\n\n## 作者与相关链接\n\n本文由GitHub高级开发者倡导者Andrea Griffiths撰写。\n\n![Andrea Griffiths](https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg)\n\n探索更多来自GitHub：\n\n![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs\n\n![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub\n\n![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) Customer stories\n\n![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025",
      "shortSummary": "GitHub MCP注册表是一个新的集中平台，旨在简化Model Context Protocol (MCP) 服务器的发现、安装和管理。它提供一键式VS Code安装、用于发布自定义服务器的CLI工具，以及企业级治理功能（如允许列表）。该注册表目前包含44个服务器，并计划推出自助发布和更多IDE支持。其目标是成为AI工具编排的单一事实来源，提升AI辅助开发的效率和影响力。",
      "translated_title": "如何使用GitHub MCP注册表查找、安装和管理MCP服务器",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg",
          "alt": "Andrea Griffiths",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn how to bring structure and security to your AI ecosystem with the GitHub MCP Registry, the single source of truth for managing and governing MCP servers.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/how-to-find-install-and-manage-mcp-servers-with-the-github-mcp-registry/\">How to find, install, and manage MCP servers with the GitHub MCP Registry</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "通往更优补全之路：通过新的自定义模型构建更快、更智能的 GitHub Copilot (原标题: The road to better completions: Building a faster, smarter GitHub Copilot with a new custom model)",
      "link": "https://github.blog/ai-and-ml/github-copilot/the-road-to-better-completions-building-a-faster-smarter-github-copilot-with-a-new-custom-model/",
      "pubDate": "Thu, 23 Oct 2025 18:31:12 +0000",
      "isoDate": "2025-10-23T18:31:12.000Z",
      "creator": "Shengyu Fu",
      "summary": "# 通往更优补全之路：通过新的自定义模型构建更快、更智能的 GitHub Copilot\n\nGitHub Copilot 的代码补全功能是其最广泛使用的特性，每天帮助数百万开发者保持流畅的开发体验。GitHub 团队通过持续迭代自定义模型，显著提升了补全体验。\n\n## 关键改进与影响\n\n最新的更新带来了显著的性能提升：\n*   **接受和保留字符**：增加20%，意味着更多建议内容被最终采纳，减少了后续编辑。\n*   **接受率**：提高12%，反映了建议的即时实用性更高。\n*   **吞吐量**：提升3倍，系统能同时处理更多请求。\n*   **延迟**：降低35%，使Copilot感觉更快，保持编码流程不中断。\n\n这些改进现在已应用于所有编辑器和环境中的 GitHub Copilot。\n\n## 为什么这些改进很重要\n\n最初的 Copilot 专注于最大化接受率，但这可能导致大量简单、简短的建议，不完全符合开发者需求。团队根据反馈调整了优化目标，现在也关注接受和保留字符、代码流畅性等指标，以提供更高质量的体验。\n\n## 自定义模型的评估方法\n\nCopilot 模型通过结合离线、预生产和生产评估的信号进行评估，以确保在真实开发者工作流中提供更好的质量。\n\n### 1. 离线评估\n\n*   **基于执行的基准测试**：针对内部和公共代码库进行测试，涵盖所有主要语言，模拟真实任务，测量构建和测试通过率，强调功能正确性。\n\n    ![Python代码编辑器截图，显示一个名为resolve_file的函数，其中包含一个部分令牌补全错误：模型生成了“dataet”而不是“dataset”。](https://github.blog/wp-content/uploads/2025/10/partial-token-completion-error.png?resize=1024%2C447)\n\n*   **LLM-judge 评分**：使用独立的LLM对补全结果进行评分，评估以下三个维度：\n    *   **质量**：语法有效性、避免重复/重叠、格式和风格一致性。\n    *   **相关性**：专注于相关代码，避免幻觉和过度。\n    *   **实用性**：减少手动工作，避免过时或废弃的API。\n\n### 2. 预生产评估：定性内部测试\n\n与内部开发者和合作伙伴合作，在真实工作流中并排测试模型，收集关于可读性、信任度和“品味”的结构化反馈。与语言专家合作，通过语言特定评估提升补全质量。\n\n### 3. 生产评估：A/B 测试\n\n通过衡量接受和保留字符、接受率、补全显示率、首次令牌时间、延迟等指标来评估改进。只有当在真实开发者工作负载下显示出统计学上显著的改进时，才会发布更新。\n\n## 新 Copilot 补全模型的训练过程\n\n### 中训练 (Mid-training)\n\n在微调之前，团队通过“中训练”构建了一个代码特定的基础模型。这涉及使用一个精选、去重、包含近1000万个代码库和600多种编程语言的现代、地道、公开和内部代码语料库。此步骤确保模型能够利用现代API、新语言语法和最新API版本。随后，通过监督微调和强化学习，结合超越下一令牌预测的目标（如跨度填充和文档字符串/函数对），使模型学习结构、命名和意图，从而变得代码流畅、风格一致且上下文感知。\n\n### 监督微调 (Supervised fine-tuning)\n\n通用聊天模型在自然语言生成代码方面表现良好，但在“中间填充”（FIM）代码补全方面表现不佳。聊天模型常出现光标错位插入、光标前代码重复和光标后代码覆盖等问题。团队通过合成微调，训练模型专门用于补全，使其表现得像一个优秀的FIM引擎，从而改进了：\n*   **前缀/后缀感知**：在不破坏后缀的情况下，实现令牌间准确插入、行中续写、整行补全和多行代码块补全。\n*   **格式保真度**：尊重本地风格（缩进、导入、文档字符串），避免前缀重复。\n\n    ![图表显示了两个AI模型在HumanEval填充基准测试中的表现。其中包括GitHub的自定义模型Copilot Completions和OpenAI的GPT-4o-mini。评估结果显示，Copilot Completions模型在单行、多行、随机跨度和随机跨度轻量测试中均表现优异。](https://github.blog/wp-content/uploads/2025/10/HumanEvalInfilling_1200x630.png?resize=1024%2C538)\n\n### 强化学习 (Reinforcement learning)\n\n最后，团队使用自定义强化学习算法，通过奖励和惩罚机制，使模型内化在真实开发者场景中代码建议的有用性，主要关注三个方面：\n*   **质量**：语法有效、可编译且遵循项目风格的代码。\n*   **相关性**：符合任务、尊重周围上下文和文件意图的建议。\n*   **实用性**：减少手动工作并偏好现代API的建议。\n\n这些方法共同创造了在光标处正确、相关且真正有用的补全，而非冗长或表面上的帮助。\n\n## 经验总结\n\n*   **奖励需谨慎**：早期强化学习版本过度优化了长补全，导致“奖励作弊”式地添加过多注释。通过引入注释护栏，确保补全简洁并专注于推进任务。\n*   **指标至关重要**：过度关注单一指标（如接受率）可能导致表面上良好但开发者体验不佳的结果。因此，监控多个具有实际影响的指标至关重要。\n*   **为真实世界使用而训练**：将合成微调数据与真实世界使用情况对齐，并相应调整训练，以识别并消除问题模式，改善实际结果。\n\n## 未来展望\n\nGitHub 将继续推动 Copilot 补全功能的边界，包括：\n*   扩展到特定领域（如游戏引擎、金融、ERP）。\n*   完善奖励函数，以实现构建/测试成功、语义有用性（在不冗余的情况下推进用户意图的编辑）和对最新、地道库和模式的API现代化偏好。\n*   在所有开发者环境中提供更快、更经济、更高质量的补全。\n\n欢迎在 VS Code 中体验更快、更智能的代码补全。\n\n## 致谢\n\n感谢开发者社区的持续反馈，以及 GitHub 和 Microsoft 的研究人员、工程师、产品经理、设计师和 Copilot 产品与工程团队的贡献。",
      "shortSummary": "GitHub Copilot 通过新的自定义模型显著提升了代码补全体验，实现了接受和保留字符增加20%、接受率提高12%、吞吐量提升3倍以及延迟降低35%。模型训练过程包括代码特定基础模型的“中训练”、针对中间填充（FIM）补全的监督微调和强化学习，以确保功能正确性、开发者偏好和实际使用场景。评估通过离线、预生产和生产测试进行。未来将扩展到特定领域并进一步优化奖励函数，以提供更快、更智能、更高质量的补全。",
      "translated_title": "通往更优补全之路：通过新的自定义模型构建更快、更智能的 GitHub Copilot",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/partial-token-completion-error.png?resize=1024%2C447",
          "alt": "Screenshot of a Python code editor showing a function named resolve_file inside a file called dataset_utilities.py. The function takes two string arguments, dataset and filename, and returns a string. The purpose, according to the docstring, is to resolve a file from a dataset and assert that only one file is found. The code uses os.path and glob to find files. There’s a highlighted line path = os.path.join(dat... with an error under dat, suggesting a variable name typo (dat instead of dataset). Several red underlines indicate syntax or reference errors in the code.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/HumanEvalInfilling_1200x630.png?resize=1024%2C538",
          "alt": "A chart showing HumanEval Infilling Benchmarks for two different AI models. These include a custom model from GitHub named Copilot Completions and OpenAI's GPT-4o-mini. The evaluations show superior performance across single line, multi line, random span, and random span light tests for the Copilot Completions model. ",
          "title": "",
          "position": 2
        },
        {
          "url": "https://avatars.githubusercontent.com/u/23369389?v=4&s=200",
          "alt": "Shengyu Fu",
          "title": "",
          "position": 3
        },
        {
          "url": "https://avatars.githubusercontent.com/u/12915670?v=4&s=200",
          "alt": "John Mogensen",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Find out about the latest custom models powering the completions experience in GitHub Copilot. </p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/the-road-to-better-completions-building-a-faster-smarter-github-copilot-with-a-new-custom-model/\">The road to better completions: Building a faster, smarter GitHub Copilot with a new custom model</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "从卡拉OK终端到AI简历：GitHub“热爱代码”挑战赛的获奖者 (原标题: From karaoke terminals to AI résumés: The winners of GitHub’s For the Love of Code challenge)",
      "link": "https://github.blog/open-source/from-karaoke-terminals-to-ai-resumes-the-winners-of-githubs-for-the-love-of-code-challenge/",
      "pubDate": "Wed, 22 Oct 2025 20:30:35 +0000",
      "isoDate": "2025-10-22T20:30:35.000Z",
      "creator": "Lee Reilly",
      "summary": "GitHub举办了首届“热爱代码”挑战赛，旨在庆祝开发者为纯粹的乐趣而构建项目的精神。超过300名开发者参与，利用GitHub Copilot等工具，创造了涵盖硬件、终端、Web、AI、游戏等多个领域的奇妙作品。以下是六个类别中的获奖项目：\n\n### 🔘 按钮、蜂鸣与闪光灯 (Buttons, beeps & blinkenlights)\n\n*   **Plane Tracker** (@cpstroum)：一个DIY雷达，使用Adafruit Circuit Playground、蓝牙和ADS-B Exchange API，在桌面上实时显示附近航班数据。GitHub Copilot协助了Git操作和项目初期结构。\n    ![一个人手持连接到笔记本电脑的Adafruit TFT Gizmo显示屏。屏幕显示一个绿色的雷达界面，红色光点代表附近的飞机。背景中，VS Code中的Python代码和终端窗口显示通过蓝牙发送的模拟飞机数据。](https://github.blog/wp-content/uploads/2025/10/plane-tracker.jpg?resize=771%2C1024)\n*   **Cadrephoto** (@ozh)：一个基于树莓派和电子墨水的相框，通过电子邮件接收图片并自动更新显示，无需应用或复杂设置。GitHub Copilot帮助作者完成了他的第一个Python项目。\n    ![一个木制电子墨水相框显示《戴珍珠耳环的少女》的灰度版本。旁边的一部智能手机显示正在发送同一图片的电子邮件，一个红色箭头从手机指向相框，说明照片是如何远程更新的。](https://github.blog/wp-content/uploads/2025/10/cadrephoto.png?resize=1024%2C512)\n*   **BuildIn** (@SUNSET-Sejong-University, @lepetitprince99)：一个桌面交通灯，使用Arduino和GitHub API，通过红、黄、绿、蓝灯光直观显示仓库的构建状态。GitHub Copilot在代码调试和优化方面提供了帮助。\n    ![四张照片的拼贴画，展示了一个带有多个跳线和不同颜色（蓝色、绿色、黄色和红色）LED的Arduino面包板项目，在各种测试阶段亮起。](https://github.blog/wp-content/uploads/2025/10/buildin.png?resize=1024%2C1024)\n\n### 🖥️ 终端才华 (Terminal talent)\n\n*   **RestoHack** (@Critlist)：一个复活自1984年、启发了NetHack的Roguelike游戏，使用现代工具重建，忠实还原了原版体验。\n    ![一个黑色的终端窗口显示一个ASCII艺术的墓碑，上面写着“REST IN PEACE mjh 0 AU killed by a giant rat 2025”，来自一个复古的文本游戏。](https://github.blog/wp-content/uploads/2025/10/restohack.png?w=582&resize=582%2C422)\n*   **Jukebox CLI** (@FedeCarollo)：一个在终端中运行的彩色动画点唱机，用Rust和Ratatui构建，支持MP3播放、音符动画和可滚动的彩色播放列表。GitHub Copilot帮助作者探索了不熟悉的Rust库。\n    ![一个终端音乐播放器中的像素艺术点唱机界面。屏幕中央显示彩色像素图形，右侧是歌曲播放列表，底部是带有进度和音量条的播放控制。](https://github.blog/wp-content/uploads/2025/10/jukebox.png?resize=1024%2C466)\n*   **Tuneminal** (@heza-ru)：将终端变为卡拉OK舞台，提供滚动歌词、实时音频可视化和评分功能，让开发者在`git clone`时也能唱歌。\n    ![一个名为“Tuneminal”的终端卡拉OK界面。屏幕显示歌曲库“IRIS – Kenshi Yonezu”，当前分数和准确度，以及歌词和音频可视化器的占位符。](https://github.blog/wp-content/uploads/2025/10/tuneminal.png?resize=1024%2C521)\n\n### 🌐 万维网奇迹 (World wide wonders)\n\n*   **Netstalgia** (@heza-ru)：一个功能齐全的90年代Web模拟器，视觉上还原了拨号上网的体验，包含复古元素和一个“GitHub Star勒索软件”。\n    ![一个复古的1990年代风格网页，名为“Netsalgia.com”，设计成Windows 95桌面。页面上有彩色按钮、访客计数器、虚假广告和一个弹出窗口，要求用户为这个怀旧项目的GitHub仓库加星。](https://github.blog/wp-content/uploads/2025/10/netstalgia.png?resize=1024%2C640)\n*   **Bionic Reader** (@Awesome-XV)：通过加粗单词前几个字母来提高阅读速度的工具。GitHub Copilot协助了项目文档编写和初始代码库搭建。\n*   **The Git Roast Show** (@rawrnuck, @Anmol0201)：一个全栈Web应用，幽默地“吐槽”GitHub个人资料，生成个性化、带音效和动画的喜剧吐槽。GitHub Copilot帮助作者理解算法和处理重复性任务。\n    ![一张风格化的图片，描绘了一个穿着燕尾服戴墨镜的卡通GitHub Octocat角色手持麦克风。上方文字写着“The GitRoast Show”，一个对话气泡说“我们不在这里分叉”。背景是旋转的青色大理石纹理。](https://github.blog/wp-content/uploads/2025/10/the-git-roast-show.png?resize=1024%2C640)\n*   **Nightlio** (@shirsakm)：一个隐私优先的情绪追踪和日记应用，支持自托管，记录情绪、笔记，并分析模式。GitHub Copilot在重构、调色板更新和代码库范围的更改中提供了帮助。\n    ![一个深色主题的生产力应用Nightliio正在运行。动画突出显示情绪追踪图标、个人目标（如“睡前阅读”和“晨间冥想”），以及添加目标、查看历史和通过彩色动画条追踪进度的部分。](https://github.blog/wp-content/uploads/2025/10/nightlio.gif?resize=1024%2C484)\n\n### 🤖 变革的代理 (Agents of change)\n\n*   **Neosgenesis** (@answeryt)：一个元认知AI框架，教机器思考如何思考，通过五阶段循环和多个LLM进行决策。\n*   **MediVision Assistant** (@omkardongre)：一个AI医疗助手，通过语音、图像、视频帮助老年和残疾用户管理健康。GitHub Copilot协助生成了React组件、API模板和AI集成代码。\n*   **Quiviva** (@katawiecz)：一个交互式AI简历，将求职过程变为有趣的聊天冒险，可询问技能、项目，甚至解锁“极客模式”。\n    ![一个名为“An Interactive CV that Talks Back”的彩色网页界面。动画显示右侧有一个聊天机器人窗口，用户可以在其中向Kasia的AI简历提问。左侧解释该项目是AI、设计和讲故事的有趣结合，并列出了一些示例问题和一个下载PDF简历的按钮。](https://github.blog/wp-content/uploads/2025/10/quiviva.png?resize=1024%2C640)\n\n### 🕹️ 游戏时间 (Game on)\n\n*   **AI-Dventure** (@FedeCarollo)：一个用Rust和OpenAI模型构建的交互式文本冒险游戏，动态生成奇幻、恐怖、科幻或历史背景下的世界和故事。\n    ![一个文本冒险游戏的截图。](https://github.blog/wp-content/uploads/2025/10/ai-dventure.png?w=1009&resize=1009%2C672)\n*   **BeatBugging** (@sandra-aliaga, @Joshep-c, @RyanValdivia, @tniia)：将调试过程转化为节奏游戏，将系统日志转换为音乐节拍，让开发者在5x5网格上跟随节奏修复bug。GitHub Copilot帮助团队在遇到困难时找到下一步解决方案。\n    ![一个复古风格的终端界面，标题为“BEATBUGGING SYSTEM”，显示25%的进度条，模拟“音乐调试界面”的初始化，屏幕上显示音频频率、内存读数和ASCII符号。](https://github.blog/wp-content/uploads/2025/10/beatbugging.png?w=759&resize=759%2C437)\n*   **MuMind** (@FontesHabana)：一个基于Web的多人派对游戏，玩家尝试匹配多数人的答案来得分。\n\n### 🃏 包罗万象 (Everything but the kitchen sink)\n\n*   **GitFrag** (@chornonoh-vova)：使用经典排序算法（冒泡、合并、快速、计数排序）重组GitHub贡献图，并以动画形式可视化。GitHub Copilot帮助作者理解算法并添加细节。\n*   **Code Sensei** (@redhatsam09)：将VS Code会话变成禅意像素冒险，专注度决定游戏乐趣，长时间不活动会导致“Sensei”的8位死亡。\n*   **Reviewer Karma** (@master-wayne7)：一个奖励代码审查者良好反馈的系统，通过表情符号、评论和代码批评在排行榜上赚取积分。GitHub Copilot帮助编写高效的Go代码和处理重复性任务。\n    ![一个名为“评分系统”和“当前排名”的排行榜显示了审阅者如何通过进行代码审阅、使用积极表情符号和撰写建设性评论来获得积分。排名表列出了@alice以18分位居第一，其次是@bob、@carol、@dave和@eve。](https://github.blog/wp-content/uploads/2025/10/reviewer-karma.png?resize=1024%2C702)\n\n这些项目充分展示了当开发者为乐趣而构建时所能实现的创造力。所有类别获奖者都将获得12个月的GitHub Copilot Pro+订阅，进一步证明了创造力与代码（尤其是在Copilot辅助下）结合的强大潜力。",
      "shortSummary": "GitHub举办了首届“热爱代码”挑战赛，鼓励开发者为乐趣而构建项目。超过300名开发者参与，利用GitHub Copilot等工具，在六个类别中创造了众多创新作品。获奖项目包括DIY雷达、电子墨水相框、复古游戏、终端卡拉OK、90年代Web模拟器、AI简历和调试节奏游戏等。这些作品展示了开发者如何将好奇心和创造力转化为独特而有趣的项目。所有类别冠军均获得12个月的GitHub Copilot Pro+。",
      "translated_title": "从卡拉OK终端到AI简历：GitHub“热爱代码”挑战赛的获奖者",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/plane-tracker.jpg?resize=771%2C1024",
          "alt": "A person holding an Adafruit TFT Gizmo display connected to a laptop. The screen shows a green radar interface with red blips representing nearby planes. In the background, Python code and a terminal window in VS Code display mock plane data being sent via Bluetooth.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/cadrephoto.png?resize=1024%2C512",
          "alt": "A wooden e-ink photo frame displays a grayscale version of “Girl with a Pearl Earring.” A smartphone next to it shows an email being sent with the same image, and a red arrow points from the phone to the frame, illustrating how the photo is updated remotely.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/buildin.png?resize=1024%2C1024",
          "alt": "A collage of four photos showing an Arduino breadboard project with multiple jumper wires and LEDs in different colors—blue, green, yellow, and red—lit up during various testing stages.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/restohack.png?w=582&resize=582%2C422",
          "alt": "A black terminal window displaying ASCII art of a tombstone reading “REST IN PEACE mjh 0 AU killed by a giant rat 2025,” from a retro text-based game.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/jukebox.png?resize=1024%2C466",
          "alt": "A pixel art jukebox interface in a terminal-based music player. The screen shows colorful pixel graphics in the center, a playlist of songs on the right, and playback controls with progress and volume bars at the bottom.",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/tuneminal.png?resize=1024%2C521",
          "alt": "A terminal-based karaoke interface titled “Tuneminal.” The screen displays a song library with “IRIS – Kenshi Yonezu,” current score and accuracy, and placeholders for lyrics and an audio visualizer.",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/netstalgia.png?resize=1024%2C640",
          "alt": "A retro 1990s-style web page called “Netsalgia.com” designed to look like a Windows 95 desktop. The page features colorful buttons, visitor counters, fake ads, and a pop-up asking users to star the GitHub repository for this nostalgic project.",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/the-git-roast-show.png?resize=1024%2C640",
          "alt": "A stylized image featuring a cartoon GitHub Octocat character in a tuxedo and sunglasses holding a microphone. The text above reads “The GitRoast Show,” and a speech bubble says “we don’t fork around here.” The background has a swirling teal marble texture.",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>This summer, we invited devs to participate in our hackathon for joyful, ridiculous, and wildly creative projects. Here are the winners of For the Love of Code!</p>\n<p>The post <a href=\"https://github.blog/open-source/from-karaoke-terminals-to-ai-resumes-the-winners-of-githubs-for-the-love-of-code-challenge/\">From karaoke terminals to AI résumés: The winners of GitHub’s For the Love of Code challenge</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "顶尖安全研究员分享其漏洞赏金流程 (原标题: Top security researcher shares their bug bounty process)",
      "link": "https://github.blog/security/top-security-researcher-shares-their-bug-bounty-process/",
      "pubDate": "Wed, 22 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-22T16:00:00.000Z",
      "creator": "Shilpa Kumari",
      "summary": "GitHub在网络安全意识月期间，重点介绍了其漏洞赏金计划中的顶尖安全研究员André Storfjord Kristiansen (@dev-bio)。GitHub致力于维护其平台和软件生态系统的安全，尤其是在GitHub Copilot等AI驱动功能快速增长的背景下。与熟练的安全研究员合作对于识别和解决传统及新兴技术中的漏洞至关重要。\n\n**GitHub VIP 赏金计划**\nGitHub邀请持续展现专业知识和影响力的研究员加入其独家VIP赏金计划，提供：\n*   新产品和功能的早期测试权限。\n*   与GitHub漏洞赏金团队及工程师直接互动。\n*   独家Hacktocat周边商品。\n\n**研究员André Storfjord Kristiansen (@dev-bio) 的洞察**\n\n1.  **参与漏洞赏金的契机与动力：**\n    *   偶然在业余时间进行个人项目时接触，源于对系统行为（尤其是在处理复杂边缘情况时）的好奇心。\n    *   持续参与的动力在于，能够展示看似微小的问题如何产生实际影响，并将小问题升级为严重漏洞的过程令人满足。\n2.  **工作之外的生活：**\n    *   作为两个孩子的父亲，大部分时间陪伴家人，并感谢伴侣的支持。\n    *   在挪威享受大自然，通过徒步、露营和越野滑雪来放松和充电。\n3.  **学习与保持更新：**\n    *   通过阅读其他研究员的报告来了解漏洞趋势和解决问题的方法。\n    *   努力识别并深入研究需要进一步探索的领域，以保持领先。\n    *   专业领域是软件供应链安全，致力于研究漏洞并开发缓解新兴威胁的解决方案。\n4.  **工具与工作流程：**\n    *   在业余研究中，倾向于编写自己的工具，以获得更深入的理解并发现新的探索领域。\n    *   计划发布一个工具包，用于构建GitHub组织的离线综合图谱，并提供可扩展的查询套件，以快速发现常见的错误配置和隐藏的攻击路径。\n5.  **偏爱的漏洞类型：**\n    *   注入相关漏洞、微妙的逻辑缺陷和被忽视的假设。\n    *   对绕过严格内容安全策略（CSP）的新技术很感兴趣。\n    *   最喜欢将看似无害的发现串联起来，形成具有重大影响的漏洞，揭示底层设计缺陷。\n6.  **漏洞发现过程：**\n    *   最重要的发现多是偶然的，是好奇心驱使下的“跑题”结果，而非严格方法论的产物。\n    *   当发现异常时，会深入挖掘，层层剥离，直到完全理解，并详细记录每一步，绘制潜在攻击路径，构建清晰全面的漏洞图景。\n7.  **给新研究员的建议：**\n    *   不要满足于简单的发现，要深入挖掘并探索其潜在影响，理解全局后，看似无害的问题也可能产生重大影响。\n8.  **社交媒体：**\n    *   拥有一个页面，未来将发布有趣内容；活跃于LinkedIn。\n\n**致谢与号召**\nGitHub感谢@dev-bio的参与，并强调每次漏洞提交都有助于提升GitHub、其产品和客户的安全性。鼓励安全研究社区通过HackerOne报告发现的漏洞。\n\n**相关内容与作者信息**\n*   作者：Shilpa Kumari\n    ![Shilpa Kumari](https://avatars.githubusercontent.com/u/82128924?v=4&s=200)\n*   探索更多来自GitHub：\n    *   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs\n    *   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub\n    *   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) Customer stories\n    *   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025",
      "shortSummary": "GitHub在网络安全意识月期间，重点介绍了顶尖漏洞赏金研究员André Storfjord Kristiansen (@dev-bio)。他因擅长发现注入相关漏洞和提供详细报告而闻名。André分享，其研究动力源于对系统行为的好奇心，并享受将小问题升级为重大漏洞的成就感。他通过阅读同行报告和编写自定义工具来保持领先，并建议其他研究员深入挖掘漏洞影响。GitHub鼓励社区继续通过HackerOne报告漏洞，共同提升平台安全性。",
      "translated_title": "顶尖安全研究员分享其漏洞赏金流程",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/82128924?v=4&s=200",
          "alt": "Shilpa Kumari",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>For this year’s Cybersecurity Awareness Month, the GitHub Bug Bounty team is excited to put the spotlight on a talented security researcher—André Storfjord Kristiansen!</p>\n<p>The post <a href=\"https://github.blog/security/top-security-researcher-shares-their-bug-bounty-process/\">Top security researcher shares their bug bounty process</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何使用AI更新社区健康文件 (原标题: How to update community health files with AI)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-to-update-community-health-files-with-ai/",
      "pubDate": "Tue, 21 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-21T16:00:00.000Z",
      "creator": "Alexandra Lietzke",
      "summary": "# 使用AI更新社区健康文件\n\n本文探讨了如何利用人工智能（特别是GitHub Copilot）来更新和维护项目中的社区健康文件，从而让开发者能够更专注于核心代码开发。\n\n## 什么是GitHub Copilot？\nGitHub Copilot已从一个智能自动补全工具发展成为一个多模型、代理式助手。它能够理解整个代码库，执行跨文件重构，运行终端命令，甚至起草拉取请求。\n\n## 什么是社区健康文件及其重要性？\n社区健康文件是标准化文档，旨在为开源项目维护一个欢迎、有组织和协作的环境。它们传达期望、指导贡献者并支持代码库的整体健康。这些文件通常位于代码库的根目录或特殊的`.github`文件夹中。\n\n### 重要性：\n*   **项目投资：** 它们是新贡献者的第一接触点，标志着项目的成熟度和可维护性。\n*   **提升协作：** 提高透明度、一致性和协作，并为贡献者和维护者之间的互动设定基调。\n*   **避免问题：** 缺少或过时的文件可能导致贡献者提交格式不正确的拉取请求、提出模糊的问题，甚至引入安全漏洞，从而使维护者不堪重负。\n*   **AI的帮助：** GitHub Copilot等AI工具可以自动检测缺失或过时的文件，提出更新建议，甚至生成草稿，从而节省时间并减少人为错误。\n\n## 三种常见的社区健康文件\n以下是三种对构建欢迎社区至关重要的常见社区健康文件：\n\n### 1. README.md\n*   **作用：** 通常是访问者查看代码库时首先看到的文件，它介绍项目并解释其目的，以及如何开始使用。\n*   **内容：** 提供项目是什么、功能信息以及如何安装或使用等关键信息，帮助用户快速上手。\n\n### 2. 贡献者指南 (CONTRIBUTING.md)\n*   **作用：** 提供关于贡献者如何以及应该如何参与的指导方针，例如编码标准和拉取请求说明。\n*   **内容：** 告知用户如何高效贡献以及期望什么（例如，项目是否接受贡献），有助于设定标准和期望。\n\n### 3. 许可证 (LICENSE)\n*   **作用：** 规定了项目可以被使用、修改和分发的法律条款。简而言之，它告诉人们如何使用你的软件。\n*   **重要性：** 如果不添加许可证，其他人将无权使用、修改或分发你的代码。若要项目被认定为开源项目，应选择一个广泛使用的OSI（开放源代码促进会）批准的开源许可证。\n*   **资源：** 文章提供了选择和添加许可证的外部资源链接。\n\n## 其他流行的社区健康文件\n*   **ISSUE/PULL REQUEST TEMPLATES：** 标准化提交问题或拉取请求所需的格式和信息。\n*   **SECURITY：** 提供报告漏洞的说明，并概述项目的安全策略。\n*   **GOVERNANCE：** 解释项目如何管理，包括角色、职责和决策过程。\n*   **CODE OF CONDUCT：** 定义社区参与行为标准。\n*   **SUPPORT：** 分享他人如何获得项目帮助的具体指导。\n*   **FUNDING：** 在代码库中显示赞助按钮，以增加开源项目资金选项的可见性。\n\n## Copilot指令文件\n虽然不完全是社区健康文件，但Copilot指令文件是一个AI配置，它补充了健康文档。它使用其他社区健康文件作为上下文，精确地告诉GitHub Copilot如何与代码库交互，包括优先处理或避免什么。这个文件有助于为大型语言模型（LLM）提供基础，使其理解项目的结构和内容，从而在整个代码库中保持一致性。\n\n## 使用GitHub Copilot更新社区健康文件的入门套件\nGitHub提供了一个入门套件，其中包含提示词最佳实践、核对清单以及使用Copilot向代码库添加三个常见文件的分步教程。\n\n### 第一部分：提示词工程\nGitHub Copilot可以帮助你通过简单的提示词编写更清晰、更一致的社区健康文件。\n*   **注意事项：** 驱动GitHub Copilot的LLM是非确定性的，每次提示模型都可能收到不同的输出。因此，需要验证输出的准确性，特别是对于具有法律效力的许可证等敏感文件。\n*   **提示词最佳实践：**\n    *   编写清晰、结构化的提示词，例如：“为Node.js项目生成一个包含设置说明、编码标准和拉取请求指南的CONTRIBUTING.md文件。”\n    *   包含重要的上下文，如受众类型、项目目标和语气。\n    *   使用现有提示词文件来帮助标准化请求。\n\n### 第二部分：核对清单\n此核对清单有助于确保Copilot生成的内容准确、包容、安全并与项目目标保持一致。\n\n*   **开始前：** 审查现有文件，明确文件目标，熟悉组织政策。\n*   **有效提示Copilot：** 提示词具体且有上下文，包含示例或语气偏好。\n*   **安全与隐私：** 避免敏感信息，审查代码库可见性设置，了解Copilot隐私设置。SECURITY.md应包含漏洞报告联系方式、安全问题分类说明和负责任披露政策链接。\n*   **审查Copilot输出：** 内容是否反映项目价值观，检查是否存在虚构链接/名称/政策，外部资源是否准确最新。\n*   **测试与反馈：** 请队友或贡献者审查，测试说明是否有效，并乐于根据社区反馈进行迭代。\n\n### 第三部分：教程\n本教程演示了如何使用Copilot快速轻松地更新README.md、LICENSE文件和CONTRIBUTING.md。\n\n#### 1. 创建README.md\n*   **目的：** 提供项目清晰概览，帮助用户和贡献者快速理解其目的、设置和用法。\n*   **操作步骤：**\n    1.  在IDE中打开GitHub Copilot Chat（例如VS Code）。\n    2.  切换到代理模式以启用项目感知协助。\n    3.  选择首选模型（例如Claude）。\n    4.  确保项目在IDE中打开，以便Copilot读取其上下文。\n    5.  在聊天窗口中输入：“帮助我为我的项目编写一个README.md。确保它包含安装说明、项目概述并遵循标准的README实践。”\n    6.  审查生成的README.md，手动验证安装说明的准确性。\n    7.  如果满意，点击“Keep”保存文件并提交到代码库。\n\n#### 2. 添加许可证\n*   **目的：** 定义他人如何合法使用、修改和分发你的代码，保护双方权利，消除歧义，防止滥用。\n*   **操作步骤：**\n    1.  在IDE中打开GitHub Copilot Chat。\n    2.  决定要添加的许可证类型。\n    3.  输入提示词：“你能为我的项目添加[你想要的许可证]吗？”\n    4.  审查生成的LICENSE文件，确保准确性（特别是版权所有者名称和声明）。\n    5.  如果正确，点击“Keep”保存文件并提交到代码库。\n\n#### 3. 创建贡献者指南 (CONTRIBUTING.md)\n*   **目的：** 通过概述贡献标准、工作流程和期望来简化协作，降低摩擦和错误，鼓励一致、可扩展的贡献。\n*   **操作步骤：**\n    1.  在IDE中打开GitHub Copilot Chat。\n    2.  点击“+”图标开始新聊天。\n    3.  输入提示词：“创建一个遵循最佳实践的贡献者指南文件，并将其链接到README中。”\n    4.  Copilot将生成包含贡献指南、代码标准、拉取请求说明和问题报告流程的CONTRIBUTING.md文件。\n    5.  审查并编辑指南以符合团队工作流程。\n    6.  保存并提交CONTRIBUTING.md文件。\n    7.  更新README以包含贡献者指南的链接，例如：`## Contributing See CONTRIBUTING.md for guidelines.`\n\n## 总结\nGitHub Copilot不仅可以编写代码，还可以作为你的文档助手，帮助你更智能、更快、更顺畅地编写文档。它能优化社区健康文件，推广最佳实践，并将良好意图转化为出色的文档。最终结果是：更好的文档、更强大的社区和更快乐的维护者。",
      "shortSummary": "GitHub Copilot等AI工具能帮助开发者高效更新社区健康文件，如README、贡献者指南和许可证。这些标准化文档对开源项目的健康、协作和吸引新贡献者至关重要。AI可自动检测、建议并生成文件草稿，节省时间并减少错误。通过清晰的提示词、核对清单和分步教程，开发者可利用Copilot快速创建和维护这些文件，从而提升项目文档质量，促进社区发展。",
      "translated_title": "如何使用AI更新社区健康文件",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Have you ever thought about using AI to update community health files for your repositories? This blog shares actionable next steps for doing just that, including a starter kit with a checklist and tutorials on how to create three useful files.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-to-update-community-health-files-with-ai/\">How to update community health files with AI</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "打破互联网的漏洞内幕：Log4Shell不为人知的故事 (原标题: Inside the breach that broke the internet: The untold story of Log4Shell)",
      "link": "https://github.blog/open-source/inside-the-breach-that-broke-the-internet-the-untold-story-of-log4shell/",
      "pubDate": "Mon, 20 Oct 2025 16:00:16 +0000",
      "isoDate": "2025-10-20T16:00:16.000Z",
      "creator": "Gregg Cochran",
      "summary": "Log4Shell事件揭示了开源安全并非理所当然，它不仅是代码问题，更是关于支持、赋能和激励那些构建我们数字基础设施项目背后的人们。\n\n## Log4Shell危机的爆发\n\n*   **发现经过**：Log4j维护者Christian Grobmeier在帮助儿子解决Minecraft问题时，偶然发现了游戏中的安全警告：“我们正遭受Log4j安全漏洞的困扰，请立即小心并更新。”他意识到这正是他维护的Log4j项目的问题。\n*   **漏洞范围**：在短短数小时内，Christian发现自己身处Log4Shell危机的中心。这个漏洞被认为是互联网历史上最严重的安全漏洞，影响了从财富500强公司到全球Minecraft服务器的数十亿设备。\n*   **Log4j的普遍性**：Log4j是一个拥有20多年历史的Java日志库，默默地为全球应用程序（如用户登录和计算结果）提供系统事件记录。它已成为Java生态系统中数千个项目的核心依赖，许多组织在不知情的情况下使用它。\n\n## 漏洞的严重性与技术细节\n\n*   **完美10分**：Log4Shell在通用漏洞评分系统（CVSS）中获得了满分10分，是最高可能分数。\n*   **攻击原理**：Log4j利用Java的命名和目录接口（JNDI）提供灵活性，允许从远程服务器加载软件组件。然而，该库未能验证JNDI查找字符串是否来自可信来源。攻击者只需在任何会被记录的应用程序字段（如用户名、搜索框、Minecraft聊天消息）中输入恶意JNDI字符串，即可在目标系统上执行远程代码。\n*   **易于利用**：Christian指出，利用此漏洞“甚至不需要特殊知识”，攻击者可以随意注入恶意字符串。\n\n## 维护者的巨大代价\n\n*   **个人压力**：Log4Shell危机给Christian及其团队（大多是志愿者）带来了巨大的个人压力。他们突然肩负起修补影响“半个互联网”的漏洞的责任，导致“有人停止了睡眠”。\n*   **持续挑战**：修复初始漏洞后，又发现了更多问题，Christian将其比喻为“一个有洞的水袋，补好一个洞又出现另一个”。\n*   **社区反应**：社区的反应褒贬不一，既有指责，也有支持。Christian指出，没有人关心维护者本身，只关心项目，也缺乏对他们辛勤工作的感谢。\n\n## GitHub安全开源基金的应对\n\n*   **解决痛点**：Log4Shell事件凸显了开源安全的关键缺陷：维护者通常缺乏从一开始就将安全性融入项目的培训和资源。\n*   **基金作用**：GitHub安全开源基金应运而生，为关键开源项目提供资金和安全培训，旨在成为开源供应链的“保险”。\n*   **培训效果**：Christian参与了该基金的安全培训项目，发现其具有变革性。培训不仅提供了技术知识，还改变了他的视角，使开发者成为“第一道防线”。他认为，如果这项培训早五年存在，Log4Shell可能就不会发生。\n\n## 技术与行业层面的经验教训\n\n### 技术经验教训：默认构建安全性\n\n1.  **验证所有外部输入**：永不信任跨越信任边界的数据，尤其是在处理用户输入的基础库中。\n2.  **默认禁用危险功能**：Log4j现在默认禁用JNDI查找。\n3.  **实施纵深防御**：现代应用程序需要多层保护。\n4.  **自动化安全扫描**：利用GitHub的代码扫描和Dependabot等工具在生产前发现漏洞。\n5.  **维护软件物料清单（SBOMs）**：帮助组织了解其依赖项，以便在漏洞发生时迅速确定影响范围。\n\n### 行业经验教训：可持续开源\n\n*   **社区至关重要**：单一维护者维护开源软件存在风险。\n*   **安全培训应普及**：传统安全教育往往未能触及最需要的维护者。\n*   **资金并非唯一**：培训和社区支持与资金同等重要。\n*   **善意至上**：提醒人们，每个开源库背后都有一个编写代码的人，应以帮助而非指责的态度对待问题。\n*   **项目安全可改进**：Christian在基金项目中实施了多项安全改进。\n\n## 共同的责任\n\n*   **维护者**：申请基金项目，启用内置安全工具，导出SBOMs，发布安全公告。\n*   **企业**：成为基金的资助或生态系统合作伙伴，投入工程时间，贡献代码、文档、安全审查和资金。\n*   **个人开发者**：谨慎选择新依赖项，严格验证不受信任的输入，贡献测试用例和文档。\n\nLog4j目前拥有8.3的OpenSSF评分，表明其良好的安全实践。Log4Shell事件提醒我们，学习是消除无知的唯一方法，并强调了社区响应、适应和改进的力量。",
      "shortSummary": "Log4Shell是互联网历史上最严重的漏洞之一，源于Log4j这一普遍存在的Java日志库中JNDI查找未经验证。Log4j维护者Christian Grobmeier在帮助儿子玩Minecraft时偶然发现此漏洞，其影响波及全球数十亿设备。此次危机揭示了开源维护者面临的巨大压力和资源匮乏。为应对此问题，GitHub安全开源基金应运而生，提供资金和安全培训，旨在将开发者转变为安全防线。事件促使行业吸取了验证输入、默认禁用危险功能、自动化扫描和维护SBOMs等技术教训，并强调了社区、培训和善意对开源可持续性的重要性。",
      "translated_title": "打破互联网的漏洞内幕：Log4Shell不为人知的故事",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Log4Shell proved that open source security isn't guaranteed and isn’t just a code problem. It's about supporting, enabling, and empowering the people behind the projects that build our digital infrastructure.</p>\n<p>The post <a href=\"https://github.blog/open-source/inside-the-breach-that-broke-the-internet-the-untold-story-of-log4shell/\">Inside the breach that broke the internet: The untold story of Log4Shell</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "通过这9个开源AI和MCP项目加速开发者生产力 (原标题: Accelerate developer productivity with these 9 open source AI and MCP projects)",
      "link": "https://github.blog/open-source/accelerate-developer-productivity-with-these-9-open-source-ai-and-mcp-projects/",
      "pubDate": "Fri, 17 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-17T16:00:00.000Z",
      "creator": "Kevin Crosby",
      "summary": "### 通过9个开源AI和MCP项目加速开发者生产力\n\n随着模型上下文协议（MCP）的兴起，开发者们正在发现AI和智能体与工具、代码库乃至浏览器交互的革命性方式。基于这项核心技术，许多项目（如浏览器扩展和代码编辑器工具）正在实现AI原生工作流，并解锁一类全新的智能体工具：专注于MCP驱动能力的创新生态系统和新项目正在改变我们的工作方式。\n\n微软开源项目办公室（OSPO）与GitHub Copilot和VS Code团队合作，共同赞助了九个项目，旨在加速开源领域的创新、安全性和可持续性。这些项目围绕以下三个主要主题展开：\n\n#### 1. 框架和平台集成：面向实际用例的生态系统集成\n\n这些项目旨在将MCP能力集成到流行的框架和生态系统中，用于AI原生工具，帮助MCP与广泛使用的平台结合，并使智能体能够与真实世界的应用程序和工作流进行交互。\n\n*   **fastapi_mcp**：以最少的设置、认证和有限的配置，通过统一的基础设施，将安全的FastAPI端点作为MCP工具暴露。\n*   **nuxt-mcp**：为Nuxt开发者提供路由检查和SSR调试工具，使团队更容易让模型更好地理解Vite/Nuxt应用程序。\n*   **unity-mcp**：允许与Unity游戏引擎API进行接口交互，实现AI辅助游戏开发，为AI工具提供管理资产、控制场景、编辑脚本和自动化Unity内任务的能力。\n\n#### 2. 开发者体验和AI增强编码：AI优先的开发者生产力\n\n这些项目通过改进开发者工作流、语义代码理解和安全代码执行，赋能AI、大型语言模型（LLM）和智能体，使其成为智能IDE助手和代码编辑器。\n\n*   **context7**：直接从代码中提取最新、版本特定的文档和代码示例，并将其直接插入到AI和LLM的提示上下文中。\n*   **serena**：为智能体驱动的编码工具包提供语义代码编辑和检索能力。\n*   **Peekaboo**：Swift代码分析工具，将屏幕上的内容转化为可操作的AI上下文，以创建完整的GUI自动化，并可用于AI助手。\n*   **coderunner**：将LLM转化为即时、本地执行伙伴，在机器上预配置的沙盒中编写和运行代码，自动安装工具，直接读取文件，并返回输出和生成的工件。\n\n#### 3. 自动化、测试和编排：MCP基础设施的可靠性和质量保证\n\n这些项目旨在将MCP基础设施扩展到生产级工具，用于自动化管道，并提供强大的测试和调试工具。它们有助于确保MCP能够大规模运行。\n\n*   **n8n-mcp**：一个超优化的平台，通过简化工作流创建和编排来增强n8n的工作流自动化。它集成了AI模型，帮助用户更好地理解和使用n8n节点。\n*   **inspector**：一个用于测试和调试MCP服务器的工具，通过检查协议握手、工具、资源、提示和OAuth流程。它提供内置的LLM游乐场，并允许运行评估模拟以捕获安全或性能回归。\n\n#### 总结与展望\n\n开发者们正以AI和MCP的力量以惊人的速度进行构建。这些项目代表了MCP生态系统和社区中增长最快的开发者工具。它们是开发者使用并关心的工具。GitHub Copilot和VS Code团队很高兴能赞助更多推动MCP等创新以实现智能体原生开发的开源项目。\n\n鼓励开发者通过GitHub Sponsors支持这些项目，并探索使用VS Code和GitHub Copilot体验MCP。\n\n---\n**作者：**\n![Kevin Crosby](https://avatars.githubusercontent.com/u/6313838?v=4&s=200)\nKevin Crosby，开源资助高级总监\n\n**相关文章：**\n探索更多来自GitHub的内容：\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) **文档**：掌握GitHub所需的一切，一站式获取。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) **GitHub**：在GitHub上构建未来，这里是任何人、任何地方构建任何东西的平台。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) **客户案例**：了解使用GitHub进行构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) **GitHub Universe 2025**：最后机会：节省700美元购买Universe现场通行证，于10月28-29日在旧金山与我们相聚。",
      "shortSummary": "模型上下文协议（MCP）正在革新AI与工具的交互方式。微软OSPO、GitHub Copilot和VS Code团队赞助了九个开源项目，旨在加速开发者生产力。这些项目分为三大类：框架和平台集成、AI增强的开发者体验、以及MCP基础设施的自动化、测试和编排。它们共同推动AI原生工作流和智能体工具的发展，赋能开发者高效构建。",
      "translated_title": "通过这9个开源AI和MCP项目加速开发者生产力",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/6313838?v=4&s=200",
          "alt": "Kevin Crosby",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>GitHub Copilot and VS Code teams, along with the Microsoft Open Source Program Office (OSPO), sponsored these nine open source MCP projects that provide new frameworks, tools, and assistants to unlock AI-native workflows, agentic tooling, and innovation.</p>\n<p>The post <a href=\"https://github.blog/open-source/accelerate-developer-productivity-with-these-9-open-source-ai-and-mcp-projects/\">Accelerate developer productivity with these 9 open source AI and MCP projects</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如果你是内向者，如何参加GitHub Universe（或任何技术大会） (原标题: How to navigate GitHub Universe (or any tech conference) if you’re an introvert)",
      "link": "https://github.blog/news-insights/company-news/how-to-navigate-github-universe-or-any-tech-conference-if-youre-an-introvert/",
      "pubDate": "Thu, 16 Oct 2025 16:14:02 +0000",
      "isoDate": "2025-10-16T16:14:02.000Z",
      "creator": "GitHub Staff",
      "summary": "# 如何作为内向者参加GitHub Universe（或任何技术大会）\n\n对于内向、焦虑或习惯长时间在电脑前工作的人来说，大型技术大会可能令人望而生畏。然而，GitHub Universe旨在为这类人群提供舒适的体验，它提供了多种参与方式，让参会者可以按照自己的节奏学习和交流。大会通过精心设计的活动，确保所有人的体验都更加舒适、安全和激动人心。\n\n以下是内向者有效参加GitHub Universe（或任何技术大会）的实用建议：\n\n## 1. 参加小型会议或研讨会\n与其选择最大、最繁忙的会议，不如选择小型研讨会、小众专题讨论和分组会议。这些小型活动通常能促进更深入的联系和对话，避免在人群中感到迷失。\n*   **GitHub Universe特色：** 互动式研讨会（参与人数少，对话深入）、演示型沙盒会议（包含实践练习，保持思维活跃）、讨论休息室（2-3名主持人引导小组讨论特定主题，注重积极参与和协作）。\n![与会者在演示室的会议期间使用笔记本电脑工作。](https://github.blog/wp-content/uploads/2025/10/image8.jpg?resize=1024%2C683)\n\n## 2. 寻找安静区和充电空间\n内向者需要独处来恢复精力。大会提供了专门的休息室和充电空间，让参会者无需在错过内容和保护个人平静之间做选择。\n*   **GitHub Universe特色：** 设有安静室，用于无手机的放松、冥想和祈祷。提供充足的饮料、小吃和餐食，以保持精力。建议到户外欣赏Fort Mason的海滨景色，呼吸新鲜空气，在会议间隙放松身心。\n![日落时分海湾景色，水面上有鸟儿飞翔，背景是群山。](https://github.blog/wp-content/uploads/2025/10/image7-1.jpg?resize=1024%2C683)\n\n## 3. 参与策划的社交活动\n如果大型、无主题的社交活动令人望而却步，可以寻找有引导或主题的活动，这些活动通常有明确的对话起点，更容易建立联系。\n*   **GitHub Universe特色结构化社交点：**\n    *   **Recess!：** 与志同道合的参会者交流，分享代码之外的兴趣爱好（如乐高爱好者、Swiftie粉丝）。\n    *   **Makerspace：** 创作互动项目，涵盖艺术、AI、音乐和机器人等领域，提供一个动手实践的平台。\n    *   **Open Source Zone：** 与开源项目的贡献者和维护者建立联系，探索项目，并庆祝社区主导软件的力量。\n![一个人在桌子旁组装色彩鲜艳的乐高建筑，包括一座塔楼和一栋房子，旁边有整理好的砖块容器。](https://github.blog/wp-content/uploads/2025/10/image3-1.jpg?resize=1024%2C683)\n\n## 4. 设定个人目标和界限\n提前确定参会目标，查看议程，明确必看会议和想见的人。务必安排充足的休息时间，无需感到内疚。\n*   **GitHub Universe工具：** 提供议程构建器、精选日程和内容轨道，帮助参会者根据兴趣和目标制定计划，并按照自己的节奏进行。\n![一位身穿格子西装的会议与会者在拥挤的展厅中阅读活动地图。](https://github.blog/wp-content/uploads/2025/10/image4-1.jpg?resize=1024%2C683)\n\n## 5. 携带破冰工具\n穿着与个人兴趣相关的T恤、佩戴徽章或贴纸，可以更容易地被他人搭讪，也可能增加自己主动与人交流的信心。\n*   **GitHub Universe周边：** 大会周边商品和社区贴纸旨在帮助引发自然、低压力的对话。如果会前没有，也可以在活动当天前往GitHub商店购买最新系列商品。\n![两位与会者在技术会议上交谈，其中一人佩戴GitHub Star标签并戴蓝色帽子。](https://github.blog/wp-content/uploads/2025/10/image6-1.jpg?resize=1024%2C683)\n\n## 6. 通过线上直播或点播会议参与\n如果亲自到场仍然不适，可以选择虚拟参加GitHub Universe，或稍后按需观看主题演讲和精选会议录像。\n*   **目标：** 确保参会者能以最适合自己的方式参与并保持联系。\n*   **注意：** 并非所有技术大会都提供此选项，但值得查询是否有从家中学习和连接的方式。\n![演讲者向大量观众展示GitHub模型，屏幕上显示“GitHub上新一代AI工程师”。](https://github.blog/wp-content/uploads/2025/10/image5-1.jpg?resize=1024%2C683)\n\n## 总结\n无论选择何种方式参加GitHub Universe——亲临现场、虚拟参与、只参加几个研讨会，或介于两者之间——一切都由个人掌控。大会希望无论是内向者还是外向者，或介于两者之间，都能拥有愉快的体验。\n![通过一个色彩鲜艳的艺术装置框架看到的恶魔岛景色，海滨有游客剪影。](https://github.blog/wp-content/uploads/2025/10/image2-1.jpg?resize=1024%2C683)",
      "shortSummary": "对于内向者而言，参加技术大会可能令人不知所措。GitHub Universe特别设计了多种方式，以确保所有参会者都能舒适地学习和交流。文章提供了六项实用建议：选择小型会议、寻找安静的充电空间、参与有组织的社交活动、提前设定个人目标和界限、携带破冰工具，以及利用线上直播或点播选项。这些策略旨在帮助内向者按照自己的节奏，最大化会议体验，确保无论亲临现场还是线上参与，都能获得愉快的经历。",
      "translated_title": "如果你是内向者，如何参加GitHub Universe（或任何技术大会）",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image8.jpg?resize=1024%2C683",
          "alt": "Attendees working on laptops during conference session in presentation room.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image7-1.jpg?resize=1024%2C683",
          "alt": "Sunset view across the bay with birds flying over water and hills in background.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image3-1.jpg?resize=1024%2C683",
          "alt": "Person at table assembling colorful LEGO buildings including a tower and house with organized brick containers.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image4-1.jpg?resize=1024%2C683",
          "alt": "Conference attendee in checkered blazer reading event map in crowded exhibition hall.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image6-1.jpg?resize=1024%2C683",
          "alt": "Two attendees having conversation at tech conference, one wearing GitHub Star tag and blue cap.",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image5-1.jpg?resize=1024%2C683",
          "alt": "Speaker presenting GitHub Models to large audience with \"A new generation of AI engineers on GitHub\" displayed on screen.",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image2-1.jpg?resize=1024%2C683",
          "alt": "View of Alcatraz Island through a colorful art installation frame with visitors silhouetted at waterfront.",
          "title": "",
          "position": 7
        },
        {
          "url": "https://avatars.githubusercontent.com/u/9919?v=4&s=200",
          "alt": "GitHub Staff",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>If alone time is your love language—don’t worry, it’s ours too—you can still attend, learn from, and enjoy big events like GitHub Universe. Here are some practical tips on how.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/how-to-navigate-github-universe-or-any-tech-conference-if-youre-an-introvert/\">How to navigate GitHub Universe (or any tech conference) if you’re an introvert</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "Copilot：更快、更智能，并为您的当前工作方式而生 (原标题: Copilot: Faster, smarter, and built for how you work now)",
      "link": "https://github.blog/ai-and-ml/github-copilot/copilot-faster-smarter-and-built-for-how-you-work-now/",
      "pubDate": "Wed, 15 Oct 2025 15:00:00 +0000",
      "isoDate": "2025-10-15T15:00:00.000Z",
      "creator": "Ashley Willis",
      "summary": "GitHub Copilot最初以代码自动补全工具的形式出现，现已发展成为开发者最广泛使用的AI工具，根据Pragmatic Engineer的调查，它已帮助开发者接受了超过30亿次代码建议，每月协助数百万次代码审查并贡献120万次拉取请求。Copilot的目标是帮助开发者将待办事项（TODOs）转化为已提交的代码，并专注于提供稳定而非前沿的生产级解决方案。\n\n### 从自动补全到实际协作\n\n如果说2024年是展示AI可能性的年份，那么2025年则致力于使其变得实用。Copilot已从一个简单的自动补全功能演变为一个多模态、多模型的助手，能够理解项目并推动其进展。它支持来自不同提供商的多个模型，并快速集成OpenAI和Google Gemini等最新AI模型。这一演变是基于开发者对更强大代理工作流和多文件编辑的需求而实现的，旨在让Copilot更智能，而无需用户进行安装或配置。\n\n### 从构思到合并，创纪录的速度\n\n过去一年，原始速度和代理工作流定义了新一代AI工具。Copilot对此做出了回应，引入了多项功能以加速开发流程：\n\n*   **代理模式（Agent mode）**：Copilot现在可以处理跨文件任务、运行命令、重构整个模块，并建议终端操作，所有这些都无需离开编辑器。\n*   **编码代理（Coding agent）**：将问题分配给Copilot，它将起草包含代码、测试和项目上下文的拉取请求，每月贡献约120万次拉取请求。\n*   **下一编辑建议（Next-edit suggestions）**：Copilot预测用户将进行的下一个更改，并以内联方式提供建议，一键即可完成。\n*   **低延迟补全（Low-latency completions）**：大多数Copilot响应在400毫秒内渲染，速度快到用户几乎察觉不到。\n*   **Copilot CLI**：将Copilot的智能引入终端，无需切换窗口即可进行设置、调试和脚本编写。\n*   **多模型路由（Multi-model routing）**：Copilot允许用户访问来自领先AI公司的多个大型语言模型（LLMs），以适应不同任务的需求。\n\n![GitHub Copilot功能列表](https://github.blog/wp-content/uploads/2025/10/FeatureList_v6.png?resize=1232%2C2146)\n\n### 随工作流扩展的AI\n\nCopilot无缝集成到开发者已使用的GitHub生态系统中，并随之扩展：\n\n*   **JetBrains + VS Code + CLI 兼容性**：无论在何处构建，都能获得相同的Copilot体验。\n*   **自定义指令（Custom instructions）**：通过`.copilot-instructions.md`文件，可以教导Copilot项目特定的命名约定、测试框架和注释格式。\n*   **GitHub MCP Server**：允许任何AI工具安全地访问GitHub上下文（拉取请求、问题、Actions），而无需离开GitHub。\n*   **工作区提示文件（Workspace prompt files）**：为团队提供可重用的蓝图，以确保提示的一致性。\n*   **2000万+开发者网络**：每一次Copilot更新都通过全球最大的真实开发者数据和反馈网络进行改进。\n\nCopilot不是一个需要“添加”到GitHub的独立工具，它是GitHub全栈开发平台的一部分，不仅帮助编写代码，还协助构建、测试、保护和发布软件。\n\n### 更智能、更清晰、更安全的代码\n\nCopilot在提升代码质量和安全防护方面投入了大量精力：\n\n*   **Copilot Autofix**：自动检测并修补漏洞，仅今年就修复了超过一百万个漏洞。\n*   **代码审查（Code review）**：在拉取请求中总结差异、标记逻辑错误并建议修复，每月在GitHub上支持数百万次代码审查。\n*   **改进的模型推理（Improved model reasoning）**：生成更具可读性、通过测试、更少lint错误和回归的代码。\n*   **CodeQL集成**：与GitHub Advanced Security、Dependabot和GitHub Actions集成，确保供应链的稳固性。\n*   **内置隐私**：通过企业隔离、审计日志和租户级控制，确保用户工作内容的私密性。\n\n研究表明，使用Copilot编写的新代码通常具有更高的可读性、可靠性和可维护性。Copilot由保护全球最大开源生态系统和90%以上财富100强公司的相同安全堆栈提供支持。\n\n### Copilot与其他工具的对比\n\nCopilot的独特之处在于其深度集成于GitHub，使其贴近开发者所做的所有事情，包括拉取请求、GitHub Actions工作流或CI/CD管道。这意味着：\n\n*   **无需迁移、新IDE或新习惯**：Copilot存在于开发者已使用的工具中。\n*   **全栈感知**：将拉取请求、审查、测试和工作流整合到同一对话中。\n*   **端到端覆盖**：Copilot为实际的软件交付提供AI辅助。\n\n![GitHub Copilot从2024到2025的飞跃](https://github.blog/wp-content/uploads/2025/10/LeapForward_v5.png?resize=1232%2C2104)\n\n### 未来展望\n\nGitHub Universe 2025将发布更多关于更智能代理工作流、更深度的多模型集成和下一代安全功能的新闻。Copilot将继续致力于帮助每位开发者更快地提交代码，而不是追逐待办事项。",
      "shortSummary": "GitHub Copilot已从代码补全发展为开发者最常用的AI工具，每月协助数百万次代码审查和拉取请求。它通过代理模式、编码代理、低延迟补全和CLI等功能，显著加速开发流程。Copilot深度集成于GitHub生态系统，支持多模型、自定义指令，并大幅提升代码质量与安全性。它帮助开发者从构思到发布全流程，无需切换工具，实现更快、更智能、更安全的软件交付，是GitHub全栈开发平台的核心组成部分。",
      "translated_title": "Copilot：更快、更智能，并为您的当前工作方式而生",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/FeatureList_v6.png?resize=1232%2C2146",
          "alt": "A table showing how GitHub Copilot can help you code faster (Agent mode, Coding agent, Next edit suggestions, Latency improvements, Model choice, Copilot CLI), Build at scale (JetBrains + VS Code + CLI parity, Custom instructions, GitHub MCP Server, 20M+ developers), and Ship quality (Copilot Autofix, Code review, Improved model reasoning, Security that works, Built-in privacy).",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/LeapForward_v5.png?resize=1232%2C2104",
          "alt": "A table demonstrating GitHub Copilot's leap forward from 2024 to 2025: Single model to Multi-model support, Single-file edits to Agent mode with multi-file reasoning, Basic completions to Next-edit suggestions and inline task automation, Chat in VS Code to IDE + JetBrains + CLI, Limited customization to Project-level instructions & workspace prompts, Text only to Image, diagram, and UI inputs, Early security hints to Copilot Autofix & deeper security integrations, and Competitive lag to 400ms responses & GitHub MCP Server.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://avatars.githubusercontent.com/u/3139143?v=4&s=200",
          "alt": "Ashley Willis",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 7
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Discover how GitHub Copilot has evolved from a high-powered autocomplete tool to a powerful, multi-model agentic assistant.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/copilot-faster-smarter-and-built-for-how-you-work-now/\">Copilot: Faster, smarter, and built for how you work now</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub Copilot 和 AI 代理如何拯救遗留系统 (原标题: How GitHub Copilot and AI agents are saving legacy systems)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-github-copilot-and-ai-agents-are-saving-legacy-systems/",
      "pubDate": "Tue, 14 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-14T16:00:00.000Z",
      "creator": "Andrea Griffiths",
      "summary": "# GitHub Copilot 和 AI 代理如何拯救遗留系统\n\n## 遗留系统现代化挑战\n文章指出，COBOL 等遗留系统（如处理数百万 ATM 交易的主机系统）虽然已运行 65 年，但仍在支撑全球最关键的业务。然而，COBOL 开发者日益稀缺，而现有 2000 亿行 COBOL 代码急需现代化。GitHub Copilot 和自主 AI 代理为这一挑战提供了新的解决方案。\n\n## AI 驱动的现代化方法\n微软的 Julia Kordick 团队展示了无需学习 COBOL 即可实现系统现代化的方法。关键在于将 AI 专业知识与拥有数十年领域知识的专家相结合，AI 负责设计智能解决方案，专家提供遗留系统知识。这种合作是成功的关键。\n\n## AI 驱动的遗留系统现代化三步框架\nJulia 团队开发了一个系统化的框架，适用于任何遗留系统现代化项目：\n\n### 1. 代码准备（逆向工程）\n*   **问题**：组织往往不清楚其遗留代码的具体功能。\n*   **解决方案**：利用 GitHub Copilot 作为“考古工具”进行代码分析。\n*   **Copilot 功能**：\n    *   从遗留文件中提取业务逻辑。\n    *   将所有内容以 Markdown 格式文档化，便于人工审查。\n    *   自动识别调用链和依赖关系。\n    *   清理不相关的注释和历史日志。\n    *   根据需要添加额外注释。\n*   **专家提示**：始终由人类专家审查 AI 生成的分析结果，领域知识对业务上下文至关重要。\n*   **Copilot 生成示例**：包括文件清单、业务目的（如客户账户验证、余额计算、交易日志生成）和发现的依赖项（如 DB2 数据库连接、外部验证服务调用、遗留打印队列系统）。\n\n### 2. 丰富（使代码易于 AI 理解）\n*   **添加上下文**：帮助 AI 更好地理解代码。\n*   **关键步骤**：\n    *   **翻译**：将非英语注释翻译成英语，因为模型在英语上下文中表现更好。\n    *   **结构分析**：COBOL 具有确定性模式（如 IDENTIFICATION DIVISION、ENVIRONMENT DIVISION、DATA DIVISION、PROCEDURE DIVISION 四个固定分区）。可以要求 GitHub Copilot 映射这些分区并总结其功能，或列出数据结构、提取业务逻辑。AI 可以解析这些结构化部分并用通俗易懂的语言解释，无需理解 COBOL 语法。\n    *   **文档作为事实来源**：将所有 AI 生成的内容保存为 Markdown 文件，作为主要参考资料。\n*   **专家提示**：COBOL 的冗长性反而是优势，如 `ADD TOTAL-SALES TO ANNUAL-REVENUE` 语句几乎是自文档化的，可要求 Copilot 将这些业务规则提取为自然语言描述。\n\n### 3. 自动化辅助（规模化流程）\n*   从交互式使用 Copilot 转向使用 AI 代理构建自动化工作流。\n*   **Microsoft Semantic Kernel 框架**：用于编排多个专业代理，每个代理负责特定任务，协同处理复杂性。\n*   **实践中的编排示例**：\n    *   **调用链映射**：生成 Mermaid 图表展示文件间的交互。一个代理读取 COBOL 文件，另一个追踪程序间的 `CALL` 语句，第三个生成可视化图表，从而无需手动追踪即可获得整个系统映射。\n    *   **测试驱动现代化**：代理 1 提取业务逻辑，代理 2 生成验证该逻辑的测试用例，代理 3 生成通过这些测试的现代代码。测试成为迁移过程中的安全网。\n    *   **依赖优化**：识别可替换为现代等效项的实用类和库。代理分析第三方 COBOL 库，检查是否存在现代替代方案，并指出简化迁移的机会。\n*   **专家提示**：在进行任何更改之前，使用 Mermaid 图表可视化复杂的依赖关系，有助于及早发现边缘情况。\n*   **Mermaid 图表示例**：\n    ![COBOL 到 Java 现代化代理工作流流程图](https://github.blog/wp-content/uploads/2025/10/mermaid.png?resize=475%2C908)\n\n## 现实检验：并非万能药\nJulia 坦言，AI 并非解决所有主机问题的“一键式”方案。人类必须参与验证，每个 COBOL 代码库都是独特且复杂的，完全自动化可能还需要至少五年。但即便如此，AI 仍能带来巨大进展。\n\n## Azure 示例框架\nJulia 团队已开源其整个框架（基于 Microsoft Semantic Kernel），包括：\n*   多个专业代理（如 DependencyMapperAgent, COBOLAnalyzerAgent, JavaConverterAgent）。\n*   成本跟踪（每 1000 行分析通常 2-5 美元）。\n*   内置的人工验证点。\n*   `doctor.sh` 配置和测试脚本，可快速启动。\n*   **快速设置**：通过 `git clone`、`cd`、`./doctor.sh setup` 和 `./doctor.sh run` 即可开始现代化过程。\n\n## 改变一切的商业案例\n这不仅仅是技术债务问题，更是关乎企业生存。传统方法（昂贵顾问、手动转换、生成难以维护的代码）效率低下。AI 驱动的方法则能帮助团队理解业务逻辑、生成可读的现代代码，并保持对知识产权的控制，使团队在过程中学习并维护代码。\n\n## 成为现代化英雄的路径\n*   **从小处着手**：识别小型遗留系统（少于 5000 行），用 GitHub Copilot 分析单个文件，文档化并分享。\n*   **构建 AI 工具包**：尝试 Azure 示例框架，学习代码分析的提示工程，实践迭代现代化技术。\n*   **超越代码**：考虑云原生设计的非功能性需求，规划分布式系统架构。\n\n## 现在是最佳时机\nAI 不会取代开发者专业知识，而是放大它。COBOL 专家提供领域知识，现代开发者带来架构视角，AI 提供规模化的模式识别和翻译能力。三者结合，遗留系统现代化将从不可能变为可实现。",
      "shortSummary": "GitHub Copilot 和 AI 代理正革新遗留系统现代化。面对 COBOL 等老旧系统和开发者短缺，AI 提供了一个三步框架：代码准备（逆向工程）、代码丰富（使 AI 易于理解）和自动化辅助（通过 AI 代理规模化）。该方法结合了 AI 的分析能力与人类领域知识，帮助企业理解业务逻辑，生成可维护的现代代码，从而有效解决技术债务和业务生存挑战。虽然人类验证仍不可或缺，但 AI 大幅加速了现代化进程。",
      "translated_title": "GitHub Copilot 和 AI 代理如何拯救遗留系统",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/mermaid.png?resize=475%2C908",
          "alt": "Flowchart showing the COBOL to Java modernization agent workflow. Seven boxes connected by arrows flow top to bottom: COBOLAnalyzerAgent, DependencyMapperAgent, Business Logic Extractor, Test Generator, JavaConverterAgent, Human Validation, and Production-Ready Java Quarkus Output.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg",
          "alt": "Andrea Griffiths",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>GitHub Copilot and AI agents are making legacy COBOL systems accessible to modern developers.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-github-copilot-and-ai-agents-are-saving-legacy-systems/\">How GitHub Copilot and AI agents are saving legacy systems</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-10-25T04:31:44.359Z"
}