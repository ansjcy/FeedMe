{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "利用开源和AI构建个人应用 (原标题: Building personal apps with open source and AI)",
      "link": "https://github.blog/open-source/maintainers/building-personal-apps-with-open-source-and-ai/",
      "pubDate": "Fri, 12 Sep 2025 16:00:00 +0000",
      "isoDate": "2025-09-12T16:00:00.000Z",
      "creator": "Kedasha Kerr",
      "summary": "## 利用开源和AI构建个人应用\n\n文章探讨了如何结合开源（Open Source）和人工智能（AI）的力量，来构建满足个人需求的定制化应用程序，从而提高效率、减少心智负担并增加开发乐趣。\n\n### 定制化小工具的巨大价值\n\n作者指出，最有效的解决方案往往是那些简单、精准的工具，它们能自动化重复性任务，显著节省时间和精力。例如：\n\n*   **自动化内容整理：** 作者的同事Cassidy Williams编写了一个脚本，能将各种格式的通讯订阅者答案转换为Markdown列表，省去了繁琐的手动整理工作。\n*   **数据格式转换：** 作者本人也开发了一个将CSV转换为Markdown的工具，虽然不复杂，但极大地提高了工作效率。\n\n这些看似不起眼的小工具，通过将人们从重复性劳动中解放出来，使其能专注于更有意义的工作，从而产生巨大的影响。\n\n### 开源：创新的游乐场\n\n开源社区为个人应用开发提供了丰富的资源和协作环境：\n\n*   **社区力量：** 开发者在遇到问题时，很可能在开源社区中找到已有的解决方案。GitHub是发现和利用这些工具的宝库。\n*   **修改与定制：** 即使没有完全符合需求的工具，开发者也可以通过“fork”现有项目并进行修改，使其适应自己的工作流程。\n*   **分享与贡献：** 将个人项目开源不仅能帮助自己，还能惠及他人，甚至激发社区贡献，为项目带来新功能（例如，作者的待办事项应用在开源后，社区成员建议添加了“恢复任务”按钮）。\n*   **鼓励“fork”：** 作者鼓励用户根据自己的需求“fork”项目，实现个性化定制。\n\n### AI：效率倍增器\n\n如果说开源是基础，那么AI就是个人软件开发的“火箭燃料”：\n\n*   **加速开发流程：** AI工具（如GitHub Copilot）能够协助项目搭建、故障排除，甚至解释复杂的代码库，极大地加速了开发进程。\n*   **降低技术门槛：** AI使得即使是不熟悉前端开发的开发者，也能在短时间内构建出功能性的仪表盘。\n*   **促进学习与创新：** AI不是学习的替代品，而是促进者，它能帮助开发者突破瓶颈，加速想法的实现。\n\n### 降低心智负担，提升开发乐趣\n\n构建个人工具最大的益处在于减少了心智负担。当工作流程中的一部分被自动化处理后，开发者可以将精力集中在更具创造性或更有意义的任务上。AI作为“开发伙伴”，能够指出错误并提供解决方案，使得软件开发过程变得更加愉快，减少了因调试难题而产生的挫败感。\n\n### 工具的安全、分享与成长\n\n当个人工具被开源并被他人使用时，安全性与可维护性成为重要的考量。此时，社区的协作作用尤为突出：\n\n*   **社区协作：** 其他开发者可能会发现问题、提出改进建议，甚至将项目带向新的方向。\n*   **清晰的贡献指南：** 作者建议在贡献指南中明确，如果用户想添加不在个人路线图上的功能，可以自由“fork”项目进行实现。\n\n构建、分享并看着自己的工具在社区中成长，是作为开发者最有成就感的部分之一。在开源和AI的助力下，现在是创造所需解决方案并帮助他人的最佳时机。\n\n### 作者信息\n\n*   **Kedasha Kerr** 是GitHub的开发者倡导者，乐于与更广泛的开发者社区分享经验和学习心得。\n    ![Kedasha Kerr](https://avatars.githubusercontent.com/u/47188731?v=4&s=200)\n\n### 相关资源\n\n*   **Git 2.51亮点**\n*   **GitHub文档：** 掌握GitHub所需的一切。 ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n*   **GitHub平台：** 在GitHub上构建未来。 ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n*   **客户案例：** 了解使用GitHub进行构建的公司和工程团队。 ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n*   **GitHub Universe 2025：** 注册参加10月28-29日在旧金山举行的活动。 ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)",
      "shortSummary": "文章阐述了利用开源和AI构建个人应用的巨大价值。开源提供了丰富的社区资源和协作机会，允许开发者发现、修改并分享工具。AI（如GitHub Copilot）则作为效率倍增器，加速开发进程，降低技术门槛，并减少心智负担。这种结合使得创建定制化工具变得更加愉快、高效和易于实现，同时促进了开发者社区内的分享与成长，让开发者能专注于更有创造性的工作。",
      "translated_title": "利用开源和AI构建个人应用",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/47188731?v=4&s=200",
          "alt": "Kedasha Kerr",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Hear about the personal tools we use to improve our workflows (and how to get started building your own) on this episode of the GitHub Podcast.</p>\n<p>The post <a href=\"https://github.blog/open-source/maintainers/building-personal-apps-with-open-source-and-ai/\">Building personal apps with open source and AI</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub 可用性报告：2025 年 8 月 (原标题: GitHub Availability Report: August 2025)",
      "link": "https://github.blog/news-insights/company-news/github-availability-report-august-2025/",
      "pubDate": "Thu, 11 Sep 2025 19:53:44 +0000",
      "isoDate": "2025-09-11T19:53:44.000Z",
      "creator": "Jakub Oleksy",
      "summary": "# GitHub 2025 年 8 月可用性报告\n\n本报告详细介绍了 GitHub 在 2025 年 8 月经历的三起导致服务性能下降的事件。\n\n## 1. 2025 年 8 月 5 日事件 (持续 32 分钟)\n\n*   **时间**: UTC 时间 8 月 5 日 15:42 开始，持续 32 分钟。\n*   **原因**: 在生产数据库中执行了一次迁移，以删除一个支持拉取请求功能的表中的列。尽管该列已不再直接使用，但 GitHub 的 ORM（对象关系映射）在部分拉取请求查询中仍引用了该已删除的列。\n*   **影响**: 导致推送、Webhook、通知和拉取请求的错误率升高。对所有 Web 和 REST API 流量的影响在高峰期达到约 4%。\n*   **缓解措施**: 部署了一个更改，指示 ORM 忽略已删除的列。大多数受影响的服务在 UTC 时间 16:13 恢复。\n*   **次生事件**: 由于修复未能应用于所有自定义和 Canary 环境，导致了第二次事件，影响了约 0.1% 的拉取请求流量。该次生事件在 UTC 时间 19:45 完全解决。\n*   **经验教训与未来行动**: 尽管迁移有渐进式部署和确认门等保护措施，但此次事件暴露了应用程序监控的不足。GitHub 将增加额外的自动化和安全措施，以防止未来发生类似事件，减少人工干预。正在努力简化跨环境的某些类型更改，以避免再次发生次生事件。\n\n## 2. 2025 年 8 月 12 日事件 (持续 3 小时 44 分钟)\n\n*   **时间**: UTC 时间 8 月 12 日 13:30 至 17:14。\n*   **原因**: 负载均衡器与搜索主机之间出现间歇性连接问题。重试逻辑最初掩盖了问题，但重试队列最终使负载均衡器不堪重负，导致故障。\n*   **影响**: GitHub 搜索服务性能下降。用户遇到不准确或不完整的搜索结果，某些页面（如问题、拉取请求、项目和部署）加载失败，以及组件（如 Actions 工作流和标签过滤器）损坏。大部分用户影响发生在 UTC 时间 14:00 至 15:30 之间，当时高达 75% 的搜索查询失败，搜索结果更新延迟长达 100 分钟。\n*   **缓解措施**: 在 UTC 时间 15:30，通过限制搜索索引管道以减少负载并稳定重试，缓解了查询失败。在 UTC 时间 17:14，通过自动重启一个搜索主机，解决了连接故障，使系统其余部分恢复。\n*   **经验教训与未来行动**: 改进了内部监控器和操作手册。调整了搜索集群负载均衡器，以进一步缓解此类故障模式的再次发生。识别并解决了负载均衡层中的配置问题。\n\n## 3. 2025 年 8 月 27 日事件 (持续 46 分钟)\n\n*   **时间**: UTC 时间 8 月 27 日 20:35 至 21:17。\n*   **原因**: 在生产数据库中执行了一次迁移，以删除一个支持 Copilot 功能的表中的列。与 8 月 5 日的事件类似，ORM 仍引用了已删除的列。\n*   **影响**: Copilot 服务平均 36% 的请求失败，峰值失败率高达 77%。约 2% 的非 Copilot Web 和 REST API 流量请求失败。\n*   **缓解措施**: 在 UTC 时间 21:15，对生产模式应用了修复。到 UTC 时间 21:17，所有服务完全恢复。\n*   **经验教训与未来行动**: 尽管正在进行修复以避免此类情况，但未能及时完成以防止第二次事件。GitHub 已立即实施了对所有删除列操作的临时阻止，作为短期解决方案。将增加更多安全措施以防止未来发生类似问题。正在实施优雅降级机制，以确保 Copilot 问题不会影响产品其他功能。\n\n## 更多信息\n\n*   **作者**: ![Jakub Oleksy](https://avatars.githubusercontent.com/u/6147691?v=4&s=200) Jakub Oleksy\n*   **相关资源**:\n    *   **文档**: ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) 掌握 GitHub 所需的一切，尽在一处。前往文档\n    *   **GitHub**: ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) 在 GitHub 上构建未来，这里是任何人、任何地点构建任何事物的平台。开始构建\n    *   **客户案例**: ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) 了解使用 GitHub 进行构建的公司和工程团队。了解更多\n    *   **GitHub Universe 2025**: ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) 最后机会：节省 700 美元购买 Universe 现场通行证，于 10 月 28-29 日在旧金山与我们相聚。立即注册",
      "shortSummary": "GitHub在2025年8月共发生三起服务降级事件。8月5日，因数据库列删除后ORM引用，导致拉取请求等服务受影响，已通过修复并改进监控解决。8月12日，搜索服务因负载均衡器连接问题而降级，导致查询失败和结果延迟，通过限制索引和主机重启恢复。8月27日，Copilot服务因类似数据库列删除问题导致高错误率，已实施临时阻止并计划优雅降级。GitHub正加强自动化、监控和配置管理以防范未来事件。",
      "translated_title": "GitHub 可用性报告：2025 年 8 月",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/6147691?v=4&s=200",
          "alt": "Jakub Oleksy",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>In August, we experienced three incidents that resulted in degraded performance across GitHub services.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/github-availability-report-august-2025/\">GitHub Availability Report: August 2025</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub Copilot 编程代理 101：在 GitHub 上开始使用代理工作流 (原标题: GitHub Copilot coding agent 101: Getting started with agentic workflows on GitHub)",
      "link": "https://github.blog/ai-and-ml/github-copilot/github-copilot-coding-agent-101-getting-started-with-agentic-workflows-on-github/",
      "pubDate": "Thu, 11 Sep 2025 16:00:00 +0000",
      "isoDate": "2025-09-11T16:00:00.000Z",
      "creator": "Alexandra Lietzke",
      "summary": "文章介绍了 GitHub Copilot 编程代理，这是一种旨在自动化开发工作流的集成式企业级AI队友。\n\n### 什么是 GitHub Copilot 编程代理？\n\n*   **定义**：一个软件工程（SWE）代理，在后台独立运行以完成分配的任务，类似于一位同行开发者。\n*   **工作方式**：当您分配任务时，它会启动一个由 GitHub Actions 提供支持的完全可定制的开发环境，并可全程跟踪其进度，从问题到拉取请求、审查和批准。\n*   **主要目标**：帮助开发者卸载诸如修复错误、提高测试覆盖率或重构代码等任务，使他们能专注于更感兴趣的工作。\n*   **角色**：作为异步AI队友，旨在增强开发者工作流并端到端地处理分配的任务。\n\n### 如何向编程代理分配任务？\n\n您可以通过多种方式将任务交给编程代理：\n\n*   **GitHub Issues**：在 github.com 或 GitHub Mobile 上将问题分配给 Copilot。\n*   **Visual Studio Code**：通过 GitHub Pull Requests 扩展将任务委托给 Copilot 并跟踪正在运行的任务。\n*   **代理面板**：通过点击“查看所有任务”或直接访问 github.com/copilot/agents，在不离开当前工作的情况下向 Copilot 分配新任务并跟踪现有任务。\n\n### 编程代理可以提供哪些帮助？\n\n编程代理可以处理中低复杂度的任务，让您专注于更重要的事情。它会审查您的仓库上下文，包括相关问题、拉取请求讨论和自定义指令，以帮助您：\n\n*   修复错误\n*   实现增量功能\n*   重构代码\n*   提高测试覆盖率\n*   更新文档\n*   加速秘密扫描\n*   解决技术债务\n\n### 安全性考量\n\n编程代理在设计时充分考虑了安全性，其拉取请求在任何 CI/CD 工作流运行前都需要人工批准，这增加了一层额外的保护。它还内置了审计日志和分支保护，确保每次更改在发布前都经过审查，让您保持控制。\n\n*   **沙盒环境**：在受限互联网访问和有限仓库权限的沙盒环境中运行。\n*   **分支限制**：只能推送到它自己创建的分支（例如 `copilot/*`），确保主分支和团队管理的分支不受影响。\n*   **人工审查**：所有拉取请求都需要独立的人工审查，Copilot 无法批准或合并自己的工作。\n*   **CI/CD 检查**：未经您的批准，GitHub Actions 中的 CI/CD 检查不会运行。\n*   **可追溯性**：所有提交都采用共同作者模式，以实现可追溯性。\n*   **现有策略**：您的现有组织策略和分支保护会自动应用。\n\n### 编程代理与传统 AI 编码助手的区别\n\n*   **传统 AI 编码助手**：代码存储在本地，助手帮助编写代码，但开发者仍需完成大部分繁重工作，如创建分支、编写提交信息、推送更改、打开和编写拉取请求、管理审查等。\n*   **Copilot 编程代理**：自动化开发者工作流，直接在 GitHub 拉取请求工作流中操作。它异步自动化繁琐的任务，如分支创建、提交编写和拉取请求审查，使过程更透明和协作。每一步都被记录、可见并开放给团队输入。\n\n### 编程代理与代理模式的区别\n\n*   **编程代理**：作为异步协作者，像队友一样代表您工作。它是一个 SWE 代理，在 GitHub Actions 中运行，处理您分配的问题，探索仓库以获取上下文，编写代码，通过测试，并打开拉取请求供您审查。它使用一个 Copilot 高级请求和 GitHub Actions 分钟。\n*   **代理模式**：在您选择的 IDE（如 VS Code、JetBrains、Eclipse 和 Xcode）中与您同步配对，作为实时协作者，实时迭代代码、运行测试并修复自己的错误。\n\n### 编程代理如何工作？\n\nCopilot 编程代理直接内置于 GitHub 的原生控制层中，旨在融入您的 GitHub 开发流程。\n\n*   **启动方式**：当您将 GitHub Issue 分配给 Copilot、从代理面板启动任务或从 VS Code 中的 Copilot Chat 启动任务时，它就开始工作。\n*   **工作流程**：代理会打开一个标记为 `[WIP]` 的草稿拉取请求，并在工作过程中推送提交，记录关键步骤，以便您实时跟踪进度。\n*   **用户控制**：尽管编程代理完成工作，但您在整个过程中始终保持控制。您可以通过拉取请求审查进行审查、提供反馈并要求 Copilot 迭代。\n*   **运行环境**：在由 GitHub Actions 提供支持的安全、短暂的开发环境中运行。在此环境中，Copilot 可以探索代码库以获取上下文、进行更改、运行测试和代码检查等。您可以利用 25,000 个社区操作目录，使用所需的工具和依赖项自定义此开发环境。\n\n### 如何在 GitHub Copilot 中使用编程代理？\n\n使用 GitHub 编程代理的过程类似于将任务分配给队友。\n\n*   **分配任务**：在 GitHub.com、GitHub Mobile 或 CLI 上将问题分配给 `@github`。您也可以在 GitHub.com 的任何页面上使用代理面板，或直接从您喜欢的 IDE 中的 GitHub Copilot Chat 或任何支持模型上下文协议（MCP）的工具中提示 Copilot。\n*   **分步指南**：\n    1.  将任务交给 Copilot（例如，分配问题或使用代理面板）。\n    2.  编程代理会打开一个标记为 `[WIP]` 的草稿拉取请求，用于跟踪和完成其工作。\n    3.  一旦 Copilot 完成，它将更新拉取请求，提供清晰的标题和描述，并标记您进行审查。\n    4.  如果需要更改，您可以在草稿拉取请求上留下评论并标记 `@copilot`，编程代理将根据您的反馈进行迭代。\n\n### 通过 MCP 释放 Copilot 的全部潜力\n\n当您将 Copilot 与模型上下文协议（MCP）结合使用时，其功能会显著扩展。MCP 是一个开放标准，允许应用程序与大型语言模型（LLM）共享上下文。\n\n*   **内置支持**：编程代理内置了 Playwright 和 GitHub MCP 服务器，您也可以添加自己的服务器。\n*   **互联网访问**：Copilot 的互联网访问受防火墙限制，但默认规则允许访问 Copilot 用于与 GitHub 交互或下载依赖项的多个主机。\n*   **配置**：仓库管理员可以通过仓库设置中的 JSON 文件配置 MCP 服务器。\n*   **优势**：一旦启用，编程代理将自主使用这些工具，从而简化工作流并减少开发人员的开销。MCP 将 Copilot 变成一个更具上下文感知能力、工具熟练且功能强大的编码伙伴。\n\n### 总结\n\nCopilot 编程代理可以帮助您完成最佳工作。它承担了开发中更繁琐的部分，让您保持专注、更快地行动，并专注于解决实际问题。无论您是开发全新想法还是处理长长的修复列表，编程代理都能帮助您建立动力，减少摩擦，提高流畅性。",
      "shortSummary": "GitHub Copilot 编程代理是一个企业级AI队友，旨在自动化开发工作流。它能独立完成分配的任务，如修复bug、重构代码和提高测试覆盖率，并在GitHub Actions中运行。通过创建草稿拉取请求并等待人工审核，它确保了安全性和可追溯性。与传统AI助手不同，编程代理能异步处理从任务分配到拉取请求的整个流程，从而让开发者专注于更重要的工作，提高效率和协作。",
      "translated_title": "GitHub Copilot 编程代理 101：在 GitHub 上开始使用代理工作流",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Delegate it a task, and coding agent can independently write, run, and test code. Here’s how you can make the most of it.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/github-copilot-coding-agent-101-getting-started-with-agentic-workflows-on-github/\">GitHub Copilot coding agent 101: Getting started with agentic workflows on GitHub</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub Universe 2025 指南：日程已发布！ (原标题: Your guide to GitHub Universe 2025: The schedule just launched!)",
      "link": "https://github.blog/news-insights/company-news/your-guide-to-github-universe-2025-the-schedule-just-launched/",
      "pubDate": "Wed, 10 Sep 2025 20:52:28 +0000",
      "isoDate": "2025-09-10T20:52:28.000Z",
      "creator": "GitHub Staff",
      "summary": "# GitHub Universe 2025：日程已发布，探索AI驱动的开发未来\n\nGitHub Universe 2025 的完整日程现已发布，活动将涵盖AI驱动开发的无限潜力，包括超过100场精彩的会议、演示和小组讨论。如果您尚未注册，以下是您需要了解的关键信息。\n\n## 活动概览\n\n*   **日期与地点**：活动将于 **10月28日至29日** 在加利福尼亚州旧金山的 **Fort Mason Center** 举行。\n*   **主要亮点**：为期两天的活动将汇聚科技界顶尖人才，包括来自 Red Hat、HubSpot、CVS、General Motors 等公司的专家。今年还设有两个演示舞台，其中一个提供甜甜圈，另一个则有无声迪斯科。\n*   **演讲嘉宾与主题**：会议内容丰富，涵盖从“氛围编程”和大规模自动化到AI驱动的安全等各个方面。\n*   **特别体验**：参会者有机会与 GitHub 团队进行一对一交流，解答疑问，甚至获得职业建议。\n\n## 票务与优惠\n\n*   **早鸟优惠**：早鸟票折扣已延长至 **9月17日（星期三）**，这是节省400美元现场门票的最后机会。\n*   **团体折扣**：购买3张或更多门票可享25%折扣，购买8张或更多门票可享35%折扣。早鸟优惠可与团体折扣叠加使用。\n\n## 日程预览\n\n以下是部分精选会议的概览，您可以在[完整日程](https://github.blog/2024-09-04-your-guide-to-github-universe-2025-the-schedule-just-launched/)中标记您感兴趣的会议，创建个人日程。\n\n### 更快构建，保持流畅\n\n*   ![如何在代码审查中实践同情（而非批评）](https://github.blog/wp-content/uploads/2025/09/table1-1.png?resize=1024%2C538)\n    *   **如何在代码审查中实践同情（而非批评）**\n*   ![使用 Copilot 编码代理解决技术债务](https://github.blog/wp-content/uploads/2025/09/table1-2.png?resize=1024%2C538)\n    *   **使用 Copilot 编码代理解决技术债务**\n*   ![与 GitHub Copilot 合作：更智能地构建游戏](https://github.blog/wp-content/uploads/2025/09/table1-4.png?resize=1024%2C538)\n    *   **与 GitHub Copilot 合作：更智能地构建游戏**\n*   ![使用 Copilot 构建 GitHub：我们的工程师如何倍增影响力并可靠地发布功能](https://github.blog/wp-content/uploads/2025/09/table1-3.png?resize=1024%2C538)\n    *   **使用 Copilot 构建 GitHub：我们的工程师如何倍增影响力并可靠地发布功能**\n\n### 自信地自动化和扩展\n\n*   ![代理的黎明：利用AI驱动工具加速软件开发](https://github.blog/wp-content/uploads/2025/09/table2-1.png?resize=1024%2C538)\n    *   **代理的黎明：利用AI驱动工具加速软件开发**\n*   ![与AI共飞：国泰航空如何转型软件开发](https://github.blog/wp-content/uploads/2025/09/table2-2.png?resize=1024%2C538)\n    *   **与AI共飞：国泰航空如何转型软件开发**\n*   ![从倦怠到突破：构建节省数百万的代理工作流](https://github.blog/wp-content/uploads/2025/09/table-2-4.png?resize=1024%2C538)\n    *   **从倦怠到突破：构建节省数百万的代理工作流**\n*   ![使用 GitHub Actions 自动化日常工作流的5种方法](https://github.blog/wp-content/uploads/2025/09/table-2-3.png?resize=1024%2C538)\n    *   **使用 GitHub Actions 自动化日常工作流的5种方法**\n\n### 确保每次提交的安全\n\n*   ![图片 9](https://github.blog/wp-content/uploads/2025/09/table3-1.png?resize=1024%2C538)\n*   ![图片 10](https://github.blog/wp-content/uploads/2025/09/table3-2.png?resize=1024%2C538)\n*   ![图片 11](https://github.blog/wp-content/uploads/2025/09/table-3-4.png?resize=1024%2C538)\n*   ![图片 12](https://github.blog/wp-content/uploads/2025/09/table3-3.png?resize=1024%2C538)\n\n*   **定制化日程**：除了完整日程，大会还提供针对特定目标、角色（如开发者、金融服务从业者）或行业（如AI时代新趋势）的定制化日程。\n\n## 会前、会中、会后学习机会\n\n### GitHub 总部学习日与认证 (10月30日)\n\n*   **新亮点**：今年新增的 GitHub 总部学习日体验，您的 GitHub Universe 普通门票包含一次 GitHub 或 Microsoft 认证考试。名额有限，先到先得。\n*   **认证考试**：可获得官方 GitHub 或 Microsoft Learn 证书（需提前注册），包括 GitHub Actions、GitHub Administration、GitHub Advanced Security、GitHub Foundations 和 GitHub Copilot 等。此外，还提供 Microsoft DevOps Engineer Expert、Microsoft Azure Administrator Associate 和 Microsoft Azure Developer Associate 认证。如果无法在总部参加考试，可在 Universe 结束后90天内远程参加。\n*   **应用技能实验室**：通过实际、互动挑战测试您的知识。\n*   **总部参观**：难得的机会参观 GitHub 旧金山总部，了解幕后运作。\n*   **社区与庆祝**：享受周边礼品、抽奖活动，并与 GitHub 领导和同行建立联系。\n\n### 一对一会谈\n\n已注册的参会者可报名参加一对一会谈：\n\n*   **职业角 (Career Corner)**：寻求职业建议。\n*   **GitHub 专家中心 (GitHub Expert Center)**：获取其他方面的帮助。\n\n### 现场探索区\n\n会议间隙有丰富的活动：\n\n*   **开源区 (Open Source Zone)**：与贡献者、维护者和社区领袖交流。\n*   **商店 (The Shop)**：购买最新的 Copilot 周边产品。\n*   **休息区 (Recess)**：结识与您有共同非开发兴趣的参会者。\n*   **创客空间 (Makerspace)**：重新构想代码的可能性。\n\n### 学生虚拟微辅导项目\n\n作为社会影响力项目的一部分，GitHub 为在校学生提供与 GitHub 员工进行虚拟微辅导的机会。这些30分钟的一对一会谈将于10月20日至10月31日举行，提供简历反馈、职业建议和技能发展技巧。名额有限，请务必在 **9月19日** 前申请。\n\n## 更多资源\n\n*   了解更多 GitHub Universe 的信息。\n*   使用可定制的电子邮件模板说服您的经理。\n*   查看常见问题解答 (FAQ)。",
      "shortSummary": "GitHub Universe 2025 的日程已发布，活动将于10月28-29日在旧金山举行。大会将聚焦AI驱动的开发，提供超过100场会议，涵盖构建、自动化和安全等主题。参会者可与专家交流，参加GitHub总部学习日及认证考试。早鸟票优惠延长至9月17日，并可叠加团体折扣。此外，还设有学生虚拟微辅导项目。",
      "translated_title": "GitHub Universe 2025 指南：日程已发布！",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/table1-1.png?resize=1024%2C538",
          "alt": "How to practice compassion (not criticism) during code reviews",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/table1-2.png?resize=1024%2C538",
          "alt": "Tackling your tech debt with Copilot coding agent",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/table1-4.png?resize=1024%2C538",
          "alt": "Co-op with GitHub Copilot: Building games the smarter way",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/table1-3.png?resize=1024%2C538",
          "alt": "Building GitHub with Copilot: How our engineers multiply their impact and reliably ship features",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/table2-1.png?resize=1024%2C538",
          "alt": "Dawn of the agents: Leveraging AI-powered tools to accelerate software development",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/table2-2.png?resize=1024%2C538",
          "alt": "Flying high with AI: Cathay Pacific on transforming software development",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/table-2-4.png?resize=1024%2C538",
          "alt": "From burnout to breakthrough: Building agentic workflows that save millions",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/table-2-3.png?resize=1024%2C538",
          "alt": "5 ways to automate everyday workflows with GitHub Actions",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Create your own agenda of favorites, sign up for one-on-on mentoring sessions, and register if you haven’t already. We’ll see you there!</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/your-guide-to-github-universe-2025-the-schedule-just-launched/\">Your guide to GitHub Universe 2025: The schedule just launched!</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何使用GitHub和JFrog集成实现从代码提交到生产环境的安全可追溯构建 (原标题: How to use the GitHub and JFrog integration for secure, traceable builds from commit to production)",
      "link": "https://github.blog/enterprise-software/devsecops/how-to-use-the-github-and-jfrog-integration-for-secure-traceable-builds-from-commit-to-production/",
      "pubDate": "Tue, 09 Sep 2025 22:00:00 +0000",
      "isoDate": "2025-09-09T22:00:00.000Z",
      "creator": "April Yoho",
      "summary": "## GitHub与JFrog集成：实现从代码提交到生产环境的安全可追溯构建\n\n### 概述\nGitHub与JFrog推出了一项新集成，旨在连接源代码和经证明的二进制文件，创建一个安全、可追溯的统一工作流。此举旨在帮助开发者摆脱在多个工具间切换以追踪构建产物或手动整合安全扫描结果的困境，从而节省时间和精力，将所需的一切集中在一个地方。\n\n### 集成的重要性\n现代软件交付被视为一个供应链，其中源代码、构建管道和生产产物都是重要环节，每个环节都必须安全、可追溯且自动化。任何薄弱环节都可能成为恶意攻击者获取敏感数据的入口。开发者在维护完整供应链安全方面面临诸多挑战，常见痛点包括：\n*   构建离开GitHub后，可追溯性丧失。\n*   安全扫描分散在多个系统，需要手动协调结果。\n*   CI/CD管道感觉是拼凑而非无缝连接。\n\n为解决这些问题，GitHub与JFrog工程师紧密合作，设计了一个工作流，其核心目标是：\n*   将触发构建的代码提交与生成的制品进行加密链接。\n*   自动进行上下文相关的安全扫描，并将漏洞扫描证明（attestations）存储在JFrog Evidence中。\n*   将符合组织策略的制品发布和推广作为GitHub Actions工作流的一部分，而非独立流程。\n\n最终目标是减少摩擦、降低风险，并让开发者有更多时间专注于功能开发，而非管理交接。\n\n### 集成带来的无缝体验\n此次集成解锁了以下无缝体验：\n*   **统一安全扫描**：根据JFrog提供的生产上下文，优先处理Dependabot警报。\n*   **策略驱动的制品推广**：通过基于策略的门控机制发布和推广制品。\n*   **自动证明摄取**：自动将GitHub上创建的所有证明（如来源证明、SBOM、自定义证明）摄取到JFrog Evidence中，并与构建制品关联。\n\n### 工作原理\n该集成通过安全认证和构建元数据，连接GitHub的开发者平台与JFrog的软件供应链平台。其流程如下：\n1.  将代码推送到GitHub。\n2.  使用GitHub Actions进行构建和测试。\n3.  链接提交、构建和制品，实现完整的生命周期可见性。\n4.  自动将制品发布到Artifactory。\n5.  使用GitHub Advanced Security扫描代码，使用JFrog Xray扫描制品。\n\n![GitHub和JFrog集成示意图](https://github.blog/wp-content/uploads/2025/09/jfrog1.png?resize=1024%2C658)\n\n### 设置步骤\n1.  **在JFrog Artifactory中启用GitHub集成**：导航至 `Administration → General Management → Manage Integrations → GitHub`。\n2.  切换“Enable GitHub Actions”并验证您的GitHub组织。\n3.  选择令牌类型，然后创建拉取请求。\n\n![JFrog Artifactory集成界面](https://github.blog/wp-content/uploads/2025/09/jfrog2.jpg?resize=1024%2C576)\n\n### 触发构建并生成证明\n确保您的GitHub Actions工作流使用 `jfrog/jfrog-setup-cli` 和 `actions/attest-build-provenance` 动作。文章提供了一个示例工作流，用于生成证明并将其推送到Artifactory。\n\n### 制品验证与推广\n构建运行并生成证明后，制品将被推送到JFrog Artifactory的暂存仓库。制品此时已准备好进行验证。一旦制品经过验证，确认有效的GitHub签名来源证明与受信任条件（例如发行者、仓库、工作流、分支）匹配，并且策略通过，JFrog可以自动将证明从开发环境推广到生产环境。\n\n![Artifactory中开发环境的证明视图](https://github.blog/wp-content/uploads/2025/09/jfrog3.png?resize=1024%2C310)\n\n### 推广后的安全监控\n制品推广到生产环境后，Dependabot会继续扫描其源仓库，查找依赖项和漏洞。当发现关键CVE时，管理员将收到安全威胁警报。\n\n![关键Dependabot警报视图](https://github.blog/wp-content/uploads/2025/09/jfrog4.jpg?resize=1024%2C692)\n\n为了查找已进入生产环境的制品的警报和漏洞，可以使用标签 `artifact-registry:jfrog-artifactory` 进行过滤。启用此集成后，制品生命周期数据会通过GitHub新的制品元数据API自动从JFrog推送到GitHub。当制品在JFrog Artifactory中推广到生产环境时，JFrog会自动通知GitHub，以便Dependabot使用新的过滤器捕获该制品。\n\n![JFrog的Dependabot过滤器](https://github.blog/wp-content/uploads/2025/09/jfrog5.jpg?resize=1024%2C387)\n\n### 漏洞修复\n一旦识别出警报，可以通过建议的依赖项更新进行修复，然后使用新的来源证明重新构建和重新部署。\n\n### 最佳实践\n为了充分利用GitHub和JFrog Artifactory的集成，建议遵循以下最佳实践：\n*   使用OIDC避免在工作流中使用长期凭据。\n*   在Artifactory中自动化推广流程，将制品从开发环境推向暂存环境再到生产环境。\n*   尽早设置安全门控，确保未经证明或存在漏洞的构建不会进入生产环境。\n*   利用JFrog Evidence中的来源证明实现即时可追溯性。\n\n### 展望\n您可以立即启用GitHub和JFrog集成，开始构建更安全、自动化和可追溯的软件供应链。",
      "shortSummary": "GitHub与JFrog推出新集成，旨在实现从代码提交到生产环境的安全、可追溯构建。该集成将源代码与经证明的二进制文件连接起来，通过统一工作流解决多工具切换、安全扫描碎片化等痛点。它提供统一安全扫描、基于策略的制品推广，并自动将GitHub的证明（如来源、SBOM）导入JFrog Evidence。这简化了CI/CD流程，增强了整个软件供应链的安全性、可追溯性和自动化，帮助开发者专注于功能开发，减少风险。",
      "translated_title": "如何使用GitHub和JFrog集成实现从代码提交到生产环境的安全可追溯构建",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/jfrog1.png?resize=1024%2C658",
          "alt": "Diagram showing the GitHub and JFrog integration.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/jfrog2.jpg?resize=1024%2C576",
          "alt": "JFrog Artifactory integration screen.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/jfrog3.png?resize=1024%2C310",
          "alt": "Artifactory view of the attestation in the dev environment.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/jfrog4.jpg?resize=1024%2C692",
          "alt": "View of critical Dependabot alerts.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/jfrog5.jpg?resize=1024%2C387",
          "alt": "Dependabot filter for JFrog.",
          "title": "",
          "position": 5
        },
        {
          "url": "https://avatars.githubusercontent.com/u/26086919?v=4&s=200",
          "alt": "April Yoho",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Connect commits to artifacts without switching tools.</p>\n<p>The post <a href=\"https://github.blog/enterprise-software/devsecops/how-to-use-the-github-and-jfrog-integration-for-secure-traceable-builds-from-commit-to-production/\">How to use the GitHub and JFrog integration for secure, traceable builds from commit to production</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何使用 Playwright MCP 和 GitHub Copilot 调试 Web 应用 (原标题: How to debug a web app with Playwright MCP and GitHub Copilot)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-to-debug-a-web-app-with-playwright-mcp-and-github-copilot/",
      "pubDate": "Fri, 05 Sep 2025 16:00:00 +0000",
      "isoDate": "2025-09-05T16:00:00.000Z",
      "creator": "Christopher Harrison",
      "summary": "## 如何使用 Playwright MCP 和 GitHub Copilot 调试 Web 应用\n\n### 引言：自动化调试的挑战与解决方案\n\n传统的 bug 报告通常包含复现步骤，但手动验证这些步骤既耗时又繁琐。许多项目缺乏健壮的端到端测试来自动化此过程。本文介绍了一种解决方案：利用 GitHub Copilot 代理模式结合 Playwright 模型上下文协议（MCP）服务器，实现 Web 应用 bug 的自动化复现、追踪和解决。\n\n### Playwright 与 MCP 概述\n\n*   **Playwright**：一个用于 Web 应用的端到端测试框架。它允许开发者创建脚本来模拟用户行为，验证应用程序的功能集，并确保产品质量。例如，在购物应用中，Playwright 可以自动化搜索产品、添加到购物车和完成购买的整个流程。\n*   **MCP (Model Context Protocol)**：由 Anthropic 开发的开放且开源的协议，旨在向 AI 代理暴露工具。这些工具可以提供额外的上下文信息，或允许 AI 代理执行特定操作。\n*   **Playwright MCP 服务器**：将 Playwright 的功能作为工具提供给 AI 代理（如 GitHub Copilot）。这使得 Copilot 能够创建测试脚本并直接执行 Playwright 操作，从而自动化地执行 bug 复现步骤。\n\n### 在 VS Code 中配置 Playwright MCP 服务器\n\n要在 VS Code 中使用 Playwright MCP 服务器，需要进行以下配置：\n\n1.  **安装或配置**：可以在 VS Code 中全局安装 Playwright MCP 服务器，或者在项目的 `.vscode` 文件夹中创建一个名为 `mcp.json` 的文件，并添加以下配置：\n    ```json\n    {\n      \"servers\": {\n        \"playwright\": {\n          \"command\": \"npx",
      "shortSummary": "本文介绍了如何利用 GitHub Copilot 代理模式和 Playwright 模型上下文协议 (MCP) 服务器自动化 Web 应用的 bug 调试。Playwright 作为端到端测试框架，通过 MCP 协议将工具暴露给 AI 代理。开发者可在 VS Code 中配置 Playwright MCP 服务器，然后指示 Copilot 自动执行 bug 复现步骤，确认问题，追踪代码（包括前端、API 调用和后端），并定位错误。Copilot 甚至能在提出修复方案后，利用 Playwright 验证其有效性，显著提升调试效率，让 AI 能够“看到”代码更改对网站的实际影响。",
      "translated_title": "如何使用 Playwright MCP 和 GitHub Copilot 调试 Web 应用",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image.png?resize=1024%2C816",
          "alt": "A screenshot showing the play button below \"servers\", just above \"playwright\", in a VS Code window.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://avatars.githubusercontent.com/u/6109729?v=4&s=200",
          "alt": "Christopher Harrison",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Reproduce and debug web app issues with ease using the Playwright MCP server and GitHub Copilot.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-to-debug-a-web-app-with-playwright-mcp-and-github-copilot/\">How to debug a web app with Playwright MCP and GitHub Copilot</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub 在新的政府贸易规则下为叙利亚开发者提供更广泛的访问权限 (原标题: GitHub is enabling broader access for developers in Syria following new government trade rules)",
      "link": "https://github.blog/company/github-is-enabling-broader-access-for-developers-in-syria-following-new-government-trade-rules/",
      "pubDate": "Fri, 05 Sep 2025 06:00:00 +0000",
      "isoDate": "2025-09-05T06:00:00.000Z",
      "creator": "Mike Linksvayer",
      "summary": "# GitHub 在新的政府贸易规则下为叙利亚开发者提供更广泛的访问权限\n\n## 引言\nGitHub 宣布，随着对叙利亚的制裁和出口管制放松，将为叙利亚开发者提供更广泛的访问权限。这一举措是 GitHub 长期以来坚持的“所有开发者都应自由使用 GitHub，无论他们身在何处”这一核心立场的又一重要里程碑。\n\n## 主要变化与影响\n*   **服务恢复**：GitHub.com 上的私人和付费功能将再次广泛向叙利亚的开发者开放，覆盖阿勒颇、霍姆斯、大马士革以及全国各地。\n*   **持续可用性**：在此之前，开源项目和其他公共仓库的协作功能一直保持可用，这在 GitHub Innovation Graph（一个提供叙利亚公共仓库贡献汇总数据的开放数据集）中有所体现。\n*   **感谢与欢迎**：GitHub 对那些为促成这一改变而持续发声并寻求更新的开发者表达了诚挚的感谢。GitHub 欢迎叙利亚开发者将他们的项目贡献给全球开发者社区，无论项目大小。\n\n## GitHub 的承诺与具体行动\nGitHub 承诺将继续致力于在法律允许的范围内，让尽可能多的开发者使用其平台。为此，GitHub 正在迅速采取以下措施：\n*   **解除限制**：解除对叙利亚开发者的限制。\n*   **恢复功能**：恢复账户的正常功能。\n*   **提供 Copilot**：提供 GitHub Copilot 的访问权限。\n\n这些更改目前正在进行中，预计将在未来一周内对相关账户生效。\n\n## 作者信息\n本文由开发者政策主管 Mike Linksvayer 撰写。\n\n![Mike Linksvayer](https://secure.gravatar.com/avatar/8cc1e22f2b79ef8eb4c53537d6ba5ac6ae3cf311c9eef3006657ebe8be0551ce?s=200&d=mm&r=g)\n\n## 相关内容\n*   **Docs**：掌握 GitHub 所需的一切，尽在一个地方。\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n*   **GitHub**：在 GitHub 上构建未来，这里是任何地方的任何人都可以构建任何东西的地方。\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n*   **客户案例**：了解使用 GitHub 进行构建的公司和工程团队。\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n*   **GitHub Universe 2025**：最后机会：节省 700 美元购买 Universe 现场通行证，于 10 月 28-29 日在旧金山与我们相聚。\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)",
      "shortSummary": "由于对叙利亚的制裁和出口管制放松，GitHub 正在恢复叙利亚开发者的全面访问权限。这意味着 GitHub.com 上的私人和付费功能将再次广泛可用，包括正常的账户功能和 GitHub Copilot。此前，开源项目协作一直保持开放。GitHub 感谢为这一改变发声的开发者，并重申其致力于在法律允许范围内，让所有开发者自由使用 GitHub 的承诺。相关更改预计将在下周内生效。",
      "translated_title": "GitHub 在新的政府贸易规则下为叙利亚开发者提供更广泛的访问权限",
      "images": [
        {
          "url": "https://secure.gravatar.com/avatar/8cc1e22f2b79ef8eb4c53537d6ba5ac6ae3cf311c9eef3006657ebe8be0551ce?s=200&d=mm&r=g",
          "alt": "Mike Linksvayer",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>With the relaxation of sanctions and export controls on Syria, GitHub will once again be broadly available to Syrian developers.</p>\n<p>The post <a href=\"https://github.blog/company/github-is-enabling-broader-access-for-developers-in-syria-following-new-government-trade-rules/\">GitHub is enabling broader access for developers in Syria following new government trade rules</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "通过MCP启发构建更智能的交互：从笨拙的工具调用到无缝的用户体验 (原标题: Building smarter interactions with MCP elicitation: From clunky tool calls to seamless user experiences)",
      "link": "https://github.blog/ai-and-ml/github-copilot/building-smarter-interactions-with-mcp-elicitation-from-clunky-tool-calls-to-seamless-user-experiences/",
      "pubDate": "Thu, 04 Sep 2025 16:00:00 +0000",
      "isoDate": "2025-09-04T16:00:00.000Z",
      "creator": "Chris Reddington",
      "summary": "## 通过MCP启发构建更智能的交互：从笨拙的工具调用到无缝的用户体验\n\n本文深入探讨了如何利用模型上下文协议（MCP）中的“启发”（Elicitation）机制，显著提升软件的用户体验，特别是针对AI驱动的交互。作者以一个回合制游戏（如井字棋、石头剪刀布）的MCP服务器为例，展示了如何从最初存在诸多“痛点”的交互方式，演变为更加自然和无缝的用户体验。\n\n### 什么是启发（Elicitation）？\n\n启发机制的核心思想是“如果缺少所需信息，就主动去获取”。它超越了简单的信息收集，旨在创建直观的交互：AI（通过MCP服务器）能够在任务执行过程中暂停，主动询问并获取所需信息，然后继续任务，从而避免了依赖硬编码的默认假设。\n\n**注意**：启发功能是MCP规范中的一个相对较新的特性（于2025年6月修订中添加），目前并非所有AI应用宿主都支持（例如，Visual Studio Code中的GitHub Copilot支持此功能）。\n\n### 实施过程中的挑战与改进\n\n作者在回合制游戏MCP服务器中实施启发功能时，遇到了以下挑战并进行了改进：\n\n1.  **初始实现与工具蔓延**：\n    *   最初，作者为新游戏创建（如难度、玩家姓名、先手顺序、游戏轮数）实现了基本的启发功能。\n    *   为了比较新旧方法，启发功能被实现为新的独立工具（例如 `create-tic-tac-toe-game-interactive`），导致服务器中出现大量功能重叠的工具（如 `create-tic-tac-toe-game` 和 `create-tic-tac-toe-game-interactive`）。\n    *   **问题**：AI代理（如Copilot）在面对名称和描述相似的工具时，难以选择正确的工具，导致行为不可预测。\n\n2.  **解决方案：工具整合与DRY原则**：\n    *   通过大量重构和整合，作者将工具数量从八个减少到四个，遵循“不要重复自己”（DRY）原则。\n    *   现在，当用户提示“我们玩一局井字棋”时，工具调用会识别出需要更多信息，从而触发启发机制，确保用户做出明确选择，而非使用预设的默认值。\n\n    ![GitHub Copilot Chat在Visual Studio Code中触发启发体验，请求用户提供额外偏好以自定义体验的截图](https://github.blog/wp-content/uploads/2025/09/image1.png?resize=1024%2C576)\n\n3.  **处理部分信息与实时调试**：\n    *   在直播中发现一个bug：无论用户是否已提供所需信息，启发步骤都会被触发。\n    *   **修复**：直播后，作者添加了检查机制，在工具调用后判断哪些信息已提供，只请求缺失的信息。同时，统一了工具和启发模式之间的属性名称，提高了清晰度。\n    *   例如，如果用户说“我们玩井字棋，我先走”，系统只会询问游戏难度和玩家姓名。\n\n### 启发机制在MCP服务器中的工作原理\n\n当MCP服务器调用 `create_game` 工具时，其内部流程如下：\n\n*   **检查必要参数**：判断用户是否指定了游戏类型或ID。\n*   **传递可选参数**：将已识别的参数传递给独立方法，检查是否缺少难度、玩家姓名或回合顺序等信息。\n*   **启动启发**：如果信息缺失，暂停工具执行，并仅从用户处收集缺失信息（这是直播后添加的改进）。\n*   **呈现模式驱动的提示**：用户会看到针对每个缺失参数格式化的问题。\n*   **收集响应**：MCP客户端（本例中为VS Code）负责处理UI交互。\n*   **完成原始请求**：一旦服务器收集到所有信息，工具将使用用户的偏好执行 `createGame` 方法。\n\n    ![GitHub Copilot Chat在Visual Studio Code中出现新的UI模态框，提示用户选择偏好，本例中用户选择难度为“困难”的截图](https://github.blog/wp-content/uploads/2025/09/image2.png?resize=1024%2C576)\n\n**结果**：用户可以获得个性化的游戏设置，例如“Chris vs AI (Hard)”，并由AI先手，而不是默认的“Player vs AI (Medium)”。\n\n### 关键经验教训\n\n1.  **用户体验至关重要**：启发机制虽然增加了复杂性，但通过主动询问用户偏好，提供了比强制使用默认值更好的体验。\n2.  **工具命名比想象中更重要**：在构建和使用MCP服务器中的工具时，清晰的命名和描述至关重要，模糊的名称会导致AI行为不可预测。\n3.  **迭代开发制胜**：先构建基本功能，在使用中识别痛点，然后通过添加启发等功能来改进用户体验，并利用AI编码代理进行清理。\n\n### 总结\n\n构建更好的AI工具不仅仅关乎底层模型，更在于创造能够解释上下文、提出好问题并准确满足用户需求的体验。启发机制是朝着这个方向迈出的重要一步，预示着MCP生态系统将支持更丰富、更智能的交互。",
      "shortSummary": "本文探讨了如何通过MCP启发（elicitation）机制提升AI交互的用户体验。该机制使AI在信息不足时能主动暂停并向用户请求必要数据，从而避免了僵硬的默认设置和笨拙的工具调用。作者通过一个回合制游戏MCP服务器的开发实践，解决了工具命名混淆和重复请求等问题，实现了工具整合与仅请求缺失信息。文章强调了用户体验、清晰的工具命名和迭代开发的重要性，旨在构建更智能、个性化的AI交互，让用户体验更自然、无缝。",
      "translated_title": "通过MCP启发构建更智能的交互：从笨拙的工具调用到无缝的用户体验",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image1.png?resize=1024%2C576",
          "alt": "A screenshot of GitHub Copilot Chat in Visual Studio Code where the user has asked \"Let's play a game of tictactoe\". Copilot has triggered the elicitation experience, requesting additional preferences to customize the experience.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image2.png?resize=1024%2C576",
          "alt": "A screenshot of GitHub Copilot Chat in Visual Studio Code where a new UI modal appears, prompting the user for their preferences. This example shows the user selecting the Difficulty as hard.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://avatars.githubusercontent.com/u/791642?v=4&s=200",
          "alt": "Chris Reddington",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 7
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Explore how MCP elicitation transforms AI tool interactions by gathering missing information upfront. </p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/building-smarter-interactions-with-mcp-elicitation-from-clunky-tool-calls-to-seamless-user-experiences/\">Building smarter interactions with MCP elicitation: From clunky tool calls to seamless user experiences</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "为 Copilot 编写更优自定义指令的 5 个技巧 (原标题: 5 tips for writing better custom instructions for Copilot)",
      "link": "https://github.blog/ai-and-ml/github-copilot/5-tips-for-writing-better-custom-instructions-for-copilot/",
      "pubDate": "Wed, 03 Sep 2025 16:00:00 +0000",
      "isoDate": "2025-09-03T16:00:00.000Z",
      "creator": "Christopher Harrison",
      "summary": "# 为 Copilot 编写更优自定义指令的 5 个技巧\n\n本文旨在提供五个关键技巧，帮助开发者为 GitHub Copilot 编写更有效的自定义指令，从而获得更优质的代码建议。核心理念是，Copilot 就像一位新加入的团队成员，需要充分的上下文信息才能高效工作。`copilot-instructions.md` 文件是 Copilot 聊天或代理请求的中心，用于提供项目背景和团队经验。\n\n作者强调，不必过度追求完美，因为生成式 AI 具有概率性。目标是尽可能地引导 Copilot 找到期望的答案。以下建议并非强制要求，而是基于经验的推荐，旨在显著提高 Copilot 建议的质量。\n\n## 1. 提供项目概览\n\n为 Copilot 提供一个项目的“电梯演讲”至关重要。指令文件的开头应简要说明应用是什么、目标受众以及主要功能。这有助于为 Copilot 设定高层次的项目背景。\n\n*   **示例：Contoso Companions**\n    *   一个支持宠物领养机构的网站。\n    *   机构可以管理地点、可用宠物和宣传活动。\n    *   潜在领养者可以搜索宠物、发现机构并提交领养申请。\n\n## 2. 明确项目使用的技术栈\n\n在明确项目目标后，下一步是详细列出用于构建项目的技术。这包括后端和前端技术、调用的 API 以及目标测试套件。建议使用列表形式突出显示所使用的技术，并可添加关于其使用方式的简短说明，帮助 Copilot 理解代码创建的环境。\n\n*   **示例技术栈：**\n    *   **后端：** Flask (API), Postgres (数据存储), SQLAlchemy (ORM)。开发、预发布和生产环境使用独立数据库。端到端测试会创建、填充并移除新数据库。\n    *   **前端：** Astro (核心站点和路由), Svelte (交互性), TypeScript (所有前端代码)。\n    *   **测试：** Python 使用 Unittest，TypeScript 使用 Vitest，端到端测试使用 Playwright。\n\n## 3. 阐明编码规范\n\n清晰的编码规范指导 Copilot 如何编写代码，例如 JavaScript/TypeScript 是否使用分号、Python 是否使用类型提示、使用制表符还是空格。作者倾向于将规范单独列为一个部分，因为许多规范适用于所有使用的语言，且更具可读性。也可以使用 `.instructions` 文件为特定类型的文件或单元测试提供指导。\n\n*   **专业提示：** “不完美”的指令文件也比什么都没有强得多。指令文件应随时间演进。\n*   **示例项目和代码规范：**\n    *   支持类型提示的语言始终使用类型提示。\n    *   JavaScript/TypeScript 使用分号。\n    *   单元测试和端到端测试是必需的，且在 PR 前必须通过，并应关注核心功能和可访问性。\n    *   始终遵循良好的安全实践和 RESTful API 设计原则。\n    *   可用时使用脚本执行操作。\n\n## 4. 解释项目结构\n\n项目结构多种多样，在自定义指令文件中列出项目结构，不仅可以节省 Copilot 的工作，还能提供关于文件夹内容的更多上下文。\n\n*   **示例项目结构：**\n    *   `server/`：Flask 后端代码\n    *   `models/`：SQLAlchemy ORM 模型\n    *   `routes/`：按资源组织的 API 端点\n    *   `tests/`：API 的单元测试\n    *   `utils/`：实用函数和辅助工具，包括数据库调用\n    *   `client/`：Astro/Svelte 前端代码\n    *   `src/components/`：可重用 Svelte 组件\n    *   `src/layouts/`：Astro 布局模板\n    *   `src/pages/`：Astro 页面和路由\n    *   `src/styles/`：CSS 样式表\n    *   `scripts/`：开发、部署和测试脚本\n    *   `docs/`：项目文档，需始终保持同步\n\n## 5. 指明可用的资源\n\n几乎每个项目都有辅助开发的脚本或资源。在自定义指令文件中提供这些资源的指针，可以提高 Copilot 的准确性和速度。\n\n*   **示例资源：**\n    *   `scripts` 文件夹：`start-app.sh` (安装库并启动应用), `setup-env.sh` (安装库), `test-project.sh` (安装库，运行单元和端到端测试)。\n    *   MCP 服务器：Playwright (用于生成 Playwright 测试或与站点交互), GitHub (用于与仓库和待办事项列表交互)。\n\n## 额外提示：让 GitHub Copilot 帮助你创建自定义指令文件\n\nCopilot 可以帮助你生成初始的 `copilot-instructions.md` 文件。文章提供了一个详细的提示示例，用于指导 Copilot 创建该文件，包括目标、限制、指导和遵循的步骤。使用此提示不仅可以节省时间，还可以帮助你理清项目思路和目标。\n\n## 总结\n\n拥有一个良好的指令文件是提高 Copilot 代码建议质量的重要第一步。`copilot-instructions.md` 文件应被视为任何使用 Copilot 的项目的必需品。从项目概览、技术栈、编码规范、项目结构和可用资源这几个基本部分开始，然后可以进一步探索更具体的 `.instructions` 文件。",
      "shortSummary": "为 GitHub Copilot 编写有效的自定义指令能显著提升代码建议质量。核心在于通过 `copilot-instructions.md` 文件提供清晰的上下文。关键技巧包括：提供项目概览、明确技术栈、阐明编码规范、解释项目结构，以及指明可用资源。这些指导帮助 Copilot 更好地理解项目，生成更准确的代码。即使不完美，一个指令文件也远胜于无。Copilot 甚至可以协助生成这些指令文件。",
      "translated_title": "为 Copilot 编写更优自定义指令的 5 个技巧",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>This guide offers five essential tips for writing effective GitHub Copilot custom instructions, covering project overview, tech stack, coding guidelines, structure, and resources, to help developers get better code suggestions.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/5-tips-for-writing-better-custom-instructions-for-copilot/\">5 tips for writing better custom instructions for Copilot</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "AI驱动的规范开发：从新的开源工具包开始 (原标题: Spec-driven development with AI: Get started with a new open source toolkit)",
      "link": "https://github.blog/ai-and-ml/generative-ai/spec-driven-development-with-ai-get-started-with-a-new-open-source-toolkit/",
      "pubDate": "Tue, 02 Sep 2025 16:48:03 +0000",
      "isoDate": "2025-09-02T16:48:03.000Z",
      "creator": "Den Delimarsky",
      "summary": "## AI驱动的规范开发：从新的开源工具包开始\n\n### 引言：AI编码的挑战与规范的重要性\n当前，AI编码代理日益强大，但普遍存在一个问题：生成的代码看似正确，却往往无法正常工作。这种“凭感觉编码”的方式适用于快速原型，但在构建关键任务应用或处理现有代码库时并不可靠。问题不在于AI的编码能力，而在于我们的方法。我们常常将AI编码代理视为搜索引擎，但它们更像是需要明确指令的、字面意义上的结对程序员。它们擅长模式识别，但仍需要清晰无歧义的指示。\n\n为此，我们正在重新思考规范——不再是静态文档，而是随项目演进的、活的、可执行的工件。规范成为共享的真理来源：当出现不明确之处时，回到规范；当项目变得复杂时，完善规范；当任务过于庞大时，将其分解。\n\n### Spec Kit：AI驱动规范开发的新工具包\nSpec Kit是我们新推出的开源工具包，旨在通过结构化的流程，将规范驱动开发引入您的AI编码工作流，支持GitHub Copilot、Claude Code和Gemini CLI等工具。\n\n### Spec Kit的四阶段规范驱动流程\nSpec Kit将您的规范置于工程流程的中心。其核心洞察在于：每个阶段都有特定的任务，并且只有当前任务得到充分验证后，才能进入下一阶段。您的主要角色是引导，而编码代理则负责大部分的编写工作。该流程分为四个阶段，并设有清晰的检查点：\n\n1.  **规定（Specify）**\n    *   **目标：** 您提供关于要构建什么以及为什么构建的高层描述，编码代理将生成详细的规范。\n    *   **内容：** 关注用户旅程、用户体验以及成功的定义。例如，谁将使用它？它为用户解决了什么问题？他们将如何与它互动？哪些结果是重要的？\n    *   **特点：** 这不是关于技术栈或应用设计，而是关于映射您希望创建的用户体验。它是一个活的工件，会随着您对用户及其需求的了解而演进。\n\n2.  **规划（Plan）**\n    *   **目标：** 您提供所需的技术栈、架构和约束，编码代理将生成全面的技术计划。\n    *   **内容：** 包括公司标准技术、与遗留系统的集成、合规性要求或性能目标等。您可以要求生成多个计划变体进行比较。\n    *   **优势：** 如果将内部文档提供给编码代理，它能将您的架构模式和标准直接整合到计划中，确保AI在开始工作前理解“游戏规则”。\n\n3.  **任务（Tasks）**\n    *   **目标：** 编码代理根据规范和计划，将其分解为实际的工作。\n    *   **内容：** 生成小而可审查的任务块，每个任务解决一个特定的问题。每个任务都应能独立实现和测试，这为AI提供了一种验证工作和保持进度的机制，类似于AI代理的测试驱动开发过程。\n    *   **示例：** 任务不再是“构建身份验证”，而是具体的“创建验证电子邮件格式的用户注册端点”。\n\n4.  **实施（Implement）**\n    *   **目标：** 您的编码代理逐一（或并行）处理任务。\n    *   **开发者角色：** 您作为开发者，审查聚焦于解决特定问题的代码变更，而不是数千行的代码转储。编码代理知道要构建什么（因为规范告诉它），知道如何构建（因为计划告诉它），也知道具体要做什么（因为任务告诉它）。\n    *   **关键：** 您的角色不仅是引导，更是验证。在每个阶段，您都需要反思和完善：规范是否捕捉了您真正想构建的内容？计划是否考虑了实际约束？AI是否遗漏了什么或错过了边缘情况？该流程内置了明确的检查点，供您批判生成的内容、发现差距并在继续前进之前进行纠正。AI生成工件，您确保它们是正确的。\n\n### 为何此方法有效？\n这种方法之所以成功，是因为语言模型的工作原理：它们擅长模式补全，但不擅长“读心术”。像“为我的应用添加照片分享功能”这样模糊的提示，会迫使模型猜测数千个未说明的需求，导致AI做出不准确的假设。相比之下，预先提供清晰的规范、技术计划和聚焦的任务，能为编码代理提供更高的清晰度，从而提高其整体效率。它不再猜测您的需求，而是知道要构建什么、如何构建以及按什么顺序构建。\n\n此方法适用于不同的技术栈（Python、JavaScript、Go等），因为核心挑战都是将意图转化为可工作的代码。规范清晰地捕捉意图，计划将其转化为技术决策，任务将其分解为可实现的部分，而AI编码代理则负责实际编码。\n\n对于大型组织，此方法解决了另一个关键问题：如何管理安全策略、合规规则、设计系统约束和集成需求？这些信息往往分散在各处。通过Spec Kit，所有这些内容都整合到规范和计划中，AI可以实际使用它们。安全要求不再是事后考虑，而是从第一天起就融入规范；设计系统也不再是后期附加，而是指导实施的技术计划的一部分。\n\n这种方法的迭代性赋予了它力量。传统开发可能使您早期决策受限，而规范驱动开发则使改变方向变得简单：只需更新规范，重新生成计划，然后让编码代理处理其余部分。\n\n### 适用场景\n规范驱动开发在以下三种场景中特别有效：\n\n1.  **全新项目（Greenfield，从零到一）：** 在启动新项目时，虽然直接开始编码很诱人，但前期投入少量工作创建规范和计划，能确保AI构建出您真正想要的东西，而非基于常见模式的通用解决方案。\n2.  **现有系统功能开发（Feature work，从N到N+1）：** 这是规范驱动开发最强大的应用场景。在复杂现有代码库中添加功能非常困难。通过为新功能创建规范，可以明确其与现有系统的交互方式。计划随后编码架构约束，确保新代码与项目原生融合，而非附加物。这使得持续开发更快、更安全。\n3.  **遗留系统现代化（Legacy modernization）：** 当需要重建遗留系统时，原始意图往往已随时间流逝。通过Spec Kit提供的规范驱动开发流程，您可以将核心业务逻辑捕获到现代规范中，在计划中设计全新的架构，然后让AI从头开始重建系统，而无需继承技术债务。核心优势在于将稳定的“是什么”与灵活的“如何做”分离，从而实现迭代开发而无需昂贵的重写。\n\n### 未来展望\n我们正在从“代码是真理来源”转向“意图是真理来源”。有了AI，规范成为真理来源，并决定了构建什么。这并非因为文档变得更重要，而是因为AI使规范变得可执行。当您的规范自动转化为可工作的代码时，它就决定了构建什么。Spec Kit是我们使这一转变成为现实的实验。我们将其开源，因为这种方法超越了任何单一工具或公司，真正的创新在于流程。未来我们将探讨如何将规范驱动开发实践与上下文工程相结合，以构建更高级的AI工具。\n\n我们期待听到您的使用体验和改进建议！如果您正在使用规范驱动模式进行开发，请与我们分享您的经验。我们特别关注：\n*   使工作流更具吸引力和可用性。\n*   可能的VS Code集成。\n*   比较和差异化多个实现。\n*   在组织中大规模管理规范和任务。\n\n我们很高兴看到您利用AI找到更好的方法，将人类的创造力转化为可工作的软件。\n\n### 作者信息\n由 ![Den Delimarsky](https://avatars.githubusercontent.com/u/53200638?v=4&s=200) 首席产品经理 Den Delimarsky 撰写。\n\n### 更多来自GitHub的探索\n*   **文档：** ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) 掌握GitHub所需的一切，尽在一个地方。前往文档\n*   **GitHub：** ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) 在GitHub上构建未来，这里是任何人、任何地方构建任何东西的平台。开始构建\n*   **客户案例：** ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) 了解使用GitHub进行构建的公司和工程团队。了解更多\n*   **GitHub Universe 2025：** ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) 最后机会：节省700美元购买Universe现场通行证，于10月28-29日在旧金山与我们相聚。立即注册",
      "shortSummary": "AI编码常因指令模糊而失败。Spec Kit是一个开源工具包，通过将规范作为核心，实现AI驱动的规范开发。它包含“规定、规划、任务、实施”四个阶段，确保AI在明确的意图、技术计划和细化任务指导下生成高质量代码。开发者在每个阶段验证和完善，将“意图”而非“代码”作为真理来源。此方法适用于新项目、功能开发和遗留系统现代化，解决了AI“凭感觉编码”的问题，提高了开发效率和准确性。",
      "translated_title": "AI驱动的规范开发：从新的开源工具包开始",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/53200638?v=4&s=200",
          "alt": "Den Delimarsky",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Developers can use their AI tool of choice for spec-driven development with this open source toolkit.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/spec-driven-development-with-ai-get-started-with-a-new-open-source-toolkit/\">Spec-driven development with AI: Get started with a new open source toolkit</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-09-13T04:30:33.959Z"
}