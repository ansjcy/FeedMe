{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "GitHub可用性报告：2025年9月 (原标题: GitHub Availability Report: September 2025)",
      "link": "https://github.blog/news-insights/company-news/github-availability-report-september-2025/",
      "pubDate": "Thu, 09 Oct 2025 02:19:28 +0000",
      "isoDate": "2025-10-09T02:19:28.000Z",
      "creator": "Jakub Oleksy",
      "summary": "GitHub在2025年9月经历了三次导致服务性能下降的事件。以下是详细报告：\n\n## 2025年9月GitHub服务可用性报告\n\n2025年9月，GitHub共发生了三起导致服务性能下降的事件。\n\n### 事件一：Copilot可用性下降\n*   **日期与时间**：2025年9月15日，UTC时间17:55至18:20（持续25分钟）。\n*   **受影响服务**：Copilot的大部分功能可用性下降，返回403错误。\n*   **根本原因**：一个特性标志被部分部署到全局限速器，意外触发了限速逻辑中的一个未检测到的边缘情况。该标志旨在为部分用户降低限速，却导致限速配置进入无效状态，限制了100%的请求。\n*   **解决方案**：回滚了该特性标志，服务立即恢复。\n*   **未来改进**：\n    *   增加流量异常监控器，以便及早发现问题。\n    *   扩大限速扩展测试的覆盖范围，加强预生产验证，以增强系统弹性。\n\n### 事件二：电子邮件投递延迟\n*   **日期与时间**：\n    *   2025年9月23日，UTC时间15:29至17:38。\n    *   2025年9月24日，UTC时间14:02至15:12。\n*   **受影响服务**：电子邮件投递，导致大多数类型的电子邮件通知显著延迟。两次事件总影响约130分钟，客户经历的峰值延迟约为50分钟。\n*   **根本原因**：异常高的流量导致部分出站电子邮件服务器资源争用。\n*   **解决方案**：更新了配置，以在高流量时更好地分配容量。\n*   **未来改进**：更新监控器以提高检测能力。\n\n### 事件三：Copilot API部分性能下降\n*   **日期与时间**：2025年9月29日，UTC时间16:26至17:33（持续67分钟）。\n*   **受影响服务**：Copilot API出现部分性能下降，导致平均0.2%的GitHub MCP服务器请求出现间歇性404错误，峰值时约2%。\n*   **根本原因**：内部依赖升级暴露了服务中的一个配置错误。\n*   **解决方案**：回滚了升级以解决配置错误。\n*   **未来改进**：修复配置问题，并将改进文档和发布流程，以防止类似问题再次发生。\n\n### 更多信息\n\n*   请关注GitHub状态页面获取实时更新和事后回顾。\n*   如需了解更多GitHub正在进行的工作，请查阅GitHub工程博客。\n\n本文作者：\n\n![Jakub Oleksy](https://avatars.githubusercontent.com/u/6147691?v=4&s=200)\n\n### 相关资源\n\n探索更多来自GitHub的内容：\n\n*   **文档**：\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n    掌握GitHub所需的一切，尽在一个地方。\n*   **GitHub**：\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n    在GitHub上构建未来，这里是任何人、任何地点构建任何东西的平台。\n*   **客户案例**：\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n    了解使用GitHub进行构建的公司和工程团队。\n*   **GitHub Universe 2025**：\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)\n    最后机会：节省700美元购买Universe现场通行证，于10月28-29日在旧金山与我们相聚。",
      "shortSummary": "2025年9月，GitHub经历了三次服务性能下降事件。9月15日，Copilot因限速逻辑边缘情况导致25分钟可用性下降。9月24日，电子邮件投递因高流量导致约50分钟的峰值延迟。9月29日，Copilot API因内部依赖升级暴露配置错误，导致67分钟的部分性能下降。GitHub已采取措施解决问题，并计划通过增强监控、扩大测试覆盖和改进发布流程来提升系统弹性。",
      "translated_title": "GitHub可用性报告：2025年9月",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/6147691?v=4&s=200",
          "alt": "Jakub Oleksy",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>In September, we experienced three incidents that resulted in degraded performance across GitHub services.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/github-availability-report-september-2025/\">GitHub Availability Report: September 2025</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "使用 GitHub Copilot 编码代理和移动设备随时随地完成紧急修复 (原标题: Completing urgent fixes anywhere with GitHub Copilot coding agent and mobile)",
      "link": "https://github.blog/developer-skills/github/completing-urgent-fixes-anywhere-with-github-copilot-coding-agent-and-mobile/",
      "pubDate": "Wed, 08 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-08T16:00:00.000Z",
      "creator": "Scott Lusk",
      "summary": "## 引言：GitHub Copilot 编码代理与 GitHub Mobile 的强大结合\n\n文章指出，在软件开发中，结合多种工具可以产生巨大的力量，就像视频游戏中的组合升级一样。GitHub 相信，这种组合能够赋能开发者应对任何挑战，无论是修复关键错误、添加新功能还是发布产品。本文通过作者的亲身经历，展示了 GitHub Copilot 编码代理和 GitHub Mobile 应用如何协同工作，帮助开发者在任何地点高效完成紧急修复。\n\n## 亲身经历：移动设备上的紧急修复\n\n作者分享了一个紧急场景：在一次高可见度演示前，一个关键网站功能出现错误，而他当时远离笔记本电脑。传统修复方式耗时过长，回滚也不是选项。在这种情况下，作者利用手机上的 GitHub Copilot 编码代理和 GitHub Mobile 应用解决了问题。\n\n**操作流程：**\n\n1.  **识别问题：** 作者在 GitHub Mobile 上扫描了最近的拉取请求（PR），识别出一个可能导致问题的 PR（添加了 Markdown 渲染和富文本编辑器）。\n2.  **创建问题：** 他创建了一个新问题，详细描述了问题，并引用了可疑的 PR，同时利用了仓库中预设的 `copilot-instructions` 文件来指导 Copilot 代理。\n3.  **分配任务：** 作者将该问题分配给了 GitHub Copilot 编码代理。\n4.  **Copilot 修复：** 仅仅六分钟后，GitHub Mobile 上收到通知，Copilot 已生成一个包含修复方案的 PR。\n5.  **移动审查与批准：** 作者立即在手机上审查了 PR，确认这是一个清晰、简单的解决方案。他甚至可以在手机上通过预览分支测试修复，然后批准了 PR。\n6.  **自动化部署：** 修复通过仓库中由 GitHub Actions 管理的自动化工作流部署到生产环境。\n\n**结果：** 在作者到达汽车时，问题已解决，演示得以顺利进行。这次完全通过手机管理修复的经历，揭示了 GitHub 平台内强大的能力，并促使作者探索更多平台内组合以提升工作效率。\n\n以下是作者在手机上审查并批准拉取请求后，通过 GitHub Mobile 应用看到的视图，显示了 Copilot 对问题的修复摘要：\n\n![Copilot Coding Agent with a suggested fix for our issue.](https://github.blog/wp-content/uploads/2025/10/01-copilot-pr-fix.jpeg?resize=472%2C1024)\n\n## 解锁这种“能力提升”的关键\n\n作者强调，虽然并非所有开发任务都应通过移动设备委派给 Copilot，但拥有正确的工具应对特定情况至关重要。以下是实现这种效率提升的三个关键点：\n\n### 关键 1：利用指令文件 (Instructions Files)\n\n指令文件为 GitHub Copilot 提供了项目特定的指导和规则，显著影响其建议的质量和相关性。\n\n*   **作用：** 提供仓库的核心目的、技术栈、架构约束、编码标准、测试策略、依赖管理、可观察性、文档、错误处理等上下文信息。\n*   **位置：** 通常位于仓库根目录下的 `.github/copilot-instructions.md` 文件中。\n*   **示例：** 文章提供了一个详细的 `copilot-instructions.md` 示例，涵盖了 Next.js App Router、React、TypeScript、Tailwind CSS、pnpm、shadcn/ui 组件、服务器组件、Vitest 测试、文件夹结构、常用命令等。\n*   **路径特定指令：** 可以使用 `applyTo` 关键字定义针对特定目录、文件模式、语言或任务上下文的指令，例如针对 `src/components/ui` 和 `src/components/shared` 目录的组件创建规范。\n*   **生成指令：** 在 VS Code 中，可以通过“配置聊天”选项生成指令文件。\n\n![Location of copilot-instructions in .github folder](https://github.blog/wp-content/uploads/2025/10/02-github-copilot-instructions_v2.png?resize=2400%2C2528)\n\n![Generate instructions in VS Code using configure chat.](https://github.blog/wp-content/uploads/2025/10/03-configure-chat_v2.png?resize=1200%2C992)\n\n**要点：** 编写良好的指令文件能帮助 Copilot 更好地理解项目和编码标准，从而提供更高质量的输出，加快任务完成速度。\n\n### 关键 2：熟悉 Copilot 编码代理\n\n将 Copilot 编码代理视为团队成员，了解其擅长的技能，并充分利用这些技能。\n\n*   **熟悉方式：** 通过分配问题、创建拉取请求和跟踪 Copilot 在仓库中的会话来熟悉其工作方式。\n*   **创建问题时的指导：** 在将问题分配给 Copilot 之前，确保问题描述提供正确的上下文、明确意图并定义清晰。\n*   **审查与迭代：** Copilot 完成工作后，务必审查其生成的 PR。可以通过在评论中使用 `@copilot` 来请求修改，而不是盲目接受。\n\n![Assign an issue to Copilot coding agent.](https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v3.png?resize=2400%2C1770)\n\n![Copilot as an assignee on an issue.](https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v2.png?resize=836%2C1024)\n\n![Copilot fixed the issue with and had a pull request in six minutes.](https://github.blog/wp-content/uploads/2025/10/05-6min-fix-pr_v3.png?resize=2400%2C806)\n\n![Use @copilot in a pull request comment to have copilot make changes.](https://github.blog/wp-content/uploads/2025/10/06-mention-copilot_v2.png?resize=2400%2C588)\n\n**要点：** 将任务委派给 Copilot 编码代理可以释放开发者的精力，专注于其他关键任务，但仍需仔细审查其结果并提供具体的指导。\n\n### 关键 3：建立最佳实践和自动化\n\n结合 IssueOps 和 GitHub Actions 自动化是提升效率的另一个重要方面。\n\n*   **IssueOps：** 将 GitHub Issues 转化为自动化的控制接口。结构化的命令可以触发 GitHub Actions 工作流，执行部署、配置、迁移等操作，并将结果写回问题中，便于审计。\n*   **问题模板：** 使用预先创建的问题模板（例如针对 Bug 的模板）可以帮助开发者提供详细的上下文信息，节省创建问题的时间。\n*   **示例：** 文章提供了一个“Bug (Copilot Coding Agent-ready)”问题模板示例，包含环境、复现步骤等字段，旨在为 Copilot 提供修复所需的详细信息。\n\n**要点：** 自动化和结构化的流程（如 IssueOps 和问题模板）进一步提升了开发和问题解决的效率。",
      "shortSummary": "本文介绍了如何结合 GitHub Copilot 编码代理和 GitHub Mobile 应用，实现随时随地处理紧急软件修复。作者通过亲身经历展示了在远离电脑时，如何利用手机创建问题、分配给 Copilot 自动生成修复拉取请求，并在手机上审查、批准并部署。文章强调了利用自定义指令文件指导 Copilot、熟悉其工作方式以及通过 IssueOps 和 GitHub Actions 建立自动化流程的重要性，以显著提高开发效率和应对突发情况的能力。",
      "translated_title": "使用 GitHub Copilot 编码代理和移动设备随时随地完成紧急修复",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/01-copilot-pr-fix.jpeg?resize=472%2C1024",
          "alt": "Copilot Coding Agent with a suggested fix for our issue.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/02-github-copilot-instructions_v2.png?resize=2400%2C2528",
          "alt": "Location of copilot-instructions in .github folder",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/03-configure-chat_v2.png?resize=1200%2C992",
          "alt": "Generate instructions in VS Code using configure chat.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v3.png?resize=2400%2C1770",
          "alt": "Assign an issue to Copilot coding agent.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v2.png?resize=836%2C1024",
          "alt": "Copilot as an assignee on an issue.",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/05-6min-fix-pr_v3.png?resize=2400%2C806",
          "alt": "Copilot fixed the issue with and had a pull request in six minutes.",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/06-mention-copilot_v2.png?resize=2400%2C588",
          "alt": "Use @copilot in a pull request comment to have copilot make changes.",
          "title": "",
          "position": 7
        },
        {
          "url": "https://avatars.githubusercontent.com/u/2342987?v=4&s=200",
          "alt": "Scott Lusk",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Unlock the full potential of the GitHub platform. See how Copilot coding agent and GitHub Mobile combine to help you tackle development tasks and urgent fixes, no matter where you are.</p>\n<p>The post <a href=\"https://github.blog/developer-skills/github/completing-urgent-fixes-anywhere-with-github-copilot-coding-agent-and-mobile/\">Completing urgent fixes anywhere with GitHub Copilot coding agent and mobile</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "我们如何使用GitHub Copilot在五小时内实现无障碍合规自动化 (原标题: How we automated accessibility compliance in five hours with GitHub Copilot)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-we-automated-accessibility-compliance-in-five-hours-with-github-copilot/",
      "pubDate": "Tue, 07 Oct 2025 17:00:00 +0000",
      "isoDate": "2025-10-07T17:00:00.000Z",
      "creator": "Janice Rimmer",
      "summary": "## 引言：手动无障碍合规流程的挑战\n\nGitHub每周都会收到核心服务的无障碍等级报告。此前，当服务等级低于阈值时，他们依赖一个完全手动的修复链：有人阅读报告，在仓库中创建问题，猜测负责人，在单独的治理跟踪器中追踪状态，并尝试向领导层汇报。这种方式导致了反应迟缓、跟进不均衡，并且随着服务和检查的增加，无法实现规模化。他们意识到需要改变，并决定利用GitHub Copilot将这个脆弱的流程转变为一个自动化、可审计的循环。\n\n**传统手动流程的低效性：**\n\n*   每周三，无障碍等级报告会出现在跟踪板上，低于预定义分数的服务需要立即修复。\n*   当发现不合格等级时，管理方式效率低下：\n    *   手动在仓库中创建跟踪问题。\n    *   猜测正确的负责人。\n    *   希望有人跟进。\n    *   手动在无障碍治理仓库中跟踪进度。\n\n**具体痛点：**\n\n*   无法扩展。\n*   团队收到的沟通不一致。\n*   领导层缺乏可见性。\n*   修复时间从几天延长到几周。\n\n## 解决方案：利用GitHub Copilot实现自动化\n\n为了解决这些问题，GitHub需要一种可扩展、低维护的方式来触发、跟踪和关闭无障碍修复，而无需持续的手动协调。他们选择使用GitHub Copilot来自动化整个工作流程。\n\n**自动化后的新工作流程：**\n\n*   当无障碍等级低于某个分数时，自动在服务仓库中创建GitHub Issues。\n*   对于持续不合规的情况，使用新的等级数据更新现有问题。\n*   将修复问题与客户关系管理（CRM）跟踪板进行交叉引用。\n*   当服务恢复到可接受的等级时，自动关闭链接。\n*   同步治理板和服务团队之间的负责人。\n*   提及利益相关者以提高透明度，同时避免仓库垃圾信息。\n\n## Copilot如何改变开发方式\n\n传统的内部自动化构建方法意味着起草详细需求、将其优先级排入团队待办事项、等待工程能力，并经历多个冲刺迭代才能看到端到端的工作价值，这可能需要数周甚至更长时间。相反，GitHub团队花了五到六个小时直接与Copilot对话，快速原型设计和测试想法。\n\n**Copilot驱动的快速迭代模式：**\n\n他们的工作循环刻意保持轻量化。每次迭代大致遵循以下模式：\n\n*   用简单的语言描述一个规则（例如，检测持续不合规并确保问题存在或已更新当前上下文）。\n*   要求Copilot搭建或调整代码（例如，新的辅助函数、数据解析调整、API优化），而不是从头开始编写所有内容。\n*   使用少量合成的等级快照（例如，初始下降、持续下降、恢复）在本地验证逻辑。\n*   审查输出（例如，问题主体、标签、负责人）并优化提示，以收紧命名、阈值或分支。\n*   添加防护措施：幂等性（即，如果有效问题已打开则跳过）、简单的阻尼以避免频繁关闭和重新打开，以及对不完整数据的防御性处理。\n*   记录高级决策（例如，“更新现有问题”与“无操作 – 合规”）以快速验证意图。\n*   重新运行测试（加上一个变体）以确认没有回归，然后提交并进入下一个规则。\n\n**带来的好处：**\n\n*   每次迭代都针对单一行为，Copilot的建议保持相关性，避免了大型重构。\n*   当出现新的边缘情况（如短暂的分数下降或因服务重命名导致重复创建问题）时，他们会添加另一个短循环，而不是安排会议。\n*   这种快速的节奏使他们能够在没有正式项目计划的情况下，收敛到一个可投入生产的方案。\n\n## 从原型到生产的演进\n\n他们首先构建了一个快速原型，以可靠地检测不合规服务、提出或更新修复问题，并保持所有权可见。他们还希望证明无需任何人工分类即可实现这一点。最初的目标是在一个具有历史已知等级波动性的预生产环境中，对一小组服务进行受控推广。\n\n**逐步推广计划：**\n\n1.  在预生产环境中使用个人访问令牌进行原型开发。\n2.  在预生产环境中使用模拟服务仓库观察少量测试周度等级周期，并调整阈值或标签。\n3.  重构代码并迁移到GitHub App，以实现适当的安全性和范围权限。\n4.  部署到生产环境，并推广到所有跟踪无障碍合规的服务。\n5.  在噪音最小化后，正式化治理报告。\n\n**验证与成果：**\n\n为了验证，他们录制了一个简洁的端到端演示，展示了输入等级变化如何触发自动问题创建、交叉链接、负责人同步以及重复失败时的后续更新。这个演示让利益相关者能够异步评估完整体验。反馈是决定性的。看到实时问题以清晰的结构和可追溯性出现，加速了从原型阶段推进的批准。他们获得了工程合作伙伴关系，以将流程投入生产，建立了用于强化的沙盒环境，并开始实施具有适当安全和规模考虑的GitHub App版本。\n\n## 实际影响\n\n影响来自两个层面：引入的自动化以及Copilot改变了谁可以构建和迭代它的方式。\n\n**自动化带来的成果：**\n\n*   修复问题现在及时出现（或更新），而不是等待人工分类，这使得服务所有者能够立即理解解决这些问题的策略要求，并在请求例外时承担责任。\n*   所有权、状态和交叉链接集中在一处，为领导层提供了一个可靠的快照，无需临时电子表格或通知。这也加强了无障碍项目所有者与工程团队之间的合作。\n*   由于幂等逻辑和阻尼机制防止了嘈杂的关闭和重新打开，重复或陈旧的联系减少了。\n*   治理工作从文书跟踪转向对系统性无障碍模式进行更高价值的分析，并实现了更严格的治理控制。\n\n**Copilot赋能交付的成果：**\n\n*   领域专家构建了原型，使工程师能够专注于其关键的路线图工作。\n*   减少了工程师的上下文切换。\n*   合作时间用于安全、规模和生产强化，而不是基本的搭建工作。\n*   降低了未来合规或治理工具的门槛，因为现在有了一个其他人可以遵循的可重复模式。\n\n**核心转变：**\n\n这种转变在无障碍等级发出新风险信号时最为重要：系统现在会在跟进时间流逝之前，发现问题、分配所有权并保持状态可见，而不是等待某人注意到并启动手动链条。得益于Copilot，这个系统提前数周投入使用，并且可以由最接近治理问题的人进行迭代。\n\n底线是，他们从“让我写一张工单”转变为“这是具有可衡量影响修复速度和可见性的工作代码”。这种转变改变了人们对内部合规工具实现速度的期望。\n\n## 文章作者与相关资源\n\n本文由 **Janice Rimmer** 撰写，她是一名员工项目经理，致力于通过协作加速创新。\n\n![Janice Rimmer](https://avatars.githubusercontent.com/u/105733155?v=4&s=200)\n\n探索更多来自GitHub的资源：\n\n*   **文档**：掌握GitHub所需的一切，尽在一处。\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n*   **GitHub**：在GitHub上构建未来，这里是任何人、任何地点构建任何东西的地方。\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n*   **客户案例**：了解使用GitHub进行构建的公司和工程团队。\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n*   **GitHub Universe 2025**：抓住最后机会，节省700美元购买Universe现场通行证，并于10月28-29日在旧金山加入我们。\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)",
      "shortSummary": "GitHub利用GitHub Copilot在五小时内自动化了其无障碍合规流程。此前，该流程完全手动，导致响应慢、跟进不一致且难以扩展。通过Copilot，他们构建了一个自动化系统，能自动创建和更新GitHub Issues、同步负责人、追踪进度并自动关闭已解决的问题。这不仅显著加快了修复速度，提高了可见性，还让领域专家而非工程师主导了原型开发，降低了未来工具开发的门槛，将治理工作从文书处理转向高价值分析。",
      "translated_title": "我们如何使用GitHub Copilot在五小时内实现无障碍合规自动化",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/105733155?v=4&s=200",
          "alt": "Janice Rimmer",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>See how we turned weekly accessibility grade signals into an automated, accountable remediation workflow—powered by GitHub Copilot and cross‑functional collaboration.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-we-automated-accessibility-compliance-in-five-hours-with-github-copilot/\">How GitHub Copilot enabled accessibility governance process improvements in record time</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "一位顶级漏洞赏金研究员如何开启他们的安全生涯 (原标题: How a top bug bounty researcher got their start in security)",
      "link": "https://github.blog/security/how-a-top-bug-bounty-researcher-got-their-start-in-security/",
      "pubDate": "Tue, 07 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-07T16:00:00.000Z",
      "creator": "Shilpa Kumari",
      "summary": "GitHub在网络安全意识月期间，重点介绍了其漏洞赏金计划中的一位顶级安全研究员——@xiridium。GitHub致力于维护其平台和更广泛软件生态系统的安全，尤其是在GitHub Copilot等AI驱动功能快速增长的背景下。与经验丰富的安全研究员合作至关重要，有助于识别和解决传统及新兴技术中的漏洞。\n\nGitHub还设立了VIP漏洞赏金计划，邀请那些持续展现专业知识和影响力的研究员加入。VIP研究员可获得：\n*   产品和功能公开发布前的早期预览。\n*   与GitHub漏洞赏金团队及工程师的专属互动。\n*   独家Hacktocat周边商品。\n\n@xiridium以发现业务逻辑漏洞而闻名，并在GitHub生态系统中发现了许多细致且有影响的问题。他们提交的报告清晰、可操作，大大简化了调查和分类过程。\n\n**@xiridium的访谈亮点：**\n\n*   **如何参与漏洞赏金？**\n    *   通过玩CTF（夺旗赛）了解到漏洞赏金，梦想是找到真实应用中的漏洞。\n    *   社区的专业认可和技术技能的提升是他们持续参与的动力。\n\n*   **业余爱好？**\n    *   30岁时开始学习音乐和唱歌，这有助于他们从工作和漏洞赏金中放松。\n    *   也会将部分赏金用于购买乐高玩具。\n\n*   **如何学习漏洞趋势？**\n    *   按需学习：当遇到Protobuf（Protocol Buffers）代码或新的云提供商时，会深入学习相关技术。\n    *   建议关注X（Twitter）上的Intigriti等账号，但强调要理解技巧背后的原理，避免盲目使用。\n\n*   **研究工具与流程？**\n    *   **ChatGPT及其他大型语言模型（LLMs）：** 视为初级开发人员，将大任务分解为小任务，批准其计划后再让其编写代码。这有助于编写小脚本、验证凭证和快速了解新技术。\n    *   **研究方法：** 倾向于深入研究一个应用程序，而非广撒网。目标是彻底理解应用程序的每个端点和请求参数。\n    *   **流程：** 重读程序规则，记录看起来异常的事物，例如：\n        *   同一功能存在两个不同的API端点（`/user` 和 `/data/users`），可能表明开发团队之间缺乏同步。\n        *   子域名分布在不同的云服务商（如AWS和GCP），可能意味着由不同团队管理，从而增加漏洞的可能性。\n\n*   **最喜欢的漏洞类型？**\n    *   泄露凭证和业务逻辑漏洞，擅长发现细微之处。\n    *   **技巧：** 在GitHub上搜索独特的端点；使用Google dork在Slideshare、Postman、Figma等开发或管理工具中搜索目标公司信息，以更好地理解应用程序工作原理。\n\n*   **给新研究员的建议？**\n    *   **资源：** 强烈推荐Portswigger Labs和hacker101。从每个类别的最简单任务开始，找到感兴趣的领域，然后深入学习（阅读报告、解决CTF、HackTheBox等）。\n    *   **心态：** 不要抱有“这肯定没有漏洞”或“这个资产已经被充分检查过”的假设。即使是主域名也可能存在漏洞。\n    *   **尝试罕见漏洞：** 如果了解一些罕见的漏洞类别，不要犹豫进行测试。@xiridium曾在一个Web应用的认证Cookie中发现Oracle填充漏洞。\n\nGitHub感谢@xiridium的参与，并强调每次漏洞提交都为GitHub、其产品和客户带来了更高的安全性。GitHub持续欢迎并感谢安全研究社区的合作，鼓励研究员通过HackerOne报告发现。\n\n**更多来自GitHub的探索：**\n*   ![Shilpa Kumari](https://avatars.githubusercontent.com/u/82128924?v=4&s=200)\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs：掌握GitHub所需的一切。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub：在GitHub上构建未来。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) 客户案例：了解使用GitHub构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025：注册参加旧金山会议。",
      "shortSummary": "GitHub在网络安全意识月期间，聚焦顶级漏洞赏金研究员@xiridium。@xiridium分享了其从CTF开始的漏洞赏金生涯，强调深入研究应用、利用LLM辅助、关注业务逻辑和凭证泄露漏洞。他建议新研究员利用Portswigger Labs等资源，并避免假设资产安全。GitHub通过漏洞赏金计划和VIP项目，持续与安全社区合作，以确保平台安全，尤其是在AI功能快速发展之际。",
      "translated_title": "一位顶级漏洞赏金研究员如何开启他们的安全生涯",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/82128924?v=4&s=200",
          "alt": "Shilpa Kumari",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>For this year’s Cybersecurity Awareness Month, the GitHub Bug Bounty team is excited to feature another spotlight on a talented security researcher — @xiridium!</p>\n<p>The post <a href=\"https://github.blog/security/how-a-top-bug-bounty-researcher-got-their-start-in-security/\">How a top bug bounty researcher got their start in security</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "开发者角色正在演变。以下是如何保持领先。 (原标题: The developer role is evolving. Here’s how to stay ahead.)",
      "link": "https://github.blog/ai-and-ml/the-developer-role-is-evolving-heres-how-to-stay-ahead/",
      "pubDate": "Mon, 06 Oct 2025 20:12:49 +0000",
      "isoDate": "2025-10-06T20:12:49.000Z",
      "creator": "Gwen Davis",
      "summary": "## 开发者角色正在演变：如何在AI时代保持领先\n\n### 引言：AI时代的开发者转型\n\n文章指出，开发者角色正经历一场深刻的变革。在未来五年内，人工智能（AI）预计将编写95%的代码，这标志着一个由AI驱动的新时代的到来。开发者将不再仅仅是手动编码者，而是转变为AI驱动开发生态系统的“协调者、战略家和协作者”。未来的价值将更多地体现在解决问题、设计和启发上，而非单纯的打字速度。GitHub的研究预测，到2030年，AI带来的生产力提升将为全球劳动力增加相当于1500万名有效开发者，并创造超过1.5万亿美元的经济价值。正如《从今天的代码到明天的交响乐：2030年开发者日常的AI转型》的合著者Ketai Qiu所言，未来的编程将更侧重于定义意图、指导AI系统并整合其输出，而非编写大量代码。\n\n### 关键技能：在AI时代保持领先的三个策略\n\n为了适应这一转变并保持竞争力，开发者需要培养以下三项核心技能：\n\n#### 1. 通过提供更好的上下文使AI编码更可靠\n\nAI虽然速度快，但并非“通灵”，它需要精确的上下文才能生成有意义且相关的代码。提供正确的信号——包括意图、数据和任务目的——能够引导AI（如GitHub Copilot）生成高质量的输出。\n\n*   **GitHub Copilot Spaces**：这是一个专用环境，允许团队通过上传源文件（如文档、代码库）、设定意图和协作来为Copilot提供关键上下文，从而确保其建议准确、相关并符合实际工作。\n*   **如何设置GitHub Space：**\n    1.  访问github.com/copilot/spaces并创建一个新空间。\n    2.  上传上下文，可以是文档、示例文件，甚至是整个代码仓库。\n    3.  开始聊天，向Copilot提问，使其利用您已添加的源信息。\n*   **提示：** 团队可以创建组织范围的空间，以便所有成员都能从相同的共享上下文受益。\n*   **GitHub Universe 2025相关会议：**\n    *   “代理的黎明：利用AI驱动工具加速软件开发”\n    *   “从意图到输出：用AI代理进行设计”\n\n![幻灯片标题为“代理的黎明：利用AI驱动工具加速软件开发”，包含GitHub的Maya Ross和Nick Liffen的头像。](https://github.blog/wp-content/uploads/2025/10/image1.png?resize=1024%2C538)\n\n#### 2. 提供洞察力、判断力和战略\n\nAI可以生成代码，但无法取代人类的洞察力、创造力或协作能力。在AI时代，将机器效率与人类判断和团队合作相结合的开发者将脱颖而出，而“协调能力”将成为主要的竞争优势。\n\n*   **GitHub Copilot代码审查**：这是一个AI工具，能够自动扫描拉取请求，突出潜在问题并提出改进建议，帮助团队更快地交付代码并减少瓶颈。\n*   **如何尝试Copilot代码审查：**\n    1.  请求Copilot审查：打开一个现有拉取请求，并将Copilot添加为审阅者。\n    2.  审查Copilot的反馈：稍后，它将添加评论、建议和可直接提交的内联更改。\n    3.  完善审查：您可以重新审查、对反馈进行点赞/踩，或添加`.github/copilot-instructions.md`文件以设置自定义规则。\n*   **提示：** 一旦Copilot提供反馈，您可以启用自动审查，使其默认检查每个拉取请求，但除非您决定，否则Copilot不会阻止合并。\n*   **GitHub Universe 2025相关会议：**\n    *   “从结对到同行：Copilot代码审查的下一次演变”\n    *   会议还将提供可编程徽章、GitHub专家中心、职业角和开源区，以促进协作和创新。\n\n![会议幻灯片标题为“从结对到同行：Copilot代码审查的下一次演变。”左侧包含GitHub Universe 2025标志，以及发言人Elle Shwer的照片及其GitHub所属机构。](https://github.blog/wp-content/uploads/2025/10/image2.png?resize=1024%2C538)\n\n#### 3. 认识到学习永无止境\n\n技术技能的半衰期在AI驱动的世界中变得更短，因此持续学习是保持领先的关键。今天的知识可能不足以应对明天的挑战。\n\n*   **在GitHub内部提升AI技能的实用路线图：**\n    1.  **学习基本语言和框架：** 从Python开始，扩展到Java和C++；探索TensorFlow、PyTorch和Scikit-learn等框架。\n    2.  **掌握机器学习基础知识：** 深入学习深度学习、自然语言处理（NLP）和计算机视觉；利用Awesome Machine Learning、NLTK或OpenCV等开源仓库进行实践。\n    3.  **在GitHub上展示技能：** 组织好您的代码仓库，发布清晰的README文件，积极贡献开源项目，并在GitHub Pages上建立出色的个人资料。\n    4.  **获得GitHub Copilot认证：** 学习完整的工具包，通过文档和项目进行准备，并获得Copilot认证徽章。\n*   **提示：** 不仅要学习AI技能，更要展示您的工作成果。每个仓库、贡献或徽章都向雇主表明您正紧跟AI时代步伐。\n*   **GitHub Universe 2025亮点：**\n    *   “用GitHub Copilot引领：重新思考体验、战略和协作”（由GitHub工程副总裁Sharanya Doddapaneni主讲）\n    *   “与AI高飞：国泰航空转型软件开发”（由国泰航空IT基础设施和安全总经理Rajeev Nair主讲）\n\n![会议幻灯片标题为“与AI高飞：国泰航空转型软件。”](https://github.blog/wp-content/uploads/2025/10/image3.png?resize=1024%2C538)\n\n### 总结：共同迎接未来\n\n文章鼓励开发者积极参与GitHub Universe等活动，这是一个汇集上下文、协作和创造力的平台。通过参与，开发者可以获取洞察、工具和人脉，从而更好地适应和塑造AI驱动的开发未来。\n\n![GitHub Universe 2024户外活动，有帐篷、拱门和与会者。](https://github.blog/wp-content/uploads/2025/10/image4.png?resize=1024%2C1024)",
      "shortSummary": "AI正迅速改变开发者角色，未来五年内将编写95%的代码。开发者需从手动编码者转变为AI驱动开发生态系统的协调者、战略家和协作者。为保持领先，关键在于掌握三大技能：为AI提供精确上下文（如通过GitHub Copilot Spaces）、运用人类洞察力与判断力进行战略决策（如通过GitHub Copilot代码审查），以及持续学习新技能。这些能力将帮助开发者在不断变化的就业市场中保持韧性并脱颖而出。",
      "translated_title": "开发者角色正在演变。以下是如何保持领先。",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image1.png?resize=1024%2C538",
          "alt": "Slide titled 'Dawn of the agents: Leveraging AI-powered tools to accelerate software development' with headshots of Maya Ross and Nick Liffen from GitHub.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image2.png?resize=1024%2C538",
          "alt": "Conference slide titled ‘From pair to peer: The next evolution of Copilot code review.’ Includes GitHub Universe 2025 logo on the left, speaker photo of Elle Shwer with GitHub listed as affiliation.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image3.png?resize=1024%2C538",
          "alt": "Conference slide titled ‘Flying high with AI: Cathay Pacific on transforming software.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image4.png?resize=1024%2C1024",
          "alt": "GitHub Universe 2024 outdoor event with tents, archway, and attendees.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://avatars.githubusercontent.com/u/94031472?v=4&s=200",
          "alt": "Gwen Davis",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>AI is changing how software gets built. Explore the skills you need to keep up and stand out.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/the-developer-role-is-evolving-heres-how-to-stay-ahead/\">The developer role is evolving. Here’s how to stay ahead.</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "规范驱动开发：在使用AI构建时将Markdown作为编程语言 (原标题: Spec-driven development: Using Markdown as a programming language when building with AI)",
      "link": "https://github.blog/ai-and-ml/generative-ai/spec-driven-development-using-markdown-as-a-programming-language-when-building-with-ai/",
      "pubDate": "Tue, 30 Sep 2025 19:07:46 +0000",
      "isoDate": "2025-09-30T19:07:46.000Z",
      "creator": "Tomas Vesely",
      "summary": "# 规范驱动开发：使用Markdown作为AI编程语言\n\n## 引言：AI编码代理的挑战\n\n传统的AI编码代理（如GitHub Copilot）工作流程通常是迭代式的：“编写应用A实现X”，“添加功能Y”，“修复bug Z”。然而，这种方式容易导致代理丢失应用目的或之前的决策上下文，表现为重复提问或提出与先前指令矛盾的建议。尽管一些代理支持自定义指令文件（如`copilot-instructions.md`），但作者发现，在编码过程中常常忘记更新这些文件，且在聊天提示和指令文件中重复相同信息显得多余。\n\n## 核心理念：Markdown驱动的规范开发\n\n作者提出了一种新的方法：将整个应用“编写”在Markdown指令文件中。在他的最新项目——GitHub Brain MCP Server中，作者尝试将应用代码完全用Markdown编写，然后让GitHub Copilot将其编译成实际的Go代码。通过这种方式，他很少直接编辑或查看Go代码。这种方法理论上适用于任何AI编码代理和编程语言，本文以VS Code、GitHub Copilot和Go为例进行阐述。\n\n## 关键文件与工作流程\n\n该工作流程涉及四个核心文件：\n\n*   `.github/prompts/compile.prompt.md`：AI编码代理的编译提示文件。\n*   `main.go`：由AI代理生成的实际Go代码。\n*   `main.md`：应用的Markdown格式规范文件，是应用的“源代码”。\n*   `README.md`：面向用户的文档。\n\n**高层工作流程：** 编辑`README.md`或`main.md`进行开发，调用`compile.prompt.md`让AI代理生成`main.go`，然后像普通Go应用一样构建和运行`main.go`。\n\n### `README.md`：用户文档\n\n`README.md`提供清晰的用户安装和使用说明。对于GitHub Brain MCP Server这个命令行工具，它包含了`pull`和`mcp`等命令的用法和参数说明。例如：\n\n```markdown\n# GitHub Brain MCP Server\n**GitHub Brain** 是一个实验性的MCP服务器，用于总结GitHub讨论、问题和拉取请求。\n\n## 用法\n```sh\ngo run main.go <command> [<args>]\n```\n\n**工作流程：**\n1.  使用 `pull` 命令填充本地数据库。\n2.  使用 `mcp` 命令启动MCP服务器。\n\n### `pull`\n使用GitHub数据填充本地数据库。\n示例：\n```sh\ngo run main.go pull -o my-org\n```\n参数：\n- `-t`: 您的GitHub个人访问令牌。**必需。**\n- `-o`: 要从中拉取数据的GitHub组织。**必需。**\n- `-db`: SQLite数据库目录路径。默认值：当前目录中的 `db` 文件夹。\n\n### `mcp`\n使用本地数据库启动MCP服务器。\n```\n\n### `main.md`：AI编码代理规范\n\n`main.md`是应用的实际“源代码”，当需要添加功能或修复bug时，作者会编辑此文件。它将`README.md`中的用户文档嵌入到规范中，确保文档和实现同步。例如：\n\n```markdown\n# GitHub Brain MCP Server\nAI编码代理规范。面向用户的文档在 [README.md](README.md) 中。\n\n## CLI\n实现 [Usage](README.md#usage) 部分的CLI。遵循精确的参数/变量名称。仅支持 `pull` 和 `mcp` 命令。\n\n## pull\n- 将CLI参数和环境变量解析为 `Config` 结构体：\n  - `Organization`：组织名称（必需）\n  - `GithubToken`：GitHub API令牌（必需）\n  - `DBDir`：SQLite数据库路径（默认：`./db`）\n- 始终使用 `Config` 结构体，避免多次读取环境变量\n- 拉取项：仓库、讨论、问题、拉取请求、团队\n- 使用 `log/slog` 自定义日志记录器，用于控制台输出中带有时间戳的最后5条日志消息\n```\n\n`main.md`中还包含具体的逻辑描述，如查询GitHub Discussions的GraphQL片段、处理数据更新的逻辑，以及数据库模式定义：\n\n```markdown\n### Discussions\n- 查询每个 `has_discussions_enabled: true` 仓库的讨论\n- 在拉取第一页之前，从数据库记录最近的仓库讨论 `updated_at` 时间戳\n```graphql\n{\n  repository(owner: \"<organization>\", name: \"<repository>\") {\n    discussions(first: 100, orderBy: { field: UPDATED_AT, direction: DESC }) {\n      nodes {\n        url\n        title\n        body\n        createdAt\n        updatedAt\n        author {\n          login\n        }\n      }\n    }\n  }\n}\n```\n- 如果仓库不存在，则从数据库中删除该仓库及其所有相关项并继续\n- 按最近的 `updatedAt` 排序查询讨论\n- 当遇到 `updatedAt` 早于记录时间戳的讨论时停止拉取\n- 通过主键 `url` 保存或更新\n- 保留讨论的Markdown正文\n\n## Database\nSQLite数据库位于 `{Config.DbDir}/{Config.Organization}.db`（如果需要则创建文件夹）。避免事务。立即保存每个GraphQL项。\n\n### Tables\n#### table:repositories\n- 主键：`name`\n- 索引：`updated_at`\n- `name`：仓库名称（例如，`repo`），不带组织前缀\n- `has_discussions_enabled`：布尔值，指示仓库是否启用了讨论功能\n- `has_issues_enabled`：布尔值，指示仓库是否启用了问题功能\n- `updated_at`：上次更新时间戳\n```\n\n### `compile.prompt.md`：AI编码代理提示\n\n`compile.prompt.md`使用GitHub Copilot的提示文件格式，指示代理将`main.md`编译为`main.go`。其内容简洁，将大部分信息委托给`main.md`：\n\n```markdown\n---\nmode: agent\n---\n- 更新应用以遵循 [规范](../../main.md)\n- 使用VS Code任务构建代码。避免要求我手动运行 `go build` 或 `go test` 命令。\n- 获取每个使用的库的GitHub主页，以获取文档和示例。\n```\n\n## 整合工作流程\n\n开发循环直接而高效：\n\n1.  编辑`main.md`或`README.md`中的规范。\n2.  请求AI编码代理将其编译为Go代码（在GitHub Copilot for VS Code中，使用`/`命令调用提示）。\n    ![在VS Code中使用GitHub Copilot的/命令调用AI编码代理提示的截图。](https://github.blog/wp-content/uploads/2025/09/image-2.png?resize=1024%2C516)\n3.  运行并测试应用。\n4.  如果出现问题，更新规范并重复。\n\n对于较小的规范，GitHub Copilot通常会自动捕获更改。随着规范的增长，可以通过添加“focus on <the-change>”来引导代理。\n\n![在VS Code中演示如何使用/命令提示GitHub Copilot专注于特定更改的截图。](https://github.blog/wp-content/uploads/2025/09/image-2_87448b.png?resize=1770%2C2836)\n\n## Markdown中的编码辅助\n\n直接在`main.md`中编码有时比直接编写Go代码更具挑战性，因为它要求清晰地描述所需功能。幸运的是，GitHub Copilot可以协助编写Markdown规范本身，例如，帮助为MCP工具添加分页逻辑，并推荐适当的分页样式和参数名称。\n\n![在Markdown规范中，GitHub Copilot在VS Code中为MCP工具推荐分页样式和参数名称的截图。](https://github.blog/wp-content/uploads/2025/09/image-4.png?resize=1760%2C2672)\n\n## Markdown规范的Linting\n\n与任何代码一样，`main.md`也可能变得混乱。为了解决这个问题，可以使用另一个提示文件`lint.prompt.md`来请求Copilot清理规范：\n\n```markdown\n---\nmode: agent\n---\n- 优化 [应用规范](../../main.md) 以提高清晰度和简洁性\n- 将英语视为一种编程语言\n- 最小化同义词的数量 - 即 pull/get/fetch。坚持使用一个术语。\n- 删除重复内容\n- 保留所有重要细节\n- 不要修改Go代码。只优化Markdown文件。\n- 不要修改此提示本身。\n```\n\nAI编码代理会根据此提示对`main.md`进行Linting，如果结果满意，再使用`compile.prompt.md`将其编译为Go代码。\n\n![GitHub Copilot在VS Code中清理和Linting Markdown规范以提高清晰度和简洁性的截图。](https://github.blog/wp-content/uploads/2025/09/image-3_bc6205.png?resize=1742%2C2416)\n\n## 总结与展望\n\n经过几个月的使用，作者观察到：\n\n*   该工作流程有效，并随着Copilot的代理更新而不断改进。\n*   随着`main.go`代码量的增长，编译速度会变慢。下一步计划是修改规范，将编译后的代码拆分为多个模块。\n*   测试仍然至关重要。规范描述了预期行为，但测试验证了它。\n*   未来尝试：完全丢弃Go代码，并从头开始用另一种语言重新生成应用，以验证新代码的即时可用性。\n\n作者鼓励读者尝试这些实验性工作流程，并对该领域的快速发展表示乐观。",
      "shortSummary": "本文介绍了一种“规范驱动开发”新范式，利用Markdown作为AI编码代理的“编程语言”。开发者在Markdown文件（如`main.md`）中详细定义应用逻辑、CLI和数据库架构，然后由AI代理（如GitHub Copilot）将其编译成实际代码（如Go）。这种方法解决了AI代理上下文丢失问题，确保文档与实现同步，并允许AI协助编写和优化规范。该工作流程提高了开发效率，尽管大型项目可能面临编译速度挑战，但其潜力巨大，尤其是在跨语言代码生成方面。",
      "translated_title": "规范驱动开发：在使用AI构建时将Markdown作为编程语言",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-2.png?resize=1024%2C516",
          "alt": "Screenshot showing the use of the / command in GitHub Copilot for VS Code to invoke the AI coding agent prompt.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-2_87448b.png?resize=1770%2C2836",
          "alt": "Screenshot demonstrating how to prompt GitHub Copilot in VS Code to focus on a specific change using the / command.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-4.png?resize=1760%2C2672",
          "alt": "Screenshot showing GitHub Copilot in VS Code recommending pagination style and parameter names for MCP tools in the Markdown specification.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-3_bc6205.png?resize=1742%2C2416",
          "alt": "Screenshot of GitHub Copilot in VS Code cleaning up and linting the Markdown specification for improved clarity and conciseness.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://avatars.githubusercontent.com/u/448809?v=4&s=200",
          "alt": "Tomas Vesely",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>I coded my latest app entirely in Markdown and let GitHub Copilot compile it into Go. This resulted in cleaner specs, faster iteration, and no more context loss.  ✨</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/spec-driven-development-using-markdown-as-a-programming-language-when-building-with-ai/\">Spec-driven development: Using Markdown as a programming language when building with AI</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "CodeQL从零到英雄第五部分：调试查询 (原标题: CodeQL zero to hero part 5: Debugging queries)",
      "link": "https://github.blog/security/vulnerability-research/codeql-zero-to-hero-part-5-debugging-queries/",
      "pubDate": "Mon, 29 Sep 2025 15:00:00 +0000",
      "isoDate": "2025-09-29T15:00:00.000Z",
      "creator": "Sylwia Budzynska",
      "summary": "## CodeQL从零到英雄第五部分：调试查询\n\n本文是“CodeQL从零到英雄”系列博客的第五部分，专注于讲解如何调试和修复CodeQL查询。由于CodeQL是一种类似Prolog的语言，其评估模型与Python等主流语言不同，传统的调试方法（如单步执行、GDB或打印语句）不适用。幸运的是，CodeQL提供了一系列内置功能来帮助诊断和解决查询问题。\n\n### 调试背景：Gradio框架中的不安全反序列化漏洞示例\n文章以一个由用户提出的Gradio框架中不安全反序列化漏洞为例进行讲解。该漏洞涉及用户通过`gr.File`上传文件，然后应用程序使用`pickle.load`加载该文件内容，导致不安全的反序列化。攻击者可以上传恶意文件，然后应用程序加载它。\n\n**最小代码示例：**\n```python\nimport pickle\nimport gradio as gr\n\ndef load_config_from_file(config_file):\n    \"\"\"Load settings from a UUID.pkl file.\"\"\"\n    try:\n        with open(config_file.name, 'rb') as f:\n            settings = pickle.load(f)\n        return settings\n    except Exception as e:\n        return f\"Error loading configuration: {str(e)}\"\n\nwith gr.Blocks(title=\"Configuration Loader\") as demo:\n    config_file_input = gr.File(label=\"Load Config File\")\n    load_config_button = gr.Button(\"Load Existing Config From File\", variant=\"primary\")\n    config_status = gr.Textbox(label=\"Status\")\n\n    load_config_button.click(\n        fn=load_config_from_file,\n        inputs=[config_file_input],\n        outputs=[config_status]\n    )\n    demo.launch()\n```\n\n一个初步的CodeQL污点追踪查询未能检测到此漏洞，这促使了对查询进行调试的需求。\n\n### CodeQL查询调试步骤\n\n以下是解决CodeQL查询问题的建议步骤：\n\n1.  **创建最小CodeQL数据库**\n    *   **目的：** 减少结果数量，便于聚焦调试。\n    *   **方法：** 在包含最小代码示例的目录中运行 `codeql database create codeql-zth5 --language=python`。\n\n2.  **简化查询并快速评估**\n    *   **目的：** 验证`isSource`和`isSink`谓词是否正确识别了源和汇点。\n    *   **问题：** 初始`isSink`谓词将整个`pickle.load(f)`调用标记为汇点，而非其第一个参数。\n    *   **修正`isSink`谓词：**\n        ```ql\n        predicate isSink(DataFlow::Node sink) {\n            exists(Decoding d | d.mayExecuteInput() | sink = d.getAnInput())\n        }\n        ```\n        此修正确保汇点是可执行反序列化（如`pickle.load`）的输入参数。快速评估后，源和汇点均被正确识别。\n\n3.  **抽象语法树 (AST) 查看器**\n    *   **目的：** 当识别源或汇点节点遇到困难时，通过查看代码的AST来确定特定代码元素的CodeQL类型。\n    *   **方法：** 右键点击感兴趣的代码元素，选择“CodeQL: View AST”。\n\n4.  **`getAQlClass` 谓词**\n    *   **目的：** 识别代码元素的类型。通常建议为此创建一个单独的查询。\n    *   **示例查询：** 查询`gradio.Button.click`函数参数的类型。\n        ```ql\n        import python\n        import semmle.python.ApiGraphs\n        import semmle.python.Concepts\n        import semmle.python.dataflow.new.RemoteFlowSources\n\n        from DataFlow::Node node\n        where node = API::moduleImport(\"gradio\").getMember(\"Button\").getReturn()\n                               .getMember(\"click\").getACall().getParameter(0, \"fn\").getParameter(_).asSource()\n        select node, node.getAQlClass()\n        ```\n    *   **结果：** 可以看到`ExprNode`和`ParameterNode`等类型，有助于编写更精确的查询。\n\n5.  **部分路径图：正向追踪 (Partial Path Graph: Forwards)**\n    *   **目的：** 确定污点流停止传播的位置。这对于大型代码库尤其有用，可以通过限制源文件来减少结果。\n    *   **方法：** 使用`PartialFlow::FlowExplorationFwd`模块和`PartialFlow::partialFlow`谓词，并设置`explorationLimit()`来控制分析深度。\n    *   **观察：** 污点流在`with open(config_file.name, 'rb') as f:`行中的`config_file`处停止，未能传播到`config_file.name`属性。\n    *   **原因：** 默认情况下，CodeQL不会将污点传播到对象的所有属性。\n\n6.  **污点传播步骤 (Taint Step)**\n    *   **目的：** 帮助污点从一个对象传播到其特定属性（例如，从`config_file`传播到`config_file.name`）。\n    *   **方法：** 在污点追踪配置中添加`isAdditionalFlowStep`谓词。\n    *   **示例：**\n        ```ql\n        predicate isAdditionalFlowStep(DataFlow::Node nodeFrom, DataFlow::Node nodeTo) {\n            exists(DataFlow::AttrRead attr | attr.accesses(nodeFrom, \"name\") and nodeTo = attr )\n        }\n        ```\n        这个步骤允许CodeQL将污点传播到任何对`name`属性的读取操作。虽然这可能在生产查询中引入误报，但在安全研究和调试中非常有用。\n\n通过以上步骤，可以系统地诊断和解决CodeQL查询中遇到的问题，从而成功检测到预期的漏洞。",
      "shortSummary": "本文是CodeQL系列教程的第五部分，重点介绍如何调试CodeQL查询。由于CodeQL的Prolog特性，传统调试方法无效。文章通过一个Gradio不安全反序列化漏洞示例，详细阐述了调试步骤：首先创建最小数据库，然后快速评估并修正源/汇点定义。接着利用AST查看器和`getAQlClass`识别代码元素类型。最后，使用部分路径图定位污点流中断点，并通过添加`isAdditionalFlowStep`谓词来解决污点未能传播到对象属性的问题，从而成功检测漏洞。",
      "translated_title": "CodeQL从零到英雄第五部分：调试查询",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Learn to debug and fix your CodeQL queries.</p>\n<p>The post <a href=\"https://github.blog/security/vulnerability-research/codeql-zero-to-hero-part-5-debugging-queries/\">CodeQL zero to hero part 5: Debugging queries</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub 如何保护开发者免受版权执法过度干预 (原标题: How GitHub protects developers from copyright enforcement overreach)",
      "link": "https://github.blog/news-insights/policy-news-and-insights/how-github-protects-developers-from-copyright-enforcement-overreach/",
      "pubDate": "Fri, 26 Sep 2025 17:06:17 +0000",
      "isoDate": "2025-09-26T17:06:17.000Z",
      "creator": "Margaret Tucker",
      "summary": "# GitHub 如何保护开发者免受版权执法过度干预\n\nGitHub 采取以开发者为中心的方法，旨在保护开源开发者免受版权执法过度干预，避免因不公正的版权下架通知而导致账户被暂停。\n\n## 传统版权政策的挑战\n\n*   **“三振出局”政策的弊端**：许多平台采用的“三振出局”政策可能导致不公正的结果，尤其对开源开发者而言。他们经常分叉流行项目，这些项目可能成为版权下架的对象。\n*   **账户暂停的负面影响**：账户暂停不仅对开发者个人有即时负面影响，也会影响他们维护的所有开源项目。\n*   **代码的复杂性**：代码的协作性、复杂性和高复用性使得版权执法充满挑战，并放大了下架的下游影响。\n\n## GitHub 的开发者优先方法\n\nGitHub 采取以下措施来应对这些挑战：\n\n*   **个案审查**：在暂停账户之前，GitHub 会对每个案件进行单独审查。\n*   **确保合法工作不受影响**：确保版权执法不会阻碍合法的开发工作。\n\n## 最高法院案件及其对平台责任的影响\n\n美国最高法院即将审理的 **Cox Communications v. Sony Music Entertainment** 案件，将决定互联网服务提供商或平台何时应对用户侵犯版权的行为负责。这可能改变平台处理版权主张的方式，进而影响开发者构建和分享代码。\n\n*   **行业立场**：Google、微软（包括 GitHub）、亚马逊、Mozilla 和 Pinterest 等公司敦促法院采纳明确规则：只有当存在“实质性协助侵权的自觉、有罪行为”时，才应承担责任，而非仅仅是知晓或不作为。\n*   **安全港的重要性**：开发者所依赖的平台依赖于《数字千年版权法案》（DMCA）第 512 条等法律保护，即“安全港”条款，以避免对用户生成内容承担持续责任。只要平台遵循正式的通知-下架流程，DMCA 第 512 条就能保护其免受版权侵权责任。\n*   **GitHub 的特殊性**：鉴于开源的协作性质、代码的功能作用以及移除广泛使用代码的连锁反应，DMCA 保护对 GitHub 尤为关键。\n*   **下架通知的挑战**：GitHub 拥有超过 1.5 亿开发者和 5.18 亿项目，每月处理数百起 DMCA 下架通知，但同时也收到数千份自动化、不完整或不准确的通知。如果仅凭“知晓”就足以构成责任，平台可能被迫基于有缺陷的通知过度移除内容，从而扼杀软件生态系统中的创新和协作。\n\n## GitHub 的 DMCA 下架政策\n\nGitHub 的 DMCA 下架政策旨在支持版权保护，同时限制对合法项目的干扰，其特点包括：\n\n*   **明确的申诉和恢复路径**。\n*   **透明度**：将有效的 DMCA 下架通知发布到公共 DMCA 存储库。\n\n## 广泛的支持\n\n该案件对 GitHub 作为一个平台以及所有使用互联网服务提供商进行创作和协作的开发者都至关重要。包括 Engine Advocacy、电子前沿基金会（EFF）和 Public Knowledge 在内的广泛公民社会利益相关者提交了法庭之友简报，倡导言论自由、开放互联网，并强调常识性责任限制对现代互联网运作的重要性。\n\n## 透明度中心更新\n\nGitHub 致力于以开发者为中心的内容审核，通过以下方式实现透明度：\n\n*   **限制内容的方式**：以最窄的方式限制内容以解决违规问题，给予用户申诉机会，并提供行动透明度。\n*   **数据更新**：GitHub 透明度中心已更新 2025 年上半年数据，包括结构化数据文件存储库。\n*   **政府下架报告的改进**：\n    *   **合并接收类别**：将基于当地法律和基于服务条款收到的政府下架请求合并为一个“收到的政府下架”报告类别，以提高报告的准确性。\n    *   **保留处理类别**：保留“基于当地法律处理的政府下架”和“基于服务条款处理的政府下架”的单独类别。这区分了违反服务条款的内容（按常规报告处理）和仅违反当地法律的内容（仅在法律要求管辖区内限制访问，并将请求发布到 `gov-takedowns` 存储库以确保透明度）。\n    *   **README 澄清**：`gov-takedowns` 存储库的 README 已澄清，该存储库仅包含因当地法律导致内容移除的官方政府请求。\n*   **目的**：这些澄清旨在确保共享数据的清晰性和准确性，以便研究人员可以利用这些数据研究平台审核和政府信息压制。\n\n## 可接受使用政策（AUP）更新\n\nGitHub 已发布拉取请求并启动了为期 30 天的通知和评论期，以更新其可接受使用政策（AUP）。拟议的更新将重组现有 AUP 条款，将其分为独立的政策并提供额外指导。\n\n*   **新政策包括**：\n    *   儿童性虐待材料（CSAM）\n    *   恐怖主义和暴力极端主义内容（TVEC）\n    *   非自愿亲密图像\n    *   合成媒体和人工智能工具（将明确禁止 CSAM 和 TVEC，符合国际法律）。\n*   **评论期**：邀请所有利益相关者在 10 月 16 日之前对拟议的 AUP 补充进行审查和评论。\n\n--- \n\n**作者：**\n\n![Margaret Tucker](https://avatars.githubusercontent.com/u/92055439?v=4&s=200)\n\n**相关文章：**\n\n探索更多来自 GitHub 的内容：\n\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) **文档**：掌握 GitHub 所需的一切，尽在一处。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) **GitHub**：在 GitHub 上构建未来，这里是任何人、任何地方构建任何东西的平台。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) **客户案例**：了解使用 GitHub 进行构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) **GitHub Universe 2025**：最后机会：节省 700 美元购买 Universe 现场通行证，并于 10 月 28-29 日在旧金山加入我们。",
      "shortSummary": "GitHub 致力于以开发者为中心，保护开源开发者免受版权执法过度干预。他们反对“三振出局”政策，主张个案审查，并支持最高法院将平台责任限制在“自觉、有罪行为”的裁决，而非仅仅知晓。GitHub 通过 DMCA 安全港、透明的下架政策、更新的透明度中心和可接受使用政策，确保在保护版权的同时，不阻碍合法协作和创新。他们还改进了政府下架报告，并更新了 AUP 以应对 CSAM、TVEC 和 AI 工具等新挑战。",
      "translated_title": "GitHub 如何保护开发者免受版权执法过度干预",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/92055439?v=4&s=200",
          "alt": "Margaret Tucker",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Why the U.S. Supreme Court case Cox v. Sony matters for developers and sharing updates to our Transparency Center and Acceptable Use Policies.</p>\n<p>The post <a href=\"https://github.blog/news-insights/policy-news-and-insights/how-github-protects-developers-from-copyright-enforcement-overreach/\">How GitHub protects developers from copyright enforcement overreach</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "开启2025年网络安全意识月：研究员聚焦与奖励提升 (原标题: Kicking off Cybersecurity Awareness Month 2025: Researcher Spotlights and Enhanced Incentives)",
      "link": "https://github.blog/security/vulnerability-research/kicking-off-cybersecurity-awareness-month-2025-researcher-spotlights-and-enhanced-incentives/",
      "pubDate": "Fri, 26 Sep 2025 15:00:00 +0000",
      "isoDate": "2025-09-26T15:00:00.000Z",
      "creator": "Shilpa Kumari",
      "summary": "## 开启2025年网络安全意识月：研究员聚焦与奖励提升\n\nGitHub在2025年网络安全意识月（十月）期间，通过表彰安全研究人员并推出新的激励措施，强调了安全在不断发展的数字环境中的重要性。保护全球软件生态系统依赖于安全研究社区的承诺、技能和独创性。\n\n### 主要举措与激励\n\nGitHub为庆祝网络安全意识月，推出了以下主要举措：\n\n1.  **漏洞提交额外奖励**\n    *   **奖励内容**：针对Copilot Coding Agent、GitHub Spark和Copilot Spaces功能的**所有符合条件的有效漏洞提交**，提供额外的10%奖金。\n    *   **资格要求**：报告需明确提及漏洞与Copilot Coding Agent、GitHub Spark或Copilot Spaces的关联。\n    *   **活动期限**：2025年10月1日至31日。\n\n2.  **2025年“玻璃防火墙”大会 (Glass Firewall Conference)**\n    *   **合作方**：GitHub与Capital One、Salesforce和HackerOne合作举办。\n    *   **目标群体**：专为对安全研究和网络安全感兴趣的女性举办的独家活动。\n    *   **大会宗旨**：赋能和支持女性从事道德黑客和安全测试（无论是作为职业还是爱好），努力创造一个欢迎的环境，并提供入门基础知识。\n    *   **行动呼吁**：了解更多信息并进行注册。\n\n3.  **研究员聚焦 (Researcher's Spotlight)**\n    *   **年度传统**：每年都会借此机会突出那些为GitHub漏洞赏金计划做出贡献的研究员，并分享他们独特的经验。\n    *   **洞察分享**：通过访谈，深入了解他们的安全研究方法、兴趣和旅程。\n    *   **往期聚焦研究员**：\n        *   @chen-robert 和 @ginkoid\n        *   @yvvdwf\n        *   @ahacker1\n        *   @inspector-ambitious\n        *   @Ammar Askar\n        *   @adrianoapj\n        *   @imrerad\n    *   **展望**：本月将有更多研究员被聚焦。\n\n### 参与呼吁\n\nGitHub鼓励所有感兴趣的安全研究人员参与其漏洞赏金计划。每一次提交都有助于提升GitHub、其产品、开发者社区和客户的安全性。访问GitHub网站可获取计划的范围、规则和奖励详情。\n\n### 作者信息\n\n本文由 Shilpa Kumari 撰写。\n\n![Shilpa Kumari](https://avatars.githubusercontent.com/u/82128924?v=4&s=200)\n\n### 相关文章\n\n*   **更安全的npm供应链计划**：GitHub正通过更严格的认证、细粒度令牌和增强的信任发布来加强npm的安全性，以恢复开源生态系统的信任。\n*   **保护VS Code免受提示注入攻击**：解释VS Code功能如何降低因间接提示注入导致GitHub令牌、机密文件泄露或任意代码执行的风险。\n\n### 探索更多GitHub资源\n\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) **Docs**：掌握GitHub所需的一切，尽在一处。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) **GitHub**：在GitHub上构建未来，这里是任何人从任何地方构建任何东西的平台。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) **客户案例**：了解使用GitHub进行构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) **GitHub Universe 2025**：最后机会，节省700美元购买线下门票，于10月28-29日在旧金山与我们相聚。",
      "shortSummary": "GitHub在2025年网络安全意识月期间，推出多项举措以表彰并激励安全研究人员。这包括为Copilot Coding Agent、GitHub Spark和Copilot Spaces功能的有效漏洞提交提供10%的额外奖金（2025年10月1日至31日）。此外，GitHub将与合作伙伴共同举办“玻璃防火墙”大会，支持女性从事安全研究。文章还继续聚焦贡献突出的研究员，并鼓励更多人参与其漏洞赏金计划，共同提升GitHub生态系统的安全性。",
      "translated_title": "开启2025年网络安全意识月：研究员聚焦与奖励提升",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/82128924?v=4&s=200",
          "alt": "Shilpa Kumari",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>For this year’s Cybersecurity Awareness Month, GitHub’s Bug Bounty team is excited to offer some additional incentives to security researchers!</p>\n<p>The post <a href=\"https://github.blog/security/vulnerability-research/kicking-off-cybersecurity-awareness-month-2025-researcher-spotlights-and-enhanced-incentives/\">Kicking off Cybersecurity Awareness Month 2025: Researcher spotlights and enhanced incentives</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "超越浏览器构建：Keeley Hammond谈Electron、开源和维护的未来 (原标题: Building beyond the browser: Keeley Hammond on Electron, open source, and the future of maintainership)",
      "link": "https://github.blog/open-source/maintainers/building-beyond-the-browser-keeley-hammond-on-electron-open-source-and-the-future-of-maintainership/",
      "pubDate": "Thu, 25 Sep 2025 17:05:48 +0000",
      "isoDate": "2025-09-25T17:05:48.000Z",
      "creator": "Abigail Cabunoc Mayes",
      "summary": "# 超越浏览器构建：Keeley Hammond谈Electron、开源和维护的未来\n\n本文记录了作者与Electron项目长期维护者Keeley Hammond的对话，探讨了Electron的技术能力、开源项目的可持续维护之道以及未来的挑战。作者指出，尽管Electron在日常工具（如VS Code、Slack、Discord）中广泛应用，但其作为使用Web技术构建跨平台桌面应用的能力，以及其背后的可持续维护模式，是常常被忽视的关键。\n\n## 从“新手问题”到核心维护者\n\nKeeley Hammond的维护者之路始于InVision，当时她主动承担了Electron相关工作。她强调，Electron社区的“热情欢迎”是她坚持至今的关键。社区对“基础”问题的耐心解答和私密Slack群组的支持，让她得以学习和成长。如今，Keeley致力于营造一个同样支持新贡献者的文化。\n\n## 关于Electron的常见误解\n\nKeeley纠正了关于Electron应用臃肿或缓慢的常见误解。她认为，性能问题更多源于糟糕的代码而非Electron本身，并指出原生应用也可能占用大量资源。Electron团队每周回溯Chromium更新，维护三个活跃发布线，并大力投资修补漏洞，表明其对安全性和性能的重视程度不亚于任何原生框架。\n\n## 治理模式如何维持增长\n\nElectron项目如此大规模的运作，仅靠热情是不足的。Keeley描述了一个包含七个工作组（涵盖从发布到API等各个方面）的治理模式，将责任分散给不同的维护者。来自Slack和Microsoft的付费贡献者是项目的核心支柱，但志愿者也至关重要。Electron依赖他们的打包、安装程序和生态系统工具方面的专业知识。项目尽可能雇佣志愿者，并在无法雇佣时提供资金、差旅和资源支持，确保所有贡献者都受到重视。这种企业支持与志愿者活力的平衡是Electron持续繁荣的原因。\n\n## 维持维护者的系统\n\nKeeley强调，其他维护者应从Electron学到的一点是：**自动化繁琐的工作**。\n*   **问题模板**：自动请求缺失的详细信息。\n*   **标签和预设回复**：加速问题分类和处理。\n*   **操作手册（Runbooks）**：标准化导师支持新贡献者的方式。\n\n自动化能让维护者从琐碎事务中解脱出来，专注于调试、指导和构建等更具挑战性的人力工作。\n\n## AI、垃圾信息与未来的挑战\n\nKeeley指出，AI生成垃圾提案是日益增长的问题，尤其是在Google Summer of Code等项目中。她提到，今年收到的提案数量翻倍，其中很大一部分是AI生成的“噪音”，这让那些认真思考的贡献者感到沮丧。然而，她也看到了AI的潜力，例如帮助非英语母语者更清晰地沟通，以及辅助代码探索。挑战在于创建过滤器和教育机会，以区分有效信息和噪音，而非简单地禁止AI。批判性思维、创造力和韧性等人类技能在AI时代变得前所未有地重要。\n\n## Electron带给我们的开源启示\n\nElectron在文化建设方面的刻意性给作者留下了深刻印象。从问题分类系统到治理小组，从尽可能雇佣维护者到赞助志愿者贡献，一切都旨在保持社区的欢迎度和可持续性。\n\nElectron的经验表明，成功的开源项目不仅仅是交付代码，更是构建能够让贡献者感到有价值的系统和文化。\n\n## 从Electron的经验中可以借鉴什么\n\n*   **设置问题模板**：包含自动回复以请求缺失的详细信息。\n*   **创建操作手册（Runbooks）**：用于常见交互（Electron使用Notion）。\n*   **建立工作组**：分散所有权和责任。\n*   **定期举行问题分类会议**：Electron的发布组每周开会。\n*   **集中沟通**：将所有GSoC邮件路由到一个Slack频道。\n*   **刻意营造文化**：明确如何对待贡献者。\n\n## 展望未来\n\nElectron不仅为我们日常使用的应用程序提供动力，它还在一个面临前所未有压力的世界中（如垃圾信息、规模化和源源不断的贡献）树立了可持续开源的典范。Keeley从“新手”到核心维护者的旅程并非因为她天赋异禀，而是因为Electron构建了实现这一目标的途径。作者总结道：开源的健康状况不应以代码行数或星标数量来衡量，而应以我们支持项目背后人员的程度来衡量。\n\n---\n**关于作者：**\n![Abigail Cabunoc Mayes](https://avatars.githubusercontent.com/u/617994?v=4&s=200)\nAbigail Cabunoc Mayes 在 GitHub 工作，致力于帮助开源生态系统现在和未来蓬勃发展。\n\n**相关文章：**\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs：掌握 GitHub 所需的一切，尽在一个地方。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub：在 GitHub 上构建未来，这里是任何地方的任何人都可以构建任何东西的地方。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) 客户案例：了解使用 GitHub 进行构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025：最后机会：节省 700 美元购买 Universe 现场通行证，并于 10 月 28-29 日在旧金山与我们见面。",
      "shortSummary": "Keeley Hammond在访谈中分享了Electron项目在跨平台桌面应用开发、开源维护及未来挑战方面的经验。她澄清了Electron应用性能的误解，强调其对安全和性能的重视。项目通过多工作组治理、企业与志愿者协作实现可持续发展，并倡导自动化繁琐工作以聚焦核心任务。面对AI生成垃圾信息等新挑战，Electron强调批判性思维和文化建设的重要性。文章总结，开源项目的成功在于构建支持贡献者的系统和文化。",
      "translated_title": "超越浏览器构建：Keeley Hammond谈Electron、开源和维护的未来",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/617994?v=4&s=200",
          "alt": "Abigail Cabunoc Mayes",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn what it really takes to sustain one of the web’s most widely used frameworks on this episode of the GitHub Podcast.</p>\n<p>The post <a href=\"https://github.blog/open-source/maintainers/building-beyond-the-browser-keeley-hammond-on-electron-open-source-and-the-future-of-maintainership/\">Building beyond the browser: Keeley Hammond on Electron, open source, and the future of maintainership</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-10-09T04:33:30.395Z"
}