{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "扩大影响力：GitHub Copilot 如何赋能小农户 (原标题: Scaling for impact: How GitHub Copilot supercharges smallholder farmers)",
      "link": "https://github.blog/open-source/social-impact/scaling-for-impact-how-github-copilot-supercharges-smallholder-farmers/",
      "pubDate": "Mon, 28 Jul 2025 19:53:32 +0000",
      "isoDate": "2025-07-28T19:53:32.000Z",
      "creator": "Paull Young",
      "summary": "## One Acre Fund 简介与使命\n\nOne Acre Fund 始于 2006 年肯尼亚西部的 40 个农户家庭，现已发展成为一项强大的运动。如今，该组织在东非和南部非洲的十个国家为 500 万农户家庭提供服务。他们的宏伟目标是到 2030 年每年支持 1000 万农户家庭，并通过利用开源技术和人工智能，为这些社区创造惊人的 10 亿美元新收入。\n\n### 科技赋能农业\n\n对于小农户（通常耕作一英亩或更少土地的农民）而言，集约化农业对其繁荣至关重要。这种在相同土地上生产更多食物的过程，不仅能带来更高的作物产量，还能刺激经济、加强社区并帮助农民扩大规模。One Acre Fund 的核心使命是赋能这些农民，为他们提供一条摆脱贫困的直接途径。与传统小额信贷不同，他们不只提供现金贷款，而是直接提供重要的农业资源，如化肥和种子，以及培训和服务，为农民提供成功所需的工具。他们还帮助农民改善土壤健康和种植树木，不仅提高产量，还能帮助农民更好地应对气候变化带来的天气变化。\n\n> “过去，农民害怕使用技术。但随着我们为他们提供培训，他们现在渴望使用它。”\n> — Blaise Murame，One Acre Fund 区域负责人\n\n技术是 One Acre Fund 快速增长的核心。他们已从完全模拟的方法（在田间使用纸质记录与农民会面）转变为高度数字化的系统。这一转变彻底改变了他们的运营，使从物流和交付到农民注册以及培训材料开发的一切都变得更加高效。农民最初犹豫不决，但在及时获得资源和工具并比以往更快地实现目标后，现在渴望拥抱这项技术。\n\n## GitHub Copilot 的赋能作用\n\nOne Acre Fund 技术飞跃的一个重要部分来自于他们对 GitHub Copilot 的采用。\n\n> “自从 GitHub Copilot 问世以来，我们过去需要三周的开发工作现在可以在一周内完成。这影响了我们的目标——我们能够设定比去年更多的目标。”\n> — Yididiya Gebredingel，One Acre Fund 开发人员\n\n通过引入 GitHub Copilot，One Acre Fund 能够更快地推进开发，并专注于真正在实地产生影响的部分。这种加速使他们能够设定并实现更多目标，开发人员完成项目的速度提高了三倍，超过 30% 的工作由 AI 辅助完成。\n\n## 开源技术的重要性\n\n作为一个非营利组织，与世界上最贫困的人群打交道意味着在微薄的利润下运营。这使得其解决方案的成本效益至关重要。开源技术提供了理想的平衡，既提供了“解决方案的成熟度，又提供了解决方案的灵活性”，同时避免了随着规模扩大而呈指数级增长的许可费用负担。拥抱开源社区是 One Acre Fund 的一项战略举措，他们已将其大部分核心运营系统迁移到开源，以利用协作开发和社区支持。\n\n> “作为一个非营利组织，我们无法承受随着规模扩大而呈指数级增长的许可费用。开源为我们提供了解决方案成熟度和解决方案灵活性之间的正确平衡。”\n> — Sarah Hylden，One Acre Fund 全球运营总监\n\n## 总结与展望\n\n最终，One Acre Fund 相信，如果你有一个行之有效的干预措施，可以为农民创造可持续的脱贫之路，并且你知道它有效，那么你就有道德义务去扩大它的规模。在 GitHub Copilot 的帮助下，他们正在这样做——更快地行动，对数百万农户家庭的生活产生更大的影响。\n\n### 相关资源\n\n*   ![Paull Young](https://avatars.githubusercontent.com/u/157849754?v=4&s=200)\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs：掌握 GitHub 所需的一切，尽在一处。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub：在 GitHub 上构建未来，这里是任何人、任何地方构建任何东西的平台。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) 客户案例：了解使用 GitHub 进行构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025：最后机会：节省 700 美元购买 Universe 现场通行证，于 10 月 28-29 日在旧金山与我们相聚。",
      "shortSummary": "One Acre Fund 是一家非营利组织，通过提供农资、培训和技术，帮助非洲小农户摆脱贫困。他们采用 GitHub Copilot 和开源技术，显著加速了软件开发，将项目完成速度提升三倍，并有效控制了成本。这使得组织能更快地扩大规模，目标是到 2030 年每年支持 1000 万农户，为他们创造 10 亿美元新收入，从而对数百万农户的生活产生深远影响。",
      "translated_title": "扩大影响力：GitHub Copilot 如何赋能小农户",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/157849754?v=4&s=200",
          "alt": "Paull Young",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Empowering 10 million farm families by 2030 to generate $1 billion in new revenue. How GitHub helps One Acre Fund’s mission — driving real impact across Africa.</p>\n<p>The post <a href=\"https://github.blog/open-source/social-impact/scaling-for-impact-how-github-copilot-supercharges-smallholder-farmers/\">Scaling for impact: How GitHub Copilot supercharges smallholder farmers</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何构建安全且可扩展的远程MCP服务器 (原标题: How to build secure and scalable remote MCP servers)",
      "link": "https://github.blog/ai-and-ml/generative-ai/how-to-build-secure-and-scalable-remote-mcp-servers/",
      "pubDate": "Fri, 25 Jul 2025 17:12:02 +0000",
      "isoDate": "2025-07-25T17:12:02.000Z",
      "creator": "Den Delimarsky",
      "summary": "## 如何构建安全且可扩展的远程MCP服务器\n\n本文探讨了构建安全且可扩展的远程模型上下文协议（MCP）服务器的关键方面。MCP允许AI代理连接到外部工具和数据源，而无需实现特定的API连接器，为大型语言模型（LLM）提供所需的上下文。\n\n### 为什么MCP的安全性至关重要\n\n与传统API不同，MCP服务器充当AI代理与无限数据源（包括敏感企业资源）之间的桥梁。安全漏洞不仅会危及数据，还可能使恶意行为者操纵AI行为并访问连接的系统。为了应对常见的攻击向量（如困惑代理问题、令牌传递漏洞和会话劫持），最新的MCP规范包含了安全指南和最佳实践。\n\n### 理解MCP授权\n\nMCP规范采用OAuth 2.1进行安全授权，利用了现代安全能力：\n\n*   **授权服务器发现**：MCP服务器实现OAuth 2.0受保护资源元数据（PRM）（RFC 9728），以公布其支持的授权服务器。\n*   **动态客户端注册**：使用OAuth 2.0动态客户端注册协议（RFC 7591）实现自动客户端注册，消除了AI代理动态连接时的手动设置需求。\n*   **资源指示符**：规范强制要求RFC 8707资源指示符，确保令牌绑定到特定的MCP服务器，防止令牌重用攻击。\n\n开发者可以利用现有的OAuth库和现成的授权服务器/身份提供商，无需从头开始构建安全基础设施。\n\n### 完整的授权流程\n\n连接到受保护的MCP服务器的流程遵循标准的OAuth模式：\n\n1.  **发现阶段**：MCP客户端尝试在没有凭据的情况下访问MCP服务器。\n2.  **服务器响应**：MCP服务器返回HTTP 401 Unauthorized响应，并在WWW-Authenticate头中包含元数据URL。\n3.  **元数据检索**：MCP客户端获取并解析受保护资源元数据，获取授权服务器端点。\n4.  **客户端注册**：MCP客户端自动向授权服务器注册（如果支持）。\n5.  **授权请求**：MCP客户端使用PKCE（Proof Key for Code Exchange）和资源参数启动OAuth流程。\n6.  **用户同意**：用户通过授权服务器授权访问。\n7.  **令牌交换**：MCP客户端交换授权码以获取访问令牌。\n8.  **认证请求**：MCP客户端向MCP服务器发出的所有后续请求都包含Bearer令牌。\n\n### 在MCP中实现授权\n\n大多数OAuth提供商无需额外配置即可用于MCP服务器授权。在实现授权时，需要考虑以下关键组件和行为：\n\n*   **PRM端点**：MCP服务器必须实现`/.well-known/oauth-protected-resource`端点以公布支持的授权服务器范围。MCP TypeScript SDK已原生集成此功能。\n*   **令牌验证中间件**：确保MCP服务器只接受为其签发的令牌，通过以下方式：\n    *   从授权头中提取Bearer令牌。\n    *   使用OAuth提供商的JWKS（JSON Web Key Sets）端点验证令牌签名。\n    *   检查令牌过期和受众声明。\n    *   确保令牌是专门为您的MCP服务器签发的。\n*   **错误处理**：MCP服务器需要返回正确的HTTP状态码（例如，缺少/无效令牌返回HTTP 401 Unauthorized，权限不足返回HTTP 403 Forbidden），并附带适当的WWW-Authenticate头。\n\nAnthropic和MCP社区正在将这些功能直接集成到MCP SDK中，以简化开发。\n\n### 处理多用户场景\n\nMCP服务器中的多租户引入了独特的安全挑战，需要强制执行严格的边界以防止未经授权的访问和数据泄露，解决“困惑代理”问题。\n\n*   **用户身份验证和验证**：OAuth令牌是安全识别用户的基础，其声明（如`sub`）包含用户信息，但必须严格验证。\n*   **强制授权策略**：将用户标识符映射到内部用户配置文件以确定其特定权限，并确保令牌的受众（`aud`）正确，防止令牌被用于其他MCP服务器。\n*   **数据隔离**：每个数据库查询、下游API请求、缓存查找和日志条目都必须限定在当前用户范围内，遵循最小权限原则。\n\n强烈建议使用现有、经过充分测试的库和框架来处理用户会话和数据范围限定。\n\n### 使用AI网关进行扩展\n\nAI网关位于MCP客户端和MCP服务器之间，充当防护罩和流量导向器，集中处理交叉关注点：\n\n*   **速率限制**：防止失控AI代理的资源耗尽。\n*   **JWT令牌验证**：在请求到达服务器前进行验证。\n*   **安全头注入**：保护免受常见Web漏洞侵害。\n*   **请求/响应转换**：优雅地处理协议演变。\n*   **缓存**：针对不经常变化的昂贵操作。\n*   **熔断器**：当下游服务出现问题时快速失败。\n\n这种关注点分离提高了可维护性和诊断效率。\n\n### 生产就绪模式\n\n部署MCP服务器到生产环境时，应采纳以下最佳实践：\n\n*   **更好的秘密管理**：\n    *   MCP服务器需要处理自身的一系列秘密来与各种服务、数据库或API通信。\n    *   生产环境中，环境变量是安全反模式。\n    *   现代方法是使用专用的秘密管理服务（如Azure Key Vault、AWS Secrets Manager或HashiCorp Vault）。\n    *   最安全的方式是使用**工作负载身份**（“无秘密”或“无密钥”），应用程序由云平台分配安全身份，在运行时检索所需秘密，无需在配置中处理长期凭据。\n    *   这支持动态、短生命周期的秘密，实现启动验证和运行时秘密轮换。\n    *   最小权限原则：每个MCP服务器实例只访问其任务绝对需要的秘密。\n*   **可观测性和监控**：\n    *   通过日志、指标和跟踪实现对操作的全面可见性。\n    *   **结构化日志**：跨请求边界保持一致性，使用唯一的关联ID追踪请求的完整旅程。\n    *   **分布式跟踪**：使用OpenTelemetry等标准，提供请求生命周期的详细视图，帮助识别性能瓶颈。\n    *   **安全事件日志**：捕获每次认证尝试、授权失败和异常访问模式，因为MCP服务器是高价值目标。",
      "shortSummary": "本文详细介绍了如何构建安全且可扩展的远程模型上下文协议（MCP）服务器。MCP使AI代理能连接外部数据源。安全性至关重要，规范采用OAuth 2.1进行授权，并强调了授权流程、令牌验证和多用户场景下的数据隔离。为实现可扩展性，建议使用AI网关集中处理流量和安全策略。生产实践包括采用工作负载身份进行高级秘密管理，以及通过结构化日志、分布式跟踪和安全事件日志实现全面的可观测性。",
      "translated_title": "如何构建安全且可扩展的远程MCP服务器",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>More context can mean more attack surfaces for your projects. Be prepared for what lies ahead with this guide.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/how-to-build-secure-and-scalable-remote-mcp-servers/\">How to build secure and scalable remote MCP servers</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何在 Azure Pipelines 中简化 GitHub API 调用 (原标题: How to streamline GitHub API calls in Azure Pipelines)",
      "link": "https://github.blog/enterprise-software/ci-cd/how-to-streamline-github-api-calls-in-azure-pipelines/",
      "pubDate": "Thu, 24 Jul 2025 16:00:00 +0000",
      "isoDate": "2025-07-24T16:00:00.000Z",
      "creator": "Tiago Pascoal",
      "summary": "## Azure Pipelines 中简化 GitHub API 调用\n\n本文探讨了如何在 Azure Pipelines 中通过构建自定义 Azure DevOps 扩展来简化 GitHub API 调用，从而消除 JWT 生成和令牌管理的复杂性，实现强大的自动化和增强的安全控制。\n\n### Azure Pipelines 与 GitHub 的集成\n\nAzure Pipelines 是一个基于云的持续集成/持续交付 (CI/CD) 服务，与 GitHub 深度集成。它能够响应 GitHub 仓库的推送或拉取请求触发管道，并将执行结果通过 GitHub 状态检查报告回 GitHub，帮助开发者监控代码健康状况并强制执行规则集。\n\n### 常见用例和场景\n\n在 Azure Pipelines 中调用 GitHub API 的常见场景包括：\n\n*   **设置提交或拉取请求的状态检查：** 报告管道步骤（如测试、构建、安全扫描）的成功或失败，以强制执行策略并提供反馈。\n*   **向拉取请求添加评论：** 自动发布管道结果、测试覆盖率报告或部署信息。\n*   **更新仓库中的文件：** 自动更新文档、配置文件或版本号（如 `CHANGELOG.md`）。\n*   **管理 GitHub Issues：** 根据管道结果自动创建、更新或关闭问题（如测试失败时创建 Bug 报告）。\n*   **与 GitHub Advanced Security 集成：** 将代码扫描结果发送到 GitHub 的代码扫描功能，实现集中式漏洞管理。\n*   **管理发布和资产：** 成功部署后自动创建 GitHub 发布并上传构建产物。\n*   **使用 GitHub 部署跟踪部署：** 在 GitHub 界面中提供部署历史和状态的可视性。\n*   **触发 GitHub Actions 工作流：** 编排混合 CI/CD 场景，由 Azure Pipelines 处理部分任务，然后触发 GitHub Actions 进行后续处理。\n\n### 理解 GitHub API：REST 与 GraphQL\n\nGitHub API 提供两种主要的接口：\n\n*   **REST API：** 遵循 RESTful 原则，提供直接的 HTTP 端点，适用于管理仓库、问题、拉取请求等常见操作。易于上手，支持个人访问令牌、GitHub Apps 或 OAuth 令牌认证。\n*   **GraphQL API：** 提供更灵活高效的数据检索方式。允许在单个请求中精确指定所需数据，减少数据过度获取或不足，特别适用于检索复杂、嵌套的数据结构。\n\n### 如何选择正确的认证方法\n\nGitHub 提供三种主要的 API 认证方法：\n\n1.  **个人访问令牌 (PATs)：**\n    *   **优点：** 创建和使用简单，快速上手，适用于个人自动化，可配置权限和过期日期。\n    *   **缺点：** 与用户账户生命周期绑定，权限可能粗粒度（经典 PATs），需要手动轮换，一旦泄露可能暴露所有可访问的组织/仓库。\n2.  **OAuth 令牌：**\n    *   **优点：** 标准 OAuth 2.0 流程，适用于需要代表不同用户操作的第三方应用，用户批准权限。\n    *   **缺点：** 需要安全存储刷新令牌，需要服务器基础设施，比 PATs 更复杂，仍与用户账户绑定。\n3.  **GitHub Apps：**\n    *   **优点：** 作为独立实体运行，具有细粒度、仓库级别的权限，基于安装的访问控制，短生命周期令牌（最长 1 小时），更高的速率限制，提供最佳安全模型，不依赖用户账户，有审计跟踪。\n    *   **缺点：** 初始设置更复杂，需要实现 JWT，可能不适用于简单场景，需要私钥管理。\n\n**结论：** 鉴于其细粒度权限、安全特性和更高的速率限制，GitHub Apps 是 Azure Pipelines 中机器到机器集成的理想选择。其短生命周期令牌和基于安装的访问模型提供了比 PATs 和 OAuth 令牌更好的安全控制，特别适合 CI/CD 场景中的自动化。\n\n### 注册和安装 GitHub App\n\n使用 GitHub App 进行认证需要以下步骤：\n\n1.  **注册 GitHub App：** 在 GitHub Enterprise、组织或账户中注册应用，并选择适当的权限。权限决定了应用在企业、组织和仓库中的操作能力。请注意，权限更改可能需要所有者管理员重新授权。通常建议将应用设置为私有。\n2.  **保存私钥：** 如果生成了私钥，请将其安全保存。私钥用于向 GitHub 认证以生成安装令牌。\n3.  **安装 GitHub App：** 将应用安装到将与之交互的账户或组织上，并选择应用可以访问的仓库（所有仓库或特定仓库）。\n\n### GitHub App 认证流程\n\nGitHub Apps 使用两步认证过程访问 GitHub API：\n\n1.  **应用认证：** 应用首先使用其私钥签名的 JSON Web Token (JWT) 进行自我认证。此 JWT 仅证明应用的身份，不提供对 GitHub 资源的直接访问。\n2.  **获取安装令牌：** 为了调用 GitHub API，应用需要获取一个安装令牌。安装令牌是使用应用的 JWT 认证生成的、具有作用域（企业、组织或账户）的访问令牌。这些令牌生命周期短（有效一小时），并且只能访问其安装范围内的资源，并使用安装时授予的最大权限。\n\n获取安装令牌有两种方法：使用已知的安装 ID，或通过调用安装 API 来检索 ID。一旦应用获得安装 ID，它就使用该 ID 请求新的令牌。生成的安装令牌继承了应用的权限和该安装的仓库访问权限，也可以选择请求具有更低权限或仅限于特定仓库的令牌。\n\n### 在 Azure Pipelines 中生成安装令牌\n\n管道作者在 Azure Pipelines 中生成安装令牌有三种主要选项：\n\n1.  **使用命令行工具：** 例如，`gh-token` 是一个流行的开源工具，可以处理整个令牌生成过程。\n2.  **编写自定义脚本：** 使用 `bash/curl` 或 PowerShell 脚本实现令牌生成过程，提供完全控制但需要更多实现工作。\n3.  **使用 Azure Pipeline 任务：** 可以从 Azure DevOps 市场寻找合适的任务，或创建自定义任务来实现 GitHub App 认证流。\n\n### 用于 GitHub App 认证的 Azure DevOps 扩展\n\n在 Azure Pipelines 和 GitHub 之间创建集成时，应用私钥的安全性至关重要。在 Azure Pipelines 中，有多种存储敏感数据的选项：\n\n*   Azure Pipeline 秘密存储（通过秘密变量访问）\n*   Azure Pipelines 安全文件\n*   Azure Pipelines 服务连接\n\n**服务连接的优势：**\n\n服务连接为管理外部服务认证提供了多项关键优势，包括：\n\n*   集中式访问控制\n*   支持多种认证方案\n*   可在项目内的多个管道之间共享连接\n*   内置安全控制，用于管理谁可以查看或修改连接详细信息\n*   将敏感凭据对管道作者隐藏，同时仍允许使用\n*   跨多个项目共享连接，减少重复和管理开销\n\n对于 GitHub App 认证，服务连接尤为重要，因为它们可以安全地存储应用的私钥，允许管理员配置和强制连接行为，并提供比直接在管道或变量组中存储秘密更好的安全性。\n\n### 创建自定义 Azure DevOps 扩展\n\nAzure DevOps 扩展是为 Azure DevOps 服务添加新功能的包。本例中，需要创建一个提供两个关键组件的扩展：\n\n1.  **自定义服务连接类型：** 用于安全存储 GitHub App 凭据和其他设置。\n2.  **自定义任务：** 使用这些凭据生成安装令牌。\n\n一个扩展由描述其功能的清单文件和实际实现代码组成。",
      "shortSummary": "本文介绍如何在 Azure Pipelines 中通过自定义 Azure DevOps 扩展简化 GitHub API 调用。核心在于利用 GitHub Apps 进行身份验证，以消除 JWT 生成和令牌管理的复杂性。GitHub Apps 提供细粒度权限、短生命期令牌和更高安全性，是 CI/CD 场景下机器到机器集成的理想选择。该方法通过集中式凭据管理、标准化集成和跨项目重用，增强了安全性、可维护性并节省了时间。",
      "translated_title": "如何在 Azure Pipelines 中简化 GitHub API 调用",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Build a custom Azure DevOps extension that eliminates the complexity of JWT generation and token management, enabling powerful automation and enhanced security controls.</p>\n<p>The post <a href=\"https://github.blog/enterprise-software/ci-cd/how-to-streamline-github-api-calls-in-azure-pipelines/\">How to streamline GitHub API calls in Azure Pipelines</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "使用 GitHub Models 解决开源 AI 项目的推理问题 (原标题: Solving the inference problem for open source AI projects with GitHub Models)",
      "link": "https://github.blog/ai-and-ml/llms/solving-the-inference-problem-for-open-source-ai-projects-with-github-models/",
      "pubDate": "Wed, 23 Jul 2025 16:00:00 +0000",
      "isoDate": "2025-07-23T16:00:00.000Z",
      "creator": "Sean Goedecke",
      "summary": "## 使用 GitHub Models 解决开源 AI 项目的推理问题\n\n本文介绍了 GitHub Models，一个旨在解决开源 AI 项目中 AI 推理（inference）难题的免费、兼容 OpenAI 的 API。\n\n### 现有问题与挑战\n在开源项目中集成 AI 功能时，开发者和用户常面临以下障碍：\n*   **付费 API 密钥：** 要求用户提供 OpenAI 或 Anthropic 等付费 API 密钥，对许多业余爱好者和学生来说成本过高，阻碍了项目采用。\n*   **本地模型运行：** 运行大型语言模型（LLM）需要大量内存，普通笔记本电脑或 GitHub Actions runner（14 GB 容器）难以承受。\n*   **模型分发：** 捆绑多 GB 的模型权重会显著增加安装包大小，并拖慢持续集成（CI）流程。\n这些额外的要求都会筛选掉潜在用户和贡献者。\n\n### GitHub Models 解决方案\nGitHub Models 提供了一个免费的、与 OpenAI 兼容的推理 API，每个 GitHub 账户都可以使用，无需新的密钥、控制台或 SDK。\n\n*   **核心功能：**\n    *   一个 REST 端点，遵循 OpenAI 已知的 `chat/completions` 规范。\n    *   提供 GitHub 托管的一系列精选模型，包括 GPT-4o、DeepSeek-R1、Llama 3 等。\n    *   任何拥有 GitHub 个人访问令牌（PAT）的用户，或在仓库中通过权限选择启用的内置 `GITHUB_TOKEN`，都可以调用。\n    *   **成本：** 个人账户和开源组织提供免费层级；付费层级提供更高的吞吐量和更大的上下文窗口。\n*   **兼容性：** 由于 API 镜像了 OpenAI，任何接受 `baseURL` 参数的客户端（如 OpenAI-JS、OpenAI Python、LangChain、llamaccp 或自定义 curl 脚本）都可以无缝使用。\n\n### 如何开始使用 GitHub Models\nGitHub Models 与 OpenAI `chat/completions` API 兼容，因此几乎所有推理 SDK 都能使用。\n\n*   **通过 OpenAI SDK 示例：**\n    ```javascript\n    import OpenAI from \"openai\";\n    const openai = new OpenAI({\n      baseURL: \"https://models.github.ai/inference/chat/completions\",\n      apiKey: process.env.GITHUB_TOKEN // 或任何带有 models:read 权限的 PAT\n    });\n    const res = await openai.chat.completions.create({\n      model: \"openai/gpt-4o\",\n      messages: [{ role: \"user\", content: \"Hi!\" }]\n    });\n    console.log(res.choices[0].message.content);\n    ```\n*   **GitHub Actions 中的零配置 CI：**\n    *   在工作流文件中请求 `models:read` 权限，内置的 `GITHUB_TOKEN` 将自动获得调用 GitHub Models 的权限。\n    *   这使得开发者可以构建一键安装的 AI 驱动型 Actions，例如：\n        *   代码审查或 PR 分类机器人\n        *   智能问题标签工作流\n        *   每周仓库活动报告生成器\n    *   示例 `.github/workflows/triage.yml` 配置：\n        ```yaml\n        permissions:\n          contents: read\n          issues: write\n          models: read # 👈 为 GITHUB_TOKEN 解锁 GitHub Models\n        jobs:\n          triage:\n            runs-on: ubuntu-latest\n            steps:\n              - uses: actions/checkout@v4\n              - name: Smart issue triage\n                run: node scripts/triage.js\n        ```\n\n### 优势与扩展性\n*   **降低门槛：** 任何拥有 GitHub 账户的用户都可以运行 AI 驱动的代码，无需提供付费 API 密钥，极大地降低了用户和贡献者的入门障碍。\n*   **促进贡献：** 更容易的设置意味着更广泛的 GitHub 用户群体可以参与贡献。\n*   **项目扩展：**\n    *   GitHub Models 推理 API 对所有人免费。\n    *   如果需要更高的推理量，用户可以在设置中开启付费使用，以获得显著更大的上下文窗口和更高的每分钟请求数（RPM）。\n    *   付费层级提供更高的 RPM、支持 128k token 的上下文窗口，并在独立部署中运行以降低延迟。\n    *   可在“设置 > 模型”中为组织或企业启用付费使用。\n\n### 总结\nLLM 正在改变软件开发和交付方式，但要求用户提供付费 API 密钥是一个主要障碍。GitHub Models 通过为 GitHub 上的每位开发者提供免费的高质量 AI 推理，消除了开源 AI 采用的最大障碍。这为更多的贡献、更快的上手和更满意的用户打开了大门。\n\n### 相关资源\n*   GitHub Models 文档\n*   API 参考\n\n### 作者\n*   ![Sean Goedecke](https://avatars.githubusercontent.com/u/19204567?v=4&s=200) Sean Goedecke，GitHub 软件工程师，GitHub Models 团队成员。\n\n### 相关文章\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs：掌握 GitHub 所需的一切。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub：在 GitHub 上构建未来。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) Customer stories：了解使用 GitHub 的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025：参加旧金山大会。",
      "shortSummary": "GitHub Models 提供了一个免费、兼容 OpenAI 的推理 API，旨在解决开源 AI 项目中因付费 API 密钥或本地模型部署造成的障碍。它允许任何 GitHub 用户通过 PAT 或 `GITHUB_TOKEN` 访问 GitHub 托管的精选模型，无需额外配置。这降低了用户和贡献者的门槛，尤其在 GitHub Actions 中可实现零配置 AI 功能。项目可根据需求升级到付费层级以获得更高性能。GitHub Models 极大地促进了开源 AI 项目的普及和协作。",
      "translated_title": "使用 GitHub Models 解决开源 AI 项目的推理问题",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/19204567?v=4&s=200",
          "alt": "Sean Goedecke",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>How using GitHub’s free inference API can make your AI-powered open source software more accessible.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/llms/solving-the-inference-problem-for-open-source-ai-projects-with-github-models/\">Solving the inference problem for open source AI projects with GitHub Models</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "我们需要一个欧洲主权技术基金 (原标题: We need a European Sovereign Tech Fund)",
      "link": "https://github.blog/open-source/maintainers/we-need-a-european-sovereign-tech-fund/",
      "pubDate": "Wed, 23 Jul 2025 07:01:00 +0000",
      "isoDate": "2025-07-23T07:01:00.000Z",
      "creator": "Felix Reda",
      "summary": "开源软件（OSS）是全球经济和社会赖以生存的关键数字基础设施，然而其维护工作却长期资金不足，远低于对实体基础设施的投入。为了解决这一问题，GitHub的开发者政策团队委托Open Forum Europe、Fraunhofer ISI和欧洲大学学院进行了一项研究，探讨如何将德国成功的“主权技术局”模式推广至欧盟层面，从而建立一个“欧盟主权技术基金”（EU-STF）。\n\n**开源软件的重要性与维护挑战**\n\n*   **巨大价值：** 开源软件对全球经济的价值估计高达8.8万亿美元，对欧盟经济每年贡献至少650-950亿欧元。基础开源技术广泛应用于经济、社会和公共管理部门。\n*   **普遍存在：** 96%的代码库包含开源软件，77%的代码库由开源软件组成。\n*   **资金不足：** 尽管其价值巨大，但开源维护却严重缺乏资金。对500多名开源维护者的调查显示，三分之一的维护者无偿工作，另有三分之一收入微薄无法维持生计。更令人担忧的是，三分之一的受访者是独立维护者，近四分之三的项目由三人或更少的人维护。这导致了如xz后门和Log4Shell等严重安全事件的发生，凸显了过度依赖小型、过劳且未受重视团队的风险。\n\n**设计一个有影响力的基金**\n\n借鉴德国主权技术局在两年内（2022-2024年）向60个开源项目投资超过2300万欧元的成功经验，欧盟主权技术基金应具备以下五个主要活动领域：\n\n1.  识别欧盟最关键的开源依赖项。\n2.  投资于维护工作。\n3.  投资于安全加固。\n4.  投资于改进和创新。\n5.  加强整个开源生态系统。\n\n**机构设置与资金需求**\n\n研究提出了两种机构设置方案：\n\n*   **“登月计划”模式：** 设立一个集中的欧盟机构。\n*   **“务实”模式：** 由欧盟成员国组成联盟，提供初始资金并申请欧盟预算的额外资源。\n\n无论哪种模式，为确保基金成功，即将到来的欧盟多年期预算（2028-2035年）应至少贡献3.5亿欧元。这笔资金虽不足以完全满足开源维护需求，但可作为杠杆，吸引行业和国家政府的共同出资，从而产生持久影响。\n\n**欧盟主权技术基金的七项设计标准**\n\n借鉴德国主权技术局和美国开放技术基金等项目的经验，研究确定了EU-STF必须满足的七项设计标准：\n\n1.  **集中融资：** 行业、国家政府和欧盟应将资金汇集到同一基金中，以简化维护者的申请流程。例如：\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)\n2.  **低官僚化：** 采用轻量级申请流程，主动识别关键项目，并限制受资助者的报告要求，确保他们能专注于项目改进。\n3.  **政治独立性：** 基金应足够独立，避免受制于区块链、量子计算或人工智能等短期技术趋势，从而专注于保障和维护公共软件基础设施的核心使命。\n4.  **灵活资助：** 能够资助个人、非营利组织或公司进行开源维护工作，且不应限制受资助者的居住地（如德国主权技术局不限制德国人）。关键在于“开源制造”，而非“欧盟制造”。\n5.  **社区聚焦：** 与开源社区合作，共同定义资助优先事项和设计资助流程，以建立专业知识和信任。\n6.  **战略对齐：** 基金需证明其对欧盟战略目标（如经济竞争力、数字主权和网络安全，包括帮助企业遵守《网络弹性法案》下的供应链安全义务）的积极影响。\n7.  **透明度：** 基金在治理和资助决策方面必须达到最高透明度标准，以赢得开源社区和决策者的信任。\n\n**促成欧盟主权技术基金的实现**\n\n目前，欧盟正在就2028-2035年的新多年期预算（多年度财政框架）进行谈判。GitHub的开发者政策团队正在向欧盟立法者介绍这项研究成果，并动员行业合作伙伴（如梅赛德斯-奔驰）支持，以证明建立一个公私部门合作保障开源基础设施的新型工具的必要性。文章呼吁个人、开源组织和公司向欧盟委员会、欧洲议会代表和本国政府表达对EU-STF成立的支持。作者为GitHub开发者政策总监Felix Reda。\n\n![Felix Reda](https://avatars.githubusercontent.com/u/161162366?v=4&s=200)",
      "shortSummary": "开源软件是全球关键数字基础设施，但其维护长期资金不足。为解决此问题，文章呼吁建立一个欧洲主权技术基金（EU-STF），借鉴德国成功经验。该基金旨在识别并资助欧盟最关键的开源依赖项，加强维护、安全和生态系统。提议至少3.5亿欧元的初始资金，并强调集中融资、低官僚化、政治独立和社区合作等设计原则。呼吁各方支持，以确保欧洲数字基础设施的安全与可持续性。",
      "translated_title": "我们需要一个欧洲主权技术基金",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/161162366?v=4&s=200",
          "alt": "Felix Reda",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Open source software is critical infrastructure, but it’s underfunded. With a new feasibility study, GitHub’s developer policy team is building a coalition of policymakers and industry to close the maintenance funding gap.</p>\n<p>The post <a href=\"https://github.blog/open-source/maintainers/we-need-a-european-sovereign-tech-fund/\">We need a European Sovereign Tech Fund</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "使用AI调试UI：GitHub Copilot代理模式与MCP服务器的结合 (原标题: Debugging UI with AI: GitHub Copilot agent mode meets MCP servers)",
      "link": "https://github.blog/ai-and-ml/github-copilot/debugging-ui-with-ai-github-copilot-agent-mode-meets-mcp-servers/",
      "pubDate": "Tue, 22 Jul 2025 21:58:35 +0000",
      "isoDate": "2025-07-22T21:58:35.000Z",
      "creator": "Chris Reddington",
      "summary": "本文探讨了如何利用GitHub Copilot代理模式和Playwright MCP服务器来加速UI问题的排查与调试，并强调了明确需求的重要性。\n\n### 项目背景与问题\n\n*   **项目：** 作者的OctoArcade Next.js应用，一个GitHub主题的迷你游戏集合。\n*   **发现的问题：**\n    *   导航栏与游戏内容重叠。\n    *   游戏画布与页脚之间存在意外间隙。\n*   **解决方案：** 借助GitHub Copilot代理模式和Playwright MCP服务器进行视觉检查，识别并修复了这些UI问题，包括全局头部修复。\n*   **结果：** 实现了自动化（“hands-off”）调试，解决了之前耗费精力的问题。\n\n### Copilot自定义指令设置\n\n*   **重要性：** 自定义指令文件（如`.github/copilot-instructions.md`）为Copilot提供了关于期望、编码风格和工作实践的重要上下文。\n*   **维护：** 务必保持指令文件最新，包含仓库结构、构建/测试步骤和提交期望等信息。\n*   **更新指令：** 可以通过向Copilot代理模式提问来更新指令文件，例如：“Based on the #codebase, please can you update the custom instructions file for accuracy? Please make sure to keep the structure (i.e. headings etc.) as-is. Thanks!”\n\n### 使用Playwright MCP进行代理式UI调试\n\n*   **Playwright MCP服务器：** 一个强大的端到端测试和UI自动化工具，支持模型上下文协议（MCP）。\n*   **与Copilot集成：** Copilot代理模式和Copilot编码代理可以通过Playwright MCP访问结构化工具。\n*   **Copilot能力：**\n    *   加载网页。\n    *   模拟用户操作（点击、导航）。\n    *   检查渲染布局，无需视觉模型。\n    *   发现布局问题并提出CSS或组件修复建议。\n*   **设置：** 在VS Code的MCP配置中添加Playwright。\n*   **可用工具示例：** `browser_snapshot`（捕获可访问性快照）、`browser_navigate`（导航到URL）、`browser_click`、`browser_type`、`browser_hover`（与元素交互）、`browser_resize`（测试不同视口大小）、`browser_take_screenshot`（视觉文档）。\n\n### 调试过程与经验教训\n\n1.  **描述问题并让代理模式工作：**\n    *   **初始问题：** 页面主内容被导航栏遮挡，游戏页面间距不一致。\n    *   **初始提示：** 尽可能明确地描述UI错误，并要求Copilot使用Playwright进行调查。\n    *   **迭代：** Copilot最初未能加载实际游戏，需要后续提示提供更多上下文。\n    *   **经验：** 提供越多的上下文和具体信息，Copilot的表现越好，就像与团队成员协作一样。\n    *   **Copilot的行动：** 启动浏览器，导航应用页面，诊断问题，并建议改进导航栏的渲染方式（使用根布局的导航栏）。\n    *   **自动化调试：** Copilot尝试修复、重新运行应用并进行视觉检查，甚至迭代修复了linting错误。\n\n2.  **迭代UI需求：**\n    *   **新问题：** OctoPong游戏板与页脚之间存在小间隙。\n    *   **挑战：** 作者最初的需求不明确，导致Copilot的修复引入了新的副作用（如游戏组件消失、游戏超出视口）。\n    *   **关键洞察：** 上下文至关重要，清晰地表达需求是关键。正确定义需求通常需要多次尝试和反馈。\n\n### 实用技巧\n\n*   **保持Copilot自定义指令最新：** 代理依赖这些文件获取仓库上下文和最佳实践。\n*   **利用MCP增强Copilot能力：** Playwright MCP实现真正的端到端测试和UI检查，对调试复杂Web应用至关重要。\n*   **明确需求：** 像任何协作者一样，Copilot只知道你告诉它的信息。列出你的“必须实现”项、预期行为和边缘情况。\n*   **小步迭代：** 频繁提交更改，以便回溯和诊断问题。\n\n### 结论与后续步骤\n\n*   **总结：** 代理工具（如Copilot和Playwright MCP）在提供正确上下文时能显著加速故障排除。描述需求很困难，但迭代、反馈和一些失误都是学习和解决bug过程的一部分。\n*   **行动建议：**\n    *   更新仓库的Copilot自定义指令文件。\n    *   在VS Code中安装并启动Playwright MCP服务器，为Copilot提供浏览器访问权限进行UI测试。\n    *   在Copilot代理模式的新聊天中清晰描述bug或功能。\n    *   让Copilot提出并应用修复，但始终审查代码更改和测试结果。\n    *   根据观察迭代需求，并根据需要进行澄清。\n    *   频繁提交代码，在分支中工作并保存每一步的进度。\n\n文章鼓励读者分享使用Playwright MCP或其他MCP服务器的经验，并关注GitHub的后续直播和学习资源。",
      "shortSummary": "本文探讨了如何利用GitHub Copilot代理模式和Playwright MCP服务器加速UI调试。作者通过修复其OctoArcade应用中的界面问题，展示了这些AI工具如何进行视觉检查和自动修复。核心经验是，向AI工具提供清晰、详细的需求至关重要，调试过程常需迭代细化需求。Playwright MCP赋予Copilot模拟用户交互和检查UI的能力，实现高效的自动化调试。",
      "translated_title": "使用AI调试UI：GitHub Copilot代理模式与MCP服务器的结合",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Explore how I use agentic tools like GitHub Copilot agent mode and the Playwright MCP server to accelerate troubleshooting and debugging of UI issues, while revisiting the importance of clear requirements.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/debugging-ui-with-ai-github-copilot-agent-mode-meets-mcp-servers/\">Debugging UI with AI: GitHub Copilot agent mode meets MCP servers</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub 2025年6月可用性报告 (原标题: GitHub Availability Report: June 2025)",
      "link": "https://github.blog/news-insights/company-news/github-availability-report-june-2025/",
      "pubDate": "Wed, 16 Jul 2025 21:06:17 +0000",
      "isoDate": "2025-07-16T21:06:17.000Z",
      "creator": "Jakub Oleksy",
      "summary": "## GitHub 2025年6月可用性报告\n\n在2025年6月，GitHub服务共经历了三次导致性能下降的事件。\n\n### 事件一：2025年6月5日 (UTC时间 17:47 - 19:20，持续1小时33分钟)\n\n*   **受影响服务：** Actions\n*   **影响：**\n    *   47.2%的运行启动延迟，平均延迟14分钟。\n    *   21.0%的运行失败。\n    *   60%的Copilot Coding Agent会话被取消。\n    *   所有使用分支构建的Pages站点部署失败（Pages服务本身不受影响）。\n*   **原因：** 内部Actions服务之间负载激增，暴露出配置错误，导致运行启动关键路径中的请求被限流。\n*   **缓解措施：** 纠正服务配置以防止限流，并更新部署流程以确保正确配置得以保留。\n\n### 事件二：2025年6月12日 (UTC时间 17:55 - 21:07，持续3小时12分钟)\n\n*   **受影响服务：** GitHub Copilot\n*   **影响：**\n    *   Gemini模型不可用，Claude模型可用性降低。\n    *   VS Code、JetBrains IDEs和GitHub Copilot Chat中，聊天完成错误率显著升高，响应时间变慢，出现超时和聊天功能中断。\n*   **原因：** 影响其中一个模型提供商的故障。\n*   **缓解措施：** 暂时禁用受影响的提供商端点以减少用户影响。GitHub正在更新基础设施提供商故障的事件响应手册，并改进监控和警报系统，以减少未来此类问题的检测和缓解时间。\n\n### 事件三：2025年6月17日 (UTC时间 19:32 - 20:03，持续31分钟)\n\n*   **受影响服务：** 内部路由策略部署\n*   **影响：** 导致数据中心内部分网络地址块的可达性问题。\n    *   github.com UI（已认证用户）：3-4%的错误率。\n    *   API（已认证调用者）：40%的错误率。\n    *   UI和API（未认证请求）：接近100%的错误率。\n    *   Actions：2.5%的运行延迟（平均8分钟），3%的运行失败。\n    *   大文件存储（LFS）请求：1%的错误。\n*   **原因：** 向部分网络设备部署内部路由策略。\n*   **缓解措施：** 于19:54 UTC回滚部署，受影响系统的网络可用性恢复。20:03 UTC完全恢复正常运行。GitHub正在扩展路由策略更改的验证流程，以防止类似问题。\n\n### 更多信息\n\n*   请关注GitHub状态页面获取实时更新和事件回顾。\n*   访问GitHub工程博客了解更多工作进展。\n\n### 相关内容\n\n*   **Docs**：掌握GitHub所需的一切。\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n*   **GitHub**：在GitHub上构建未来。\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n*   **Customer stories**：了解使用GitHub进行构建的公司和工程团队。\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n*   **GitHub Universe 2025**：参加10月28-29日在旧金山举行的Universe大会。\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)",
      "shortSummary": "GitHub在2025年6月经历了三次服务降级事件。6月5日，Actions服务因配置错误导致运行延迟和失败。6月12日，GitHub Copilot因模型提供商故障导致服务中断和错误率升高。6月17日，内部路由策略部署引发网络可达性问题，影响了UI、API和Actions。GitHub已采取措施纠正问题，并计划改进配置管理、事件响应和验证流程，以防止未来再次发生类似事件。",
      "translated_title": "GitHub 2025年6月可用性报告",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 4
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>In June, we experienced three incidents that resulted in degraded performance across GitHub services.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/github-availability-report-june-2025/\">GitHub Availability Report: June 2025</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何在攻击者之前捕获 GitHub Actions 工作流注入 (原标题: How to catch GitHub Actions workflow injections before attackers do)",
      "link": "https://github.blog/security/vulnerability-research/how-to-catch-github-actions-workflow-injections-before-attackers-do/",
      "pubDate": "Wed, 16 Jul 2025 16:00:00 +0000",
      "isoDate": "2025-07-16T16:00:00.000Z",
      "creator": "Dylan Birtolo",
      "summary": "# 如何在攻击者之前捕获 GitHub Actions 工作流注入\n\n在代码开发和项目维护中，安全性至关重要，并且从项目初期就考虑安全比后期修补要容易得多。GitHub Actions 工作流注入是 GitHub 仓库中最常见的漏洞之一，但幸运的是，它相对容易解决，GitHub 也提供了相关工具。\n\n![CodeQL 在 2024 年发现的最常见漏洞类型条形图。从多到少依次为：注入、访问控制失效、不安全设计、加密失败、身份识别与认证失败、安全配置错误、软件和数据完整性失败、安全日志记录和监控失败、服务器端请求伪造以及易受攻击和过时的组件。](https://github.blog/wp-content/uploads/2025/07/vulnerabilities.png?resize=768%2C768)\n*此图表来自 2024 年 Octoverse 报告，详细说明了 CodeQL 在 2024 年识别出的最常见 OWASP 分类漏洞类型。最新数据显示了类似的趋势，强调了尽管几十年来持续发出警告，注入攻击的风险依然存在。*\n\n## 培养安全思维\n\n安全是一个持续的过程，需要不断关注以确保代码安全。自动化工具虽然帮助巨大，但并非一劳永逸的解决方案。因此，理解安全漏洞的成因及其解决办法至关重要。没有工具是 100% 有效的，但通过提高理解和加深知识，将能更好地应对威胁。\n\n## 解释 Actions 工作流注入\n\nGitHub Actions 工作流注入是指恶意攻击者能够提交一个由仓库工作流运行的命令。当攻击者控制数据（例如，创建 issue 标题或分支名称），并且你执行了这些不受信任的输入时，就可能发生这种情况。例如，你可能在工作流的 `run` 部分执行了它。\n\n这种漏洞最常见的原因之一是代码中使用了 `${{}}` 语法。在预处理步骤中，此语法会自动扩展，这种扩展可能会通过插入新命令来改变你的代码。然后，当系统执行代码时，这些恶意命令也会被执行。\n\n**示例：**\n考虑以下工作流：\n```yaml\n- name: print title\n  run: echo \"${{ github.event.issue.title }}\"\n```\n假设此工作流在用户创建 issue 时触发。攻击者可以在 issue 标题中加入恶意代码（例如 `touch pwned.txt`），当此工作流运行时，代码就会被执行。更重要的是，此代码将以工作流被授予的权限运行，而这些权限攻击者通常无法获得。这是 Actions 工作流注入的根本问题。\n\nActions 工作流注入的最大问题在于缺乏对这一问题的认识，以及难以找到所有可能导致此漏洞的实例。\n\n## 主动保护代码的方法\n\n预防漏洞的出现比事后修补更容易。在编写代码时，应牢记以下几点来保护自己免受 Actions 工作流注入的侵害。请记住，即使遵循所有这些准则，也不能保证你完全受到保护。\n\n1.  **使用环境变量：**\n    Actions 工作流注入是由于扩展本应被视为不受信任的输入而发生的。当它被插入到工作流中时，如果包含恶意代码，就会改变预期的行为。然后当工作流触发并执行时，攻击者的代码就会运行。\n    一个解决方案是避免在工作流的 `run` 等部分直接使用 `${{}}` 语法。相反，将不受信任的数据扩展到环境变量中，然后在运行工作流时使用该环境变量。\n    以上述示例为例，它将变为：\n    ```yaml\n    - name: print title\n      env:\n        TITLE: ${{ github.event.issue.title }}\n      run: echo \"$TITLE\"\n    ```\n    这并不会使输入变得可信，但有助于保护你免受攻击者利用此漏洞的一些方式。\n\n2.  **最小权限原则：**\n    当 Actions 工作流注入触发时，它会以工作流被授予的权限运行。你可以通过设置工作流的 `GITHUB_TOKEN` 权限来指定工作流的权限。因此，确保你的工作流仅以执行任务所需的最低权限级别运行非常重要。否则，如果攻击者设法将代码注入你的工作流，你可能会授予他们意想不到的权限。\n\n3.  **谨慎使用 `pull_request_target`：**\n    当注入发生在由 `pull_request_target` 触发的工作流中时，其影响通常比 `pull_request` 更具破坏性。`pull_request` 和 `pull_request_target` 工作流触发器之间存在显著差异：\n    *   `pull_request` 工作流触发器在从 fork 触发时，默认阻止对目标仓库的写入权限和秘密访问。（请注意，当工作流从同一仓库中的分支触发时，它有权访问秘密并可能拥有写入权限。）\n    *   相比之下，`pull_request_target` 工作流触发器允许工作流编写者解除一些限制。虽然这在某些场景中很重要，但这意味着使用 `pull_request_target` 而非 `pull_request` 可能会使你的仓库面临更大的风险。\n    因此，除非你有非常特殊的需求，否则应使用 `pull_request` 触发器。如果你使用后者，鉴于其额外的权限，你需要对工作流格外小心。\n\n4.  **问题不只存在于 `main` 分支：**\n    在开发代码时创建多个分支是很常见的，通常用于各种功能或错误修复。不幸的是，如果你使用 `pull_request_target` 触发器，这些分支仍然是潜在的漏洞。攻击者可以针对在分支的拉取请求上运行的工作流，并仍然利用此漏洞。这意味着你不能仅仅因为针对 `main` 分支的工作流是安全的就认为你的仓库是安全的。你需要审查仓库中所有公开可见的分支。\n\n## CodeQL 的作用\n\nCodeQL 是 GitHub 的代码分析工具，可对你的代码进行自动化安全检查。CodeQL 最相关的特定功能是代码扫描功能，它可以提供有关代码的反馈并帮助识别潜在的安全漏洞。GitHub 最近已将扫描 GitHub Actions 工作流文件的功能普遍可用，你可以使用此功能查找多种类型的漏洞，例如潜在的 Actions 工作流注入风险。\n\nCodeQL 擅长发现不受信任数据可能被使用的地方，原因之一是其**污点追踪**功能。CodeQL 会追踪不受信任数据在代码中的流动，并识别可能不像前面示例那样明显的潜在风险。\n\n启用 CodeQL 扫描 Actions 工作流非常简单，只需使用默认设置启用 CodeQL 代码扫描即可，它会自动包含分析 Actions 工作流，并将在任何受保护的分支上运行。然后，你可以检查代码扫描结果以识别潜在风险并开始修复它们。如果你已经在使用 CodeQL 的高级设置，可以通过将 `actions` 语言添加到目标语言来添加对扫描 Actions 工作流的支持。\n\n虽然 CodeQL 是一个非常有效的工具，并且非常擅长发现这种特定漏洞，但它仍然不是 100% 有效的。请记住，没有工具是完美的，你应该专注于保持安全思维并批判性地审视自己的代码。\n\n## 后续步骤\n\nActions 工作流注入是 GitHub 上最普遍的漏洞之一，但它们相对容易解决。消除此漏洞的最大问题仅仅是意识到它们是一个问题，并发现代码中可能的薄弱环节。既然你已经意识到了这个问题，并且有 CodeQL 作为一个有用的工具，你应该能够开始在自己的代码中查找和修复这些漏洞。如果你牢记主动措施，你将能够更好地防止它们在未来编写的代码中出现。\n\n如果你想了解更多关于 Actions 工作流注入的信息，GitHub 之前发布了一个关于如何保护 Actions 工作流安全的四部分系列文章。第二部分专门讨论 Actions 工作流注入，但我们鼓励你阅读整个系列。\n\n需要帮助搜索代码以查找潜在漏洞吗？立即在你的项目中设置代码扫描。\n\n---\n\n**作者：**\n![Dylan Birtolo](https://avatars.githubusercontent.com/u/39363041?v=4&s=200)\nDylan Birtolo 是 GitHub 的高级内容撰稿人，负责分享 GitHub 的所有优点。他从事技术写作近 20 年，其中大部分时间在微软的各个团队工作。业余时间，他与动物打交道，玩很多游戏，并且是一名专业的马上长矛比武者。\n\n---\n\n**探索更多来自 GitHub 的内容：**\n![Docs 图标](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n**文档**\n掌握 GitHub 所需的一切，尽在一个地方。\n[前往文档](https://docs.github.com/)\n\n![GitHub 图标](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n**GitHub**\n在 GitHub 上构建未来，这里是任何地方的任何人都可以构建任何东西的地方。\n[开始构建](https://github.com/)\n\n![客户案例图标](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n**客户案例**\n了解使用 GitHub 进行构建的公司和工程团队。\n[了解更多](https://github.com/customer-stories)\n\n![GitHub Universe 2025 图标](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)\n**GitHub Universe 2025**\n最后机会：节省 700 美元购买 Universe 现场通行证，并于 10 月 28-29 日在旧金山加入我们。\n[立即注册](https://githubuniverse.com/)",
      "shortSummary": "GitHub Actions 工作流注入是 GitHub 仓库中常见的漏洞，攻击者通过执行不受信任的输入（如 issue 标题）注入恶意命令。为防范此类攻击，建议使用环境变量处理不受信任数据、遵循最小权限原则、谨慎使用 `pull_request_target` 触发器，并检查所有公开分支。GitHub 的 CodeQL 工具通过污点追踪功能，能自动化检测并帮助修复这些漏洞。安全是一个持续过程，结合工具和安全思维是关键。",
      "translated_title": "如何在攻击者之前捕获 GitHub Actions 工作流注入",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/07/vulnerabilities.png?resize=768%2C768",
          "alt": "A bar chart detailing the most common vulnerabilities found by CodeQL in 2024. In order from most to least, they are: injection, broken access control, insecure design, cryptographic failures, identification and authentication failures, security misconfigurations, software and data integrity failures, security logging and monitoring failures, server side request forgery, and vulnerable and outdated components.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://avatars.githubusercontent.com/u/39363041?v=4&s=200",
          "alt": "Dylan Birtolo",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Strengthen your repositories against actions workflow injections — one of the most common vulnerabilities.</p>\n<p>The post <a href=\"https://github.blog/security/vulnerability-research/how-to-catch-github-actions-workflow-injections-before-attackers-do/\">How to catch GitHub Actions workflow injections before attackers do</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "为爱而码：一场充满乐趣、奇思妙想和无限创意的夏季编程马拉松 (原标题: For the Love of Code: a summer hackathon for joyful, ridiculous, and wildly creative projects)",
      "link": "https://github.blog/open-source/for-the-love-of-code-2025/",
      "pubDate": "Wed, 16 Jul 2025 15:00:00 +0000",
      "isoDate": "2025-07-16T15:00:00.000Z",
      "creator": "Lee Reilly",
      "summary": "# 为爱而码：一场充满乐趣、奇思妙想和无限创意的夏季编程马拉松\n\nGitHub 宣布举办一场名为“为爱而码”（For the Love of Code）的全球性夏季编程马拉松，旨在鼓励开发者们出于乐趣、创意和探索精神来构建项目，而不仅仅是为了解决问题。\n\n## 活动时间\n*   2025年7月16日至9月22日。\n\n## 参赛对象\n*   所有经验水平的开发者，包括学生、维护者、业余爱好者、创意编码者、资深专业人士和好奇的初学者。\n*   可选择个人参赛或组队（团队人数上限为10人）。\n*   参赛者需年满13岁并拥有GitHub账户（部分地区可能受法律限制）。\n\n## 参赛内容\n*   参赛者可以构建任何他们想做的项目，包括但不限于：Web应用、命令行工具（CLI）、游戏、AI探索或创意实验。\n*   鼓励独立完成、与朋友合作或借助GitHub Copilot。\n*   鼓励使用开源项目、复用旧想法或原型（只要在活动期间构建或重建）。\n*   可以使用付费工具、许可软件或API，但需在README中注明，并避免提交敏感信息。\n*   非传统软件项目（如硬件破解、交互艺术、生成式项目）只要涉及代码并能在公共GitHub仓库中托管，也符合要求。\n*   禁止构建任何不尊重、不安全、有害或违反GitHub行为准则的内容（如NSFW内容、仇恨言论）。\n\n## 参赛类别（六大主题）\n1.  **按钮、蜂鸣与闪光（Buttons, beeps, and blinkenlights）**\n    *   涉及硬件（真实或模拟）的项目，具有闪烁、蜂鸣、嗡嗡声或带来惊喜的特点。强调互动性、物理性、触觉性和一点点混乱感。\n    *   *示例：* 显示构建状态的交通灯、测试通过时会喊“LGTM!”的焊接小助手、检测老板靠近时显示“实际工作”的屏幕、笔记本开合驱动的摩尔斯电码生成器、在ESP32 T-Display上可视化吉他音符的Rust项目。\n2.  **变革的代理（Agents of change）**\n    *   AI驱动的体验、代理或传统机器人，它们可以提供帮助、制造障碍或产生有趣的误解。涵盖自动化工作流、代码评审或荒谬的助手类项目。\n    *   *示例：* LLM驱动的过度戏剧化更新日志编写器、以讽刺高级开发人员或过于友善的实习生口吻评审PR的代理、AI辅助的餐厅账单分摊应用、Shania Twain风格的Slack或Discord机器人。\n3.  **终端才华（Terminal talent）**\n    *   巧妙、实用或纯粹有趣的命令行工具、扩展和TUI（文本用户界面）项目。具有个性的实用工具、精心设计的界面或让终端更生动的脚本。\n    *   *示例：* 命令行卡拉OK机、基于Issue和PR提供每日运势的GitHub CLI扩展、自动化长期未处理事项的交互式工具、终端动画派对鹦鹉、机械键盘声音模拟器。\n4.  **游戏时间（Game on）**\n    *   可玩、益智或纯粹有趣的项目。涵盖各种互动体验，如游戏原型、机制混搭或类型融合。强调怀旧、巧妙或原创性，乐趣优先，功能其次。\n    *   *示例：* 复古街机游戏、AI生成情节和NPC的冒险游戏、使用Copilot构建的垂直跳跃游戏、Octocats版的Flappy Bird克隆、在GitHub代码行中下落的垂直滚动游戏。\n5.  **世界奇观（World wide wonders）**\n    *   任何能让人微笑、思考、学习或点击“查看源代码”的Web项目。无论是初次HTML尝试、已计划发布的工具，还是具有意外用途的有趣副项目。\n    *   *示例：* 基于GitHub用户名和贡献记录进行“吐槽”的Web应用、具有拨号上网加载效果和像素艺术的90年代风格网站、需要杀死Doom中敌人才能通过的验证码、交互式随机复古科幻仪表板。\n6.  **包罗万象（Everything but the kitchen sink）**\n    *   为那些过于小众、特定或难以归类的创意项目而设的通配符类别。包括扩展、插件、工具、GitHub Actions或意外有用的原型。\n    *   *示例：* 提交代码时播放情景喜剧笑声的Git Hook、为函数提供Yelp式评论的VS Code扩展、如果团队本周没有合并带有正面表情符号的PR就拒绝部署的GitHub Action、纯粹为了重写而用Rust重写的项目、将宠物带入编辑器的VS Code扩展。\n\n## 奖项设置\n*   **互联网永生：** 优秀作品将在GitHub博客上展示。\n*   **GitHub Copilot Pro+：** 每个类别获奖者将获得12个月的GitHub Copilot Pro+订阅。\n*   **荣誉与氛围：** 以及一个终于可以构建心仪项目的绝佳理由。\n*   **真正的奖品：** 从事你热爱的事情。\n*   每位参赛者最多获得一份奖品，但其他优秀作品仍会获得表彰。\n\n## GitHub Copilot的鼓励使用\n*   Copilot不仅是代码补全工具，更是创意伙伴，可用于头脑风暴、解释代码等。\n*   鼓励参赛者探索Copilot的创意用途，包括Agent模式。\n\n## 如何参与\n1.  构建一个充满乐趣的项目（个人、与朋友或与Copilot合作）。\n2.  在2025年9月22日世界协调时间（AoE）晚上11:59之前，将代码推送到公共GitHub仓库。\n3.  通过官方提交表格提交作品。\n4.  在项目进展中添加标签`#ForTheLoveOfCode`，优秀作品将在社交媒体和GitHub Explore页面上展示。\n\n## 规则要点\n*   鼓励使用开源。\n*   鼓励使用GitHub Copilot，但非强制。\n*   最多可提交42个项目。\n*   项目必须在公共GitHub仓库中，并附有清晰的README文件。\n*   请查阅完整的条款和条件以及行为准则。\n\n## 评判标准\n*   由GitHub Stars、Campus Experts和工作人员组成的评审团将根据项目的乐趣性、执行力、技术难度、独创性以及与类别的相关性进行评估。\n*   对GitHub Copilot的意外使用将获得额外加分（非实际分数）。\n*   每个类别将选出三名获奖者，并于2025年10月22日前在GitHub博客上公布。\n\n## 常见问题\n*   **团队合作：** 可以，最多10人。\n*   **提交次数：** 最多42次。\n*   **时间投入：** 随意，可短可长。\n*   **新手参与：** 欢迎，提供了入门资源。\n*   **截止日期后编辑：** 仓库可继续工作，但评判以截止日期版本为准。\n*   **提交表单错误：** 重新提交即可，以最新版本为准。\n*   **README内容：** 应包含工具、依赖、设置说明，并考虑添加`#ForTheLoveOfCode`主题。\n*   **视频/演示：** 非强制，但强烈鼓励（GIF、截图、短视频有助于展示）。\n*   **外部托管演示：** 可以，但代码仍需在公共GitHub仓库中。\n*   **项目展示：** 提交即表示同意GitHub在选中时展示项目并注明出处。",
      "shortSummary": "GitHub将举办“为爱而码”夏季编程马拉松，时间为2025年7月16日至9月22日。该活动鼓励所有水平的开发者，无论是个人还是团队，构建充满乐趣、创意和独特性的项目，涵盖硬件、AI、游戏和Web应用等六大类别。参赛者可自由选择是否使用GitHub Copilot。优胜者将获得GitHub博客展示和Copilot Pro+订阅。活动旨在激发编程乐趣和创造力，项目将根据乐趣性、执行力和独创性进行评判。",
      "translated_title": "为爱而码：一场充满乐趣、奇思妙想和无限创意的夏季编程马拉松",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>That idea you've been sitting on? The domain you bought at 2AM? A silly or serious side project? This summer, we invite you to build it — for the joy, for the vibes, For the Love of Code 🧡</p>\n<p>The post <a href=\"https://github.blog/open-source/for-the-love-of-code-2025/\">For the Love of Code: a summer hackathon for joyful, ridiculous, and wildly creative projects</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "从混乱到清晰：使用GitHub Copilot代理改进开发者工作流程 (原标题: From chaos to clarity: Using GitHub Copilot agents to improve developer workflows)",
      "link": "https://github.blog/ai-and-ml/github-copilot/from-chaos-to-clarity-using-github-copilot-agents-to-improve-developer-workflows/",
      "pubDate": "Tue, 15 Jul 2025 16:00:00 +0000",
      "isoDate": "2025-07-15T16:00:00.000Z",
      "creator": "Chris Reddington",
      "summary": "## 从混乱到清晰：使用GitHub Copilot代理改进开发者工作流程\n\n现代软件开发项目初期可能结构松散，但随着发展，这些早期努力可能变得脆弱。本文通过一个实际案例，展示了如何利用GitHub Copilot编码代理（agent）来重构和增强一个个人GitHub Actions项目，使其从一个零散的工具转变为一个结构良好、测试覆盖、文档齐全且易于维护的项目。\n\n### 核心案例：`validate-file-exists` GitHub Action\n\n作者在2024年11月（原文如此，可能为笔误）创建了一个名为`validate-file-exists`的GitHub Action，旨在确保仓库中存在特定文件（如`dependabot.yml`）。尽管功能可用，但它缺乏文档、元数据不一致、输入验证不足，并且没有为Copilot提供清晰的自定义指令或设置步骤。本文详细介绍了如何使用Copilot代理模式在VS Code中解决这些问题。\n\n### 关键改进步骤\n\n1.  **改进Copilot自定义指令 (`copilot-instructions.md`)**\n    *   **问题：** 原始指令过于简略，缺乏仓库目的、用法、结构描述以及对Copilot的明确指导。\n    *   **行动：** 基于最佳实践，要求Copilot根据代码库更新指令，使其包含：\n        *   仓库/代码库的清晰摘要和Action功能。\n        *   贡献指南（如何构建、格式化、lint和测试代码库，包括提交前的期望）。\n        *   项目结构概述。\n        *   关键技术原则（严格的TypeScript、TSDoc、专注且可管理的功能）。\n    *   **结果：** Copilot获得了正确的上下文，能够进行有意义的贡献。文章中提供了更新后的指令示例。\n\n2.  **添加`copilot-setup-steps.yaml`**\n    *   **目的：** 为Copilot编码代理提供必要的工作环境，包括安装框架、依赖项和工具。\n    *   **行动：** 根据GitHub文档创建`.github/copilot-setup-steps.yaml`文件。该文件负责检出代码、设置Node.js并安装所需的依赖项。作者将Node.js版本配置为从`.node-version`文件获取，以与CI工作流保持一致。\n    *   **结果：** Copilot编码代理具备了构建、lint和测试代码库所需的依赖项和工具，使其能够在进行更改时检查质量。\n\n3.  **让Copilot发现技术债务**\n    *   **行动：** 使用VS Code中的Copilot Chat，询问Copilot项目中的技术债务，并要求提供优先列表，以便创建GitHub Issue，包含问题陈述、验收标准和文件修改建议。\n    *   **Copilot的建议：**\n        *   包元数据不一致。\n        *   README不匹配（输入名称错误）。\n        *   对空或格式错误的输入缺乏验证。\n    *   **行动：** 要求Copilot为这些问题编写一个Issue，并将其分配给Copilot。\n\n4.  **Copilot编码代理实际操作**\n    *   **过程：** 任务分配后，代理异步地启动了一个新的拉取请求（PR）。它探索了仓库内容以理解问题，制定了计划，并执行了以下操作：\n        *   修复了`package.json`中的名称、描述、URL和作者字段。\n        *   更新了README使用示例以匹配代码。\n        *   添加了输入验证逻辑（拒绝空字符串、仅包含逗号的输入）。\n        *   为这些边缘情况编写了四个新测试。\n        *   确认了linting、格式化和代码覆盖率完好无损。\n        *   更新了PR正文，附带已完成工作的清单。\n    *   **结果：** Copilot在11分钟内完成了所有任务。尽管CI工作流最初因作者未在指令中包含的Markdown linting检查而失败，但通过在PR评论中要求Copilot修复，它成功更新了代码，并通过了检查。\n\n### 额外案例：使用Copilot编码代理和Playwright MCP服务器进行UI更改\n\n作者还展示了Copilot在另一个项目（一个基于Next.js和Tailwind CSS的Trend Radar可视化应用）中进行UI更改的能力。\n\n*   **问题：** 用户必须手动输入点数据。\n*   **期望解决方案：** 允许用户点击雷达放置点，并支持拖放重新定位以更改点的类别或可能性。\n*   **Copilot的工作：** 在几次PR评论迭代后，Copilot编码代理实现了点击放置逻辑、添加了拖放支持、编写了单元测试、截取了屏幕截图并附加到PR中，并更新了PR（并回复评论）以总结已完成的工作。\n*   **重要说明：** Playwright现在默认安装在Copilot编码代理中，这使得Copilot也能够验证视觉行为。\n\n### 总结与展望\n\n此次经历不仅是一次清理会话，更是现代软件协作的实践。GitHub Copilot编码代理被视为新的团队成员。通过为仓库提供清晰的上下文和意图，可以邀请Copilot进行有意义的贡献。作者鼓励开发者尝试使用Copilot代理来清理旧的GitHub Action、重构被忽视的仓库或添加验证和测试。关键在于：\n\n*   编写清晰简洁的`copilot-instructions.md`来指导代理。\n*   使用`copilot-setup-steps.yaml`为代理提供所需的工具。\n*   设定清晰且范围明确的任务。\n\nCopilot现在通过Playwright MCP服务器可以访问浏览器，从而能够与网页交互并添加屏幕截图到PR中。开发者无需启动新项目，即可在现有项目上尝试Copilot及其代理能力。\n\n**作者：**\n\n![Chris Reddington](https://avatars.githubusercontent.com/u/791642?v=4&s=200)\n\nChris Reddington 是GitHub开发者关系团队中一位充满热情的开发者倡导者和高级项目经理。\n\n**更多来自GitHub的资源：**\n\n*   **文档：**\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n    掌握GitHub所需的一切，尽在一处。\n*   **GitHub：**\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n    在GitHub上构建未来，这里是任何人、任何地点构建任何东西的地方。\n*   **客户案例：**\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n    了解使用GitHub进行构建的公司和工程团队。\n*   **GitHub Universe 2025：**\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)\n    最后机会：节省700美元购买Universe现场通行证，于10月28-29日在旧金山加入我们。",
      "shortSummary": "本文介绍了如何利用GitHub Copilot编码代理改进开发者工作流程。通过一个GitHub Action项目案例，作者展示了Copilot如何帮助完善自定义指令、配置开发环境、识别并解决技术债务，以及在拉取请求中协作。Copilot还被用于一个UI项目的迭代改进，并能通过Playwright进行视觉验证。文章强调了清晰的指令和任务范围对Copilot协作的重要性，鼓励开发者在现有项目中尝试Copilot的代理能力，将其视为一个高效的团队成员。",
      "translated_title": "从混乱到清晰：使用GitHub Copilot代理改进开发者工作流程",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/791642?v=4&s=200",
          "alt": "Chris Reddington",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Explore how you can set Copilot coding agent up for success with custom instruction and Copilot setup steps.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/from-chaos-to-clarity-using-github-copilot-agents-to-improve-developer-workflows/\">From chaos to clarity: Using GitHub Copilot agents to improve developer workflows</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-07-29T04:55:09.017Z"
}