{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "GitHub Copilot 中的 GPT-5：我如何在 60 秒内构建一个游戏 (原标题: GPT-5 in GitHub Copilot: How I built a game in 60 seconds)",
      "link": "https://github.blog/ai-and-ml/generative-ai/gpt-5-in-github-copilot-how-i-built-a-game-in-60-seconds/",
      "pubDate": "Thu, 14 Aug 2025 16:30:00 +0000",
      "isoDate": "2025-08-14T16:30:00.000Z",
      "creator": "Kedasha Kerr",
      "summary": "## GitHub Copilot 中的 GPT-5：革新开发工作流\n\n本文探讨了 OpenAI 最新的 GPT-5 模型在 GitHub Copilot 中的应用，以及 GitHub 模型上下文协议（MCP）服务器如何共同改变开发者的工作方式。作者分享了如何利用这些工具在短时间内构建游戏并自动化 GitHub 工作流的经验。\n\n### GPT-5 的强大能力\n\nGPT-5 是 OpenAI 迄今为止最先进的模型，现已集成到 GitHub Copilot 中，可在 VS Code 的问答、编辑和代理模式下使用。其显著特点包括：\n\n*   **卓越的推理能力**：能够处理复杂任务并提供高质量的建议。\n*   **惊人的速度**：响应时间极快，几乎即时提供建议，显著提升开发流程的流畅性。\n*   **易于启用**：在 Copilot 界面中打开模型选择器，选择 GPT-5 (Preview) 即可开始使用。企业用户需由管理员选择启用。\n\n![A screenshot showing GPT-5 (Preview) available in the model picker drop-down menu within GitHub Copilot.](https://github.blog/wp-content/uploads/2025/08/gpt5.png?resize=521%2C501)\n\n### 60 秒构建 Magic Tiles 游戏实测\n\n作者通过一个实时测试展示了 GPT-5 的强大功能：在不到 60 秒内构建了一个 Magic Tiles 游戏原型。其方法论是“规范驱动开发”：\n\n1.  **让 AI 创建产品需求**：首先向 GPT-5 询问游戏的核心 MVP 规范，包括任务分解、核心玩法循环、最小功能集、数据模型结构和清晰的构建清单。这强调了为大型语言模型提供上下文的重要性。\n2.  **通过简单提示进行构建**：在获得 MVP 规范后，只需简单地提示“构建这个”。GPT-5 智能地选择了 HTML、CSS 和 JavaScript，并创建了一个基于 Canvas 的游戏，包含输入处理、得分、连击追踪、速度提升和游戏结束功能。整个构建过程在不到一分钟内完成。\n3.  **使用自然语言迭代**：当需要添加用户说明时，作者直接用自然语言提问，GPT-5 立即更新了 HTML 并提供了后续功能建议，实现了流畅的对话式开发体验。\n\n### GitHub 模型上下文协议（MCP）服务器\n\nMCP 是一种连接 AI 助手与外部工具和应用程序的标准，它充当 LLM 与 GitHub 仓库、Gmail 账户、SQL 服务器、Figma 项目等之间沟通的桥梁。通过 MCP，LLM 不再孤立，而是成为强大的自动化引擎。\n\n**设置 MCP 服务器**：\n\n设置 GitHub MCP 服务器非常简单，只需不到 5 分钟：\n\n1.  在工作区根目录创建 `.vscode/mcp.json` 配置文件。\n2.  点击 MCP 配置中的“启动”按钮，通过标准的 GitHub OAuth 流程进行认证。\n3.  认证后，GitHub MCP 服务器工具即可在 Copilot 界面中使用。\n\n**MCP 自动化实例**：\n\n*   **用自然语言创建仓库**：作者通过简单地向 Copilot 提问，便成功创建了 GitHub 仓库，并将本地代码推送到新仓库，无需切换到浏览器。\n*   **从自然语言批量创建议题**：作者让 Copilot 建议应用改进，然后指示其为“低投入快速改进”创建 GitHub 议题。Copilot 立即创建了五个格式正确的议题，包含描述性标题、详细说明、实施建议和适当的标签。这极大地简化了项目想法的捕获和管理。\n\n### 革命性的工作流\n\nGPT-5 和 GitHub MCP 服务器的结合带来了以下革命性优势：\n\n*   **速度与上下文保留**：GPT-5 的处理速度有助于开发者保持“心流”状态，提升开发体验的流畅性。\n*   **自然语言作为开发界面**：消除了在不同工具之间切换、手动格式化或进行上下文切换的摩擦，实现了意图驱动的自动化。\n*   **人机协作自动化**：AI 处理繁琐部分，而开发者保留控制权，例如可以取消 AI 直接推送到主分支的操作。\n\n### 行动计划\n\n鼓励开发者立即尝试 GPT-5 和 GitHub MCP 服务器：\n\n*   在 GitHub Copilot 中启用 GPT-5，尝试代理模式和规范驱动的开发方法。\n*   设置 GitHub MCP 服务器，并通过自然语言自动化 GitHub 工作流，例如创建仓库、生成议题、自动化分支和拉取请求。\n\n未来，这种组合预示着从手动、界面驱动的工作流向对话式、意图驱动的自动化的重大转变。作者计划在下次直播中从头开始构建一个自定义 MCP 服务器。\n\n![Kedasha Kerr](https://avatars.githubusercontent.com/u/47188731?v=4&s=200) Kedasha Kerr 是 GitHub 的开发者倡导者，致力于分享经验并帮助开发者社区。\n\n探索更多 GitHub 资源：\n\n![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) 文档\n\n![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub\n\n![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) 客户案例\n\n![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025",
      "shortSummary": "GPT-5 已集成到 GitHub Copilot，显著提升开发速度和代码质量。作者展示了如何利用 GPT-5 在 60 秒内构建游戏，采用“规范驱动开发”和自然语言迭代。同时，GitHub 模型上下文协议（MCP）服务器使 AI 能通过自然语言自动化 GitHub 工作流，如创建仓库和批量生成议题。这些工具共同实现了更流畅、高效且人机协作的开发体验，标志着向意图驱动自动化的转变。",
      "translated_title": "GitHub Copilot 中的 GPT-5：我如何在 60 秒内构建一个游戏",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/gpt5.png?resize=521%2C501",
          "alt": "A screenshot showing GPT-5 (Preview) available in the model picker drop-down menu within GitHub Copilot.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://avatars.githubusercontent.com/u/47188731?v=4&s=200",
          "alt": "Kedasha Kerr",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>How GitHub's new MCP server and GPT-5 are revolutionizing developer workflows — with live build examples.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/gpt-5-in-github-copilot-how-i-built-a-game-in-60-seconds/\">GPT-5 in GitHub Copilot: How I built a game in 60 seconds</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "2025年第一季度创新图谱更新：条形图竞赛、数据可视化兴起及关键研究 (原标题: Q1 2025 Innovation Graph update: Bar chart races, data visualization on the rise, and key research)",
      "link": "https://github.blog/news-insights/policy-news-and-insights/q1-2025-innovation-graph-update-bar-chart-races-data-visualization-on-the-rise-and-key-research/",
      "pubDate": "Thu, 14 Aug 2025 16:00:00 +0000",
      "isoDate": "2025-08-14T16:00:00.000Z",
      "creator": "Kevin Xu",
      "summary": "# GitHub创新图谱2025年第一季度更新\n\nGitHub创新图谱旨在为开发者、研究人员和政策制定者提供一种便捷的方式，以探索和分析全球开源软件开发趋势。它提供了一个可靠、透明的数据集，用于追踪全球范围内的公共协作活动。本次最新季度更新包含了截至2025年3月的数据，使得创新图谱涵盖了超过五年的全球软件经济洞察。数据可视化和人工智能（AI）持续获得发展势头，创新图谱正日益成为任何希望将其工作建立在可信、真实开发者数据基础之上的人员的宝贵资源。\n\n## 新功能与趋势\n\n*   **条形图竞赛视频上线**\n    *   我们已在“Git推送”、“仓库”、“开发者”和“组织”等全球指标页面添加了条形图竞赛视频，以更生动地展示数据趋势。\n\n*   **数据可视化进入热门话题排行榜**\n    *   在2025年第一季度，“data-visualization”主题首次进入按唯一推送者数量排名的前50名，位列第50位。\n    *   ![显示“data-visualization”仓库主题在2025年第一季度排名第50位的图表截图。这是它首次也是唯一一次出现在图表上。](https://github.blog/wp-content/uploads/2025/08/data_visualization_topic.png?resize=1024%2C156)\n    *   从2020年第一季度的第100位开始，这是一个艰辛的旅程，其排名稳步上升。\n    *   ![显示“data-visualization”仓库主题随时间排名的折线图。其排名从2020年第一季度的第100位稳步上升到2025年第一季度的第50位，在2022年第一季度曾短暂飙升至约第70位。](https://github.blog/wp-content/uploads/2025/08/data_visualization_historical_rank.png?resize=1024%2C368)\n\n*   **AI和LLM主题的快速增长**\n    *   并非所有仓库主题都像“ai”和“llm”那样拥有如此迅速的上升轨迹。\n    *   “ai”主题从2023年第三季度的第25位迅速上升到2025年第一季度的第8位。\n    *   ![显示“ai”仓库主题随时间快速上升的凸起图，从2023年第三季度的第25位上升到2025年第一季度的第8位。](https://github.blog/wp-content/uploads/2025/08/ai_topic.png?resize=518%2C1024)\n    *   “llm”主题从2024年第二季度的第24位迅速上升到2025年第一季度的第11位。\n    *   ![显示“llm”仓库主题随时间快速上升的凸起图，从2024年第二季度的第24位上升到2025年第一季度的第11位。](https://github.blog/wp-content/uploads/2025/08/llm_topic.png?resize=410%2C1024)\n\n## 关键研究综述\n\n以下是一些近期引起我们兴趣并利用了GitHub和创新图谱数据的研究报告和论文：\n\n1.  **2025年AI指数报告**\n    *   由斯坦福大学以人为本AI研究所（HAI）发布，追踪AI发展和扩散趋势。\n    *   报告第1.6节分析了GitHub上公共AI相关软件项目随时间的变化，显示2024年急剧增加。\n\n2.  **企业加速器与全球创业增长**\n    *   研究发现，参与企业加速器项目使初创公司未来融资增加超过40%。\n    *   创新图谱数据被用作衡量区域技术劳动力能力的指标。\n\n3.  **软件工作的构建块解释编码职业和语言流行度**\n    *   研究人员分析了StackOverflow，开发了一个大规模、细粒度的软件开发任务分类法。\n    *   发现Python开发者更有可能从事与更高薪资相关的任务，这可能因为Python的多功能性使他们更容易掌握不同且不熟悉的领域技能。\n    *   创新图谱数据用于评估StackOverflow用户使用的编程语言分布的代表性。\n\n4.  **谁在使用AI编码？生成式AI的全球扩散与影响**\n    *   研究人员训练了一个分类器来检测AI生成的Python函数，发现美国开发者在GitHub上提交的Python函数中有30%是AI生成的。\n    *   这导致季度总提交量增加了2.4%，每年估计产生96-144亿美元的价值。\n\n5.  **社会能力评估框架：衡量高级AI对脆弱性、韧性和转型的含义**\n    *   研究人员开发了一种基于指标的方法，从三个维度评估社会对高级AI的韧性：结构性因素（“脆弱性”）、预防、吸收和从AI风险中恢复的能力（“韧性”），以及利用AI系统减轻AI风险并重构社会以实现系统性安全的能力（“转型”）。\n    *   创新图谱在原型框架中被引用为衡量社会在网络安全领域人力资本的数据来源。",
      "shortSummary": "GitHub创新图谱2025年第一季度更新，涵盖五年多数据。本次更新新增了条形图竞赛视频，并显示“数据可视化”主题首次进入前50名。AI和LLM主题持续快速增长。此外，多项利用创新图谱数据的研究被突出，涵盖AI发展趋势、企业加速器对创业的促进、编程语言流行度、AI生成代码的影响以及社会对高级AI的韧性评估。",
      "translated_title": "2025年第一季度创新图谱更新：条形图竞赛、数据可视化兴起及关键研究",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/data_visualization_topic.png?resize=1024%2C156",
          "alt": "Screenshot of a chart that shows that the “data-visualization” repository topic is at rank 50 in Q1 2025. This is the first and only time it appears on the chart.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/data_visualization_historical_rank.png?resize=1024%2C368",
          "alt": "A line chart that shows the rank of the “data-visualization” repository topic over time. Its rank rose steadily from rank 100 in Q1 2020 to rank 50 in Q1 2025, with a temporary spike to approximately rank 70 in Q1 2022.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/ai_topic.png?resize=518%2C1024",
          "alt": "A bump chart that shows the rapid rise of the “ai” repository topic over time, starting at rank 25 in Q3 2023 to rank 8 in Q1 2025.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/llm_topic.png?resize=410%2C1024",
          "alt": "A bump chart that shows the rapid rise of the “llm” repository topic over time, starting at rank 24 in Q2 2024 to rank 11 in Q1 2025.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://avatars.githubusercontent.com/u/4744405?v=4&s=200",
          "alt": "Kevin Xu",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Discover the latest trends and insights on public software development activity on GitHub with the quarterly release of data for the Innovation Graph, updated through March 2025.</p>\n<p>The post <a href=\"https://github.blog/news-insights/policy-news-and-insights/q1-2025-innovation-graph-update-bar-chart-races-data-visualization-on-the-rise-and-key-research/\">Q1 2025 Innovation Graph update: Bar chart races, data visualization on the rise, and key research</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub 可用性报告：2025 年 7 月 (原标题: GitHub Availability Report: July 2025)",
      "link": "https://github.blog/news-insights/company-news/github-availability-report-july-2025/",
      "pubDate": "Wed, 13 Aug 2025 21:00:00 +0000",
      "isoDate": "2025-08-13T21:00:00.000Z",
      "creator": "Jakub Oleksy",
      "summary": "# GitHub 2025 年 7 月可用性报告\n\nGitHub 在 2025 年 7 月经历了一起导致服务性能下降的事件。\n\n## 事件详情\n*   **发生时间**：2025 年 7 月 28 日世界协调时 21:41，持续 5 小时 34 分钟，直至 7 月 29 日世界协调时 03:15。\n*   **受影响服务**：GitHub Enterprise Importer (GEI)。\n*   **影响**：GEI 处于降级状态，无法处理迁移任务。\n*   **原因**：调查发现，GEI 基础设施的一个组件在例行内部改进实施期间被错误地移除服务，且无法恢复到之前的配置。\n*   **解决方案**：需要配置新的资源来解决此事件。\n\n## 已实施的改进\nGitHub 已识别并实施了以下改进措施：\n*   增强基础设施恢复能力。\n*   进行单元测试。\n*   利用测试数据进行更有效的验证。\n\n## 客户所需操作：更新 IP 允许列表\n由于上述改进，客户需要将新的 IP 范围添加到其已启用的 IP 允许列表中。\n\n### 新的 GEI IP 范围（需添加）：\n*   `20.99.172.64/28`\n*   `135.234.59.224/28`\n\n### 不再使用的 GEI IP 范围（可移除）：\n*   `40.71.233.224/28`\n*   `20.125.12.8/29`\n\n### 需要更新的 IP 允许列表类型：\n*   您的目标 `github.com` 组织或企业上的 IP 允许列表。\n*   如果您从 `github.com` 运行迁移，则需更新您的源 `github.com` 组织或企业上的 IP 允许列表。\n*   如果您从 GitHub Enterprise Server、Bitbucket Server 或 Bitbucket Data Center 实例运行迁移，则需更新您配置的 Azure Blob Storage 或 Amazon S3 存储账户上的允许列表。\n*   如果您从 Azure DevOps 运行迁移，则需更新您的 Azure DevOps 组织上的允许列表。\n\n## 通知与支持\n在过去 90 天内使用 GitHub Enterprise Importer 运行过迁移的用户已收到关于此更改的电子邮件提醒。如有任何迁移相关问题，请联系客户支持。\n\n## 更多信息\n*   请关注 GitHub 状态页面以获取实时更新和事件后总结。\n*   访问 GitHub 工程博客了解更多工作进展。\n\n---\n**作者：**\n![Jakub Oleksy](https://avatars.githubusercontent.com/u/6147691?v=4&s=200) Jakub Oleksy\n\n---\n**探索更多 GitHub 资源：**\n\n*   **文档**\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n    掌握 GitHub 所需的一切，尽在一处。\n*   **GitHub**\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n    在 GitHub 上构建未来，这里是任何人、任何地点构建任何事物的平台。\n*   **客户案例**\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n    了解使用 GitHub 进行构建的公司和工程团队。\n*   **GitHub Universe 2025**\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)\n    最后机会：节省 700 美元购买 Universe 现场通行证，于 10 月 28-29 日在旧金山加入我们。",
      "shortSummary": "GitHub 2025 年 7 月报告了一起持续 5 小时 34 分钟的事件，导致 GitHub Enterprise Importer (GEI) 迁移服务降级。原因是例行改进中基础设施组件被错误移除。为解决此问题，GitHub 配置了新资源并实施了恢复、测试和验证改进。用户需更新 IP 允许列表，添加新的 GEI IP 范围并移除旧范围。受影响用户已收到邮件通知。",
      "translated_title": "GitHub 可用性报告：2025 年 7 月",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/6147691?v=4&s=200",
          "alt": "Jakub Oleksy",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>In July, we experienced one incident that resulted in degraded performance across GitHub services.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/github-availability-report-july-2025/\">GitHub Availability Report: July 2025</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "从私有到公开：联合国组织如何分四步开源其技术 (原标题: From private to public: How a United Nations organization open sourced its tech in four steps)",
      "link": "https://github.blog/open-source/social-impact/from-private-to-public-how-a-united-nations-organization-open-sourced-its-tech-in-four-steps/",
      "pubDate": "Wed, 13 Aug 2025 16:00:00 +0000",
      "isoDate": "2025-08-13T16:00:00.000Z",
      "creator": "Joshua Ku",
      "summary": "# 联合国组织开源技术之旅\n\n本文详细介绍了联合国专门机构国际电信联盟电信发展局（ITU BDT）如何通过与GitHub合作，在六个月内将其技术从封闭的Azure DevOps环境成功过渡到开放源代码社区的经验。这一转变旨在赋能全球合作伙伴，促进更广泛的贡献，并利用开源生态系统扩大其影响力，尤其对于预算和团队有限的联合国组织及非营利机构而言，开源具有显著优势。\n\n经过六个月的演示、讲解、研讨会和反馈会议，BDT在开源软件产品方面显著提升了专业知识，包括：\n*   审查了开发和发布软件文档的最佳实践。\n*   获得了选择合适许可证和创建必要支持文档的专业知识。\n*   掌握了管理贡献和确保代码库安全性的技能。\n*   获得了关于开源软件各方面的宝贵建议。\n\n以下是实现这一转变的四个关键步骤：\n\n## 1. 进行研究\n\n团队首先研究了他们喜欢和不喜欢的开源代码库，以确定要借鉴的经验。一个好的代码库应能让访问者通过README文件迅速了解项目需求及参与的益处，并展示对贡献者和社区的价值。研究内容包括：\n*   其他项目如何构建问题。\n*   社区如何运作。\n*   贡献指南是什么。\n*   模拟作为贡献者遇到的困难，并思考改进方案。\n\n通过研究各种成熟度不同的代码库，团队对开源世界的广阔范围有了清晰的认识。推荐的灵感来源包括Ersilia和Terraform，它们也是活跃社区的典范。\n\n## 2. 完善开放和公开的心态并应用于软件领域\n\n在从其他代码库获得启发后，下一步是处理自己的代码。这包括：\n*   **代码清理**：决定哪些代码可以公开，哪些需要清除敏感信息（如内部引用、商业或不兼容许可证的内容），并在必要时创建示例数据。使用示例数据时，务必提供数据格式指南。\n*   **项目塑造**：明确回答以下关键问题：\n    *   为什么有人会想要贡献？\n    *   是否有清晰的入门指南？\n    *   有哪些工作流程和流程来支持贡献者的成功？\n*   **关键文档**：\n    *   **“入门指南”（Getting Started guide）**：包含如何从零开始准备本地环境的信息，确保新开发者知道需要安装什么才能开始贡献。\n    *   **`CONTRIBUTING.md` 文件**：一份关于项目贡献者期望和责任的指南。\n*   **自动化测试**：在引入外部开发者贡献时，自动化测试和代码检查（linting）对于确保代码质量至关重要。\n\n## 3. 确定许可证\n\n选择开源许可证至关重要，否则他人无法合法使用您的项目。`choosealicense.com` 是一个优秀的资源，可帮助选择合适的许可证。不同的许可证有不同的义务：\n*   **义务极少**：如CC0许可证。\n*   **要求署名**：如Apache 2.0、BSD或MIT许可证。\n*   **要求共享源代码**：如GPL或AGPL许可证。\n\n选择许可证时，需考虑与项目中所有依赖项的许可证兼容性，并确保其有助于开源社区利用您的项目（例如，如果项目旨在嵌入其他项目）。ITU团队最终选择了BSD-2许可证，因为它是一种宽松的许可证，明确要求源代码和二进制文件的再分发必须附带署名。\n\n## 4. 吸引贡献者\n\n为了吸引贡献者，可以识别项目中任何“小痛点”（small papercuts），将其设置为易于解决的问题。这些问题可以转化为GitHub Issue，并标记为`good first issue`，这有助于刚接触开源或新加入代码库的开发者快速上手并熟悉代码库。\n\n## 总结与展望\n\nBDT与GitHub的合作探索了如何最好地开源其软件产品。认识到开源在增强全球访问、包容性和协作方面的机遇，团队旨在更广泛地提供软件工具，并吸引更广泛的开发者社区参与。通过此次合作，团队获得了关于如何使其代码库符合开源最佳实践的指导，并参与了实践环节，学习如何管理贡献和与外部开发者协作。这种结构化的方法为开源参与奠定了坚实的基础。在此进展的基础上，ITU团队致力于开源更多软件产品，并已更好地准备好清晰自信地继续这项工作。从私有到公开可能令人望而生畏，但通过循序渐进，您可以转变思维方式，并看到您的项目不断发展。\n\n**作者**：\n![Joshua Ku](https://avatars.githubusercontent.com/u/106406727?v=4&s=200)",
      "shortSummary": "联合国国际电信联盟电信发展局（ITU BDT）通过与GitHub合作，成功将其技术从封闭环境开源。为期六个月的项目分四步进行：研究现有开源项目、清理并公开代码、选择合适的开源许可证，以及通过“好上手问题”吸引贡献者。此举旨在扩大影响力，促进全球合作与包容性，使BDT能更好地利用开源生态系统，并为未来开源更多项目奠定基础。",
      "translated_title": "从私有到公开：联合国组织如何分四步开源其技术",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/106406727?v=4&s=200",
          "alt": "Joshua Ku",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn how the International Telecommunication Union made the switch to open source, and how you can too!</p>\n<p>The post <a href=\"https://github.blog/open-source/social-impact/from-private-to-public-how-a-united-nations-organization-open-sourced-its-tech-in-four-steps/\">From private to public: How a United Nations organization open sourced its tech in four steps</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "我们为何开源MCP服务器，以及这对您意味着什么 (原标题: Why we open sourced our MCP server, and what it means for you)",
      "link": "https://github.blog/open-source/maintainers/why-we-open-sourced-our-mcp-server-and-what-it-means-for-you/",
      "pubDate": "Tue, 12 Aug 2025 13:52:49 +0000",
      "isoDate": "2025-08-12T13:52:49.000Z",
      "creator": "Kedasha Kerr",
      "summary": "# 模型上下文协议 (MCP) 与 GitHub 开源服务器\n\n## 核心问题与MCP的诞生\n当大型语言模型 (LLMs) 无法连接到外部应用和工具时，它们容易产生幻觉或基于过时信息给出不准确的答案。为了解决这一核心问题，**模型上下文协议 (MCP)** 应运而生。MCP 是一个开放协议，旨在标准化 LLM 应用程序如何连接并使用外部工具和数据源。它类似于语言服务器协议 (LSP)，两者都遵循客户端-服务器架构，简化了系统间的交互，并提供了标准化的通信模式。MCP 被誉为“LLMs 的 LSP”。\n\n## GitHub 开源其 MCP 服务器\nGitHub 现已开源其自身的 MCP 服务器。该服务器充当 GitHub 与任何 LLM 之间的“事实来源接口”，有效减少了幻觉，并解锁了新的自动化工作流。文章指出，相关内容可在 GitHub Podcast 的最新一集中了解。\n\n## MCP 架构\nMCP 基于客户端-服务器架构，其中 MCP 主机（例如 Copilot Chat 等 AI 应用程序）与 MCP 服务器保持一对一连接。关键概念包括：\n*   **MCP 主机 (MCP Host)**：希望通过 MCP 访问数据的 LLM 应用程序（例如 VS Code, Copilot Chat）。\n*   **MCP 客户端 (MCP Clients)**：在主机应用程序内部与 MCP 服务器保持一对一连接。\n*   **MCP 服务器 (MCP Servers)**：通过 MCP 暴露特定功能的轻量级程序。\n\n## GitHub MCP 服务器的功能\nGitHub MCP 服务器将 AI 工具直接连接到 GitHub 平台。用户不再需要执行 REST 或 GraphQL API 调用，而是可以将兼容 MCP 的客户端或代理指向服务器，并以自然语言请求所需内容。例如，您可以要求它：\n*   列出仓库中所有未解决的问题。\n*   显示等待审查的拉取请求。\n*   获取仓库或文件的元数据。\n*   创建或评论问题。\n\n其核心在于，自然语言请求能够自动转换为结构化、语义明确的 API 调用。这消除了创建自定义 API 端点或解析 Markdown 描述的需要。由于服务器支持 MCP，它可以与任何兼容的主机协同工作，包括 Copilot Workspace、VS Code 插件、基于 LLM 的产品、自定义聊天 UI 和自建代理。\n\n## 工作原理\n该架构概念简单但功能强大：\n1.  **服务器 (Server)**：GitHub 的 MCP 服务器是一个独立的服务，监听结构化的 MCP 请求。\n2.  **客户端 (Client)**：主机和服务器之间的连接器，负责将用户意图转换为有效的 MCP 请求。\n3.  **主机 (Host)**：AI 前端（如 IDE 助手或聊天 UI），负责呈现对话并将结构化提示发送到下游。\n\n当用户提出问题时，主机将其翻译为语义请求，客户端将其打包为 MCP 请求，服务器从 GitHub 获取真实数据并以结构化 JSON 格式返回。这种设计实现了语言模型、用户体验以及其可访问的数据或工具之间的清晰分离，每一层都具有模块化、可测试和可互换的特性。\n\n## 如何开始使用 GitHub 远程 MCP 服务器\n现在即可开始使用 GitHub 的 MCP 服务器。您需要：\n*   **MCP 主机**：VS Code 或任何其他支持 MCP 的 LLM 应用程序。\n*   **MCP 客户端**：Copilot 代理、LLM 聊天 UI 或支持 MCP 的自定义客户端。\n*   **GitHub MCP 服务器**：可从官方 GitHub MCP 服务器仓库获取。\n\n在 VS Code 中安装 GitHub MCP 服务器的步骤：\n1.  添加服务器配置片段：\n    ```json\n    {\n      \"servers\": {\n        \"github\": {\n          \"type\": \"http\",\n          \"url\": \"https://api.githubcopilot.com/mcp/\"\n        }\n      }\n    }\n    ```\n2.  创建配置文件：在项目根目录创建 `/vscode` 目录，并在其中创建 `mcp.json` 文件。\n3.  将上述代码粘贴到 `mcp.json` 文件中。\n4.  完成设置：点击出现的启动按钮，并在提示时完成 OAuth 流程。\n\n## 实际应用案例\n早期采用者已利用 MCP 服务器创建了许多实用工具：\n*   **Markdown 自动化**：一个团队使用 MCP 服务器将数十个 GitHub Issue 转换为社区微站点的 Markdown 内容文件，实现了自动化处理。\n*   **每周团队摘要**：一个轻量级机器人扫描特定 GitHub 仓库，编译每周摘要，并将其发布到 Slack，保持团队同步。\n*   **对话式项目助手**：一个开源团队构建了基于聊天的界面，贡献者可以提出自然语言问题，代理使用 MCP 转换为 GitHub 查询并返回实时数据摘要。\n*   **个人 LLM 仪表板**：一位开发者将自己的 GitHub 账户连接到本地仪表板上的 MCP 感知代理，提供主动提示，如需要审查的拉取请求、过时问题和基于合并更改的草稿发布说明。\n\n通过为 AI 模型提供真实、结构化的上下文，MCP 服务器使工具变得更智能、更安全。\n\n## 更多资源\n*   阅读关于如何使用 MCP 服务器的实用指南。\n*   深入了解如何构建安全可扩展的远程 MCP 服务器。\n*   订阅 GitHub Podcast，收听最新一集。\n\n文章作者：\n![Kedasha Kerr](https://avatars.githubusercontent.com/u/47188731?v=4&s=200)\nKedasha Kerr 是 GitHub 的开发者倡导者。\n\n相关内容：\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) **文档**：掌握 GitHub 所需的一切。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) **GitHub**：在 GitHub 上构建未来。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) **客户案例**：了解使用 GitHub 的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) **GitHub Universe 2025**：参加旧金山的年度大会。",
      "shortSummary": "GitHub 已开源其模型上下文协议（MCP）服务器，旨在解决大型语言模型（LLMs）因缺乏外部工具和数据连接而产生的幻觉问题。MCP 是一个开放协议，标准化了 LLM 应用与外部资源交互的方式，类似于 LLM 的语言服务器协议（LSP）。GitHub 的 MCP 服务器充当 GitHub 与 LLM 之间的“事实来源”接口，允许用户通过自然语言请求获取实时、结构化的 GitHub 数据，从而实现自动化并提高 AI 工具的智能性和安全性。它支持多种实际应用，从自动化文档生成到个性化仪表板。",
      "translated_title": "我们为何开源MCP服务器，以及这对您意味着什么",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/47188731?v=4&s=200",
          "alt": "Kedasha Kerr",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn how maintainers are using the GitHub MCP Server and what they are building in this episode of the GitHub Podcast.</p>\n<p>The post <a href=\"https://github.blog/open-source/maintainers/why-we-open-sourced-our-mcp-server-and-what-it-means-for-you/\">Why we open sourced our MCP server, and what it means for you</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "大规模保障供应链安全：从71个重要开源项目开始 (原标题: Securing the supply chain at scale: Starting with 71 important open source projects)",
      "link": "https://github.blog/open-source/maintainers/securing-the-supply-chain-at-scale-starting-with-71-important-open-source-projects/",
      "pubDate": "Mon, 11 Aug 2025 16:00:00 +0000",
      "isoDate": "2025-08-11T16:00:00.000Z",
      "creator": "Kevin Crosby",
      "summary": "# 大规模保障供应链安全：从71个重要开源项目开始\n\n## 引言：软件供应链安全挑战\n\n2021年12月Log4j零日漏洞的爆发，凸显了资源不足的开源库对整个软件供应链的巨大影响。如今，平均每个云工作负载包含超过500个依赖项，其中许多由无偿志愿者维护，因此支持和保护这一生态系统的需求变得前所未有的紧迫。\n\n## GitHub安全开源基金会\n\n### 成立背景与目标\n\n为应对这一挑战，GitHub于2024年11月启动了GitHub安全开源基金会。该基金旨在通过为维护者提供资金支持，让他们参与为期三周的项目，从而获得安全教育、指导、工具、认证以及安全意识维护者社区等资源。通过将资金与程序化安全成果挂钩，基金的目标是扩大安全影响力、降低风险并大规模保障软件供应链安全。\n\n### 运作方式\n\n*   **项目结构**：每个项目参与一个为期三周的“冲刺”培训，并持续12个月的参与。\n*   **课程设计**：由GitHub安全实验室设计和策划，由GitHub及其合作伙伴的安全专家提供培训。培训分为每周不同的重点领域，包括：\n    *   开源安全基础\n    *   威胁建模和安全编码\n    *   漏洞管理和AI安全\n*   **资金支持**：每个项目通过GitHub Sponsors获得10,000美元（冲刺期间6,000美元，6个月和12个月安全检查时各2,000美元）。\n*   **额外资源**：项目还受邀加入新的安全社区，并可利用GitHub安全实验室的办公时间，获得可立即实施的安全资源和Azure云基础设施积分。\n\n### 早期成果与影响\n\n基金会的前两期项目汇集了来自71个重要且快速增长的开源项目的125名维护者，并取得了显著的早期成果：\n\n*   **漏洞修复**：修复了CodeQL检测到的1,100多个漏洞，降低了风险暴露面。\n*   **漏洞披露**：参与者发布了50多个新的通用漏洞披露（CVE），从而告知并保护了下游依赖方。\n*   **秘密管理**：阻止了92个新秘密泄露，并检测和解决了176个已泄露的秘密。\n*   **能力提升**：100%的维护者表示他们获得了可操作的后续步骤，可用于未来一年的路线图。\n*   **最佳实践采纳**：80%的项目启用了三个或更多基于GitHub的安全功能。\n*   **面向未来**：63%的项目表示他们对AI和MCP（多方计算）安全有了更好的理解，并利用GitHub Copilot进行漏洞扫描、安全审计、定义和实施模糊测试策略等。\n\n这些成果表明了项目会话带来的直接安全影响，并且这种势头才刚刚开始。维护者们已经接受了安全文化，建立了安全积压，并积极与社区中的维护者以及其直接项目贡献者和消费者分享见解，从而使整个生态系统受益，安全影响力将持续增长。第三期项目将于2025年9月启动，旨在吸引更多深入依赖树和独立管理关键依赖项的维护者。\n\n## 重点项目类别及案例分析\n\n### 1. AI和机器学习框架/边缘LLM工具\n\n*   **重要性**：这些项目是当前AI工作（如LLMs、代理、编排层和模型工具链）的基石，每月有数千万次安装和克隆。一个提示注入缺陷或中毒的权重文件可能一夜之间影响数千个下游应用程序，攻击者可能获得“远程DevOps”权限。\n*   **Ollama项目亮点**：该项目使本地运行大型语言模型成为可能。Ollama利用此机会对其系统的每个活动部分（包括GitHub Actions、DNS安全、模型分发、模型在Ollama引擎中的执行、自动更新检查等）进行了威胁建模，并修剪了未使用的依赖项。\n*   **AutoGPT的GravitasML项目亮点**：该项目是为LLMs构建的MIT许可XML解析器。AutoGPT团队在冲刺结束后，将CodeQL集成到AutoGPT平台和GravitasML的每个拉取请求中，并构建了一个轻量级“安全代理”来提示贡献者加强控制。他们还修订了安全策略，建立了正式的事件响应工作流程，并规划了28项后续任务（从模糊测试XML解析器到完成OSS Scorecard），以构建更安全的LLM代理的持久路线图。\n\n### 2. 前端和全栈框架/UI库\n\n*   **重要性**：这些框架承载用户界面，通常捆绑自己的服务器端路由，安装量达数百万。提升其安全性可关闭潜在的XSS、模板注入和供应链跳点。单个组件套件中的漏洞提交可能泄露来自每个SaaS仪表板的JWT或会话cookie。\n*   **shadcn/ui项目亮点**：这个React组件库受到OpenAI等领先组织的信任。在为期三周的冲刺中，该项目审计了每个GitHub Actions工作流和秘密，更新了SECURITY.md、许可证和依赖项，并根据“安全设计UX”研讨会创建了一个框架，用于识别恶意威胁行为者可能攻击其项目的方式，并制定了降低风险或完全阻止的策略。他们启用了CodeQL（首次扫描就发现了一个不安全的`dangerouslySetInnerHTML`路径），并起草了正式的漏洞报告流程和威胁模型，为未来的贡献者制定了清晰、公开的安全路线图。该项目还利用GitHub Copilot设置并实施了模糊测试。\n\n### 3. Web服务器、网络和网关\n\n*   **重要性**：如果一个进程监听443端口，很可能这些Web服务器或网关项目是其堆栈的一部分。加固它们可以保护所有通过网络传输的cookie、身份验证头和JSON负载。未签名的二进制文件或薄弱的发布管道使得下游依赖方难以响应供应链安全事件。\n*   **Node.js项目亮点**：在冲刺期间，Node.js安全工作组修订了项目的威胁模型，并启动了一个拉取请求，将CodeQL集成到核心代码中——这得益于一个新的工作流，该工作流自动审查代码扫描警报并标记最不明确的错误进行重构。这些升级以及未来版本中计划的签名检查，将影响所有使用Node二进制文件的服务器端JavaScript工作负载。\n\n### 4. DevOps、构建系统、容器工具\n\n*   **重要性**：这些工具涉及每次提交和部署。如果攻击者在此处立足，他们就控制了整个管道。通过使用Sigstore签署二进制文件，这些项目为平台工程师提供了加密证明，证明生产环境中运行的位是由真正的维护者构建的，而不是中间的攻击者。\n*   **Turborepo项目亮点**：在为期三周的冲刺中，Turborepo启用了GitHub私有漏洞报告，收紧了过于宽松的工作流令牌，并发布了生产就绪的IRP（事件响应计划），同时使用CodeQL扫描每个拉取请求。这些防护措施保护了数千个monorepo所依赖的Rust驱动的构建缓存。该团队已经起草了公开威胁模型和提供商通知手册，以便在零日漏洞传播之前悄悄处理。\n\n### 5. 安全框架、身份和合规工具\n\n*   **重要性**：这些库是互联网的锁、账本和审计日志。使这些项目更安全会波及整个生态系统，使每个人都更安全。当身份服务器被攻破时，攻击者可以伪造合法的令牌或发布标记为“安全”的篡改图像。对这些供应链关键项目的维护者进行前期安全资助，其成本远低于全球范围内的供应链安全事件处理。\n*   **Log4j项目亮点**：Apache Log4j团队加强了每个GitHub Actions工作流以防脚本注入，起草了全新的威胁模型，并深化了与开源社区的协作。接下来，他们将捆绑一个CodeQL包，用于标记下游代码中不安全的日志模式，并推出内部模糊测试。他们与ASF安全团队紧密合作，旨在树立一个标准，影响许多其他ASF项目。\n\n### 6. 开发者工具和CLI辅助工具\n\n*   **重要性**：这些流行的辅助工具在全球的笔记本电脑和CI节点上运行。加固它们可以切断网络钓鱼路径和横向移动路径。虽然大部分供应链安全工作集中在运行时库上，但对维护者及其所依赖工具的攻击表明，开发者工具对于安全加固工作至关重要。受损的shell插件可能导致任意代码执行，例如在开发者启动shell时窃取SSH密钥。\n*   **Charset-Normalizer项目亮点**：这个每天在PyPI上被下载约2000万次的编码辅助工具，通过放弃弱SMS 2FA转而使用更强的基于通行密钥的MFA，启用GitHub秘密扫描，并修补之前未注意到的高风险GitHub Actions，从而加强了防御。维护者现在正在为每个版本自动化SBOM生成——这项工作将很快使Python最普遍的传递依赖项之一既可审计又符合CRA（网络弹性法案）规定。\n*   **nvm项目亮点**：这个Node版本管理器利用冲刺发布了其首个事件响应计划，并规划了公开漏洞披露策略的路线图——将近期审计的经验教训转化为具体的防护措施。nvm的维护者首次在该项目中学习了如何使用Copilot进行安全指导和输入。接下来，维护者将连接自定义CodeQL查询和模糊测试工具，以对nvm的Bash内部进行压力测试，然后将该操作手册分享给Express等OpenJS兄弟项目，以便各地的开发环境都能继承这些升级。\n*   **JUnit项目亮点**：在为期三周的冲刺中，JUnit在其所有存储库中推出了端到端CodeQL扫描，并修复了第一波发现的问题，正式制定了公开事件响应计划，并通过将`GITHUB_TOKEN`切换为明确的最小权限来锁定每个工作流。\n\n## 未来展望\n\nGitHub安全开源基金会的工作仍在继续，第三期项目即将启动，将有更多关键的开源项目和维护者加入，共同提升整个软件生态系统的安全性。",
      "shortSummary": "GitHub安全开源基金会已帮助71个重要开源项目显著提升安全态势。该基金通过提供资金、专家指导和可操作的策略，支持维护者参与为期三周的安全项目。早期成果包括修复1100多个漏洞、发布50多个CVE、阻止秘密泄露，并加速了安全最佳实践的采纳。基金会通过加固AI/ML框架、前端库、Web服务器、DevOps工具、安全框架和开发者工具等关键领域，有效降低了软件供应链风险，并促进了安全文化的建立。",
      "translated_title": "大规模保障供应链安全：从71个重要开源项目开始",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Learn how the GitHub Secure Open Source Fund helped 71 open source projects significantly improve their security posture through direct funding, expert guidance, and actionable playbooks.</p>\n<p>The post <a href=\"https://github.blog/open-source/maintainers/securing-the-supply-chain-at-scale-starting-with-71-important-open-source-projects/\">Securing the supply chain at scale: Starting with 71 important open source projects</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "再见，GitHub ♥️ (原标题: Auf Wiedersehen, GitHub ♥️)",
      "link": "https://github.blog/news-insights/company-news/goodbye-github/",
      "pubDate": "Mon, 11 Aug 2025 14:56:37 +0000",
      "isoDate": "2025-08-11T14:56:37.000Z",
      "creator": "Thomas Dohmke",
      "summary": "## Thomas Dohmke 宣布离开 GitHub\n\n在领导 GitHub 超过十年，并将其带入 Copilot 和 AI 时代后，现任首席执行官 Thomas Dohmke 宣布将于 2025 年底离职，重新回归创业领域。他将继续留任至 2025 年底，以协助完成过渡。GitHub 及其领导团队将继续作为微软 CoreAI 组织的一部分履行其使命。\n\n### GitHub 的发展与成就\n\nDohmke 在任期间，GitHub 取得了显著的增长和技术突破：\n\n*   **规模与社区**：GitHub 现已拥有超过 10 亿个代码库和分支，以及超过 1.5 亿开发者，其在全球公司的市场地位无可匹敌。每年都有更多的开源项目和贡献，AI 项目在过去一年中翻了一番。\n*   **平台优化**：大幅提升了可访问性和可用性，将 GitHub 引入欧盟、澳大利亚，并为在美国获得 FedRAMP 认证而回归美国，同时修复了大量细节问题。\n*   **GitHub Advanced Security**：通过 AI 的力量，将行业推向“发现即修复”的模式，将平均修复时间缩短了 60%，使团队修复漏洞的速度提高了 3 倍。\n*   **GitHub Actions**：已成熟成为全球领先的 CI 解决方案，每月运行时间达到 30 亿分钟，同比增长 64%。\n*   **GitHub Copilot**：从一个简单的自动补全工具发展成为会话式编程（Copilot Chat & Voice）、代码审查和修复，以及通过 GitHub Spark 进行全栈应用创建的强大工具。目前，GitHub Copilot 拥有超过 2000 万用户，是 AI 时代最成功、最活跃市场的领导者。\n    *   它是微软首个多模型解决方案，与 Anthropic、Google 和 OpenAI 合作。\n    *   推出了 Copilot Free，以及 VS Code 中的同步代理模式和 GitHub 原生的异步编码代理。\n    *   被认为是自个人电脑问世以来软件开发领域最大的变革。\n\n### 未来愿景\n\nDohmke 坚信，通过开发者 AI 的新时代，无论个人掌握何种语言或编程熟练度，都能将创意变为现实。他预见世界将很快出现 10 亿开发者，由数十亿 AI 代理赋能，将人类的智慧融入到一场新的软件淘金热中，而 GitHub 正是这一进程的起点。\n\n### 感谢与展望\n\nThomas Dohmke 对 GitHub 团队（Hubbers）表达了深切的自豪和感谢，认为与他们共事是巨大的荣幸，并相信他们共同“扭转了技术的发展弧线，使其变得更好”。\n\n### 作者信息\n\nThomas Dohmke 是 GitHub 的首席执行官，拥有机械工程博士学位，并是一位著名的 TED 演讲者。他致力于构建工具以提升开发者的幸福感。\n\n![Thomas Dohmke](https://secure.gravatar.com/avatar/f9a3d6bee42f4503d3169861b9ecdfab5b2faebc73eb6344d2c3fa15727da799?s=200&d=mm&r=g)\n\n### 相关内容\n\n*   **我们需要一个欧洲主权技术基金**：探讨开源软件作为关键基础设施的资金缺口。\n*   **探索更多来自 GitHub 的内容**：\n    *   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs：掌握 GitHub 所需的一切。\n    *   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub：在 GitHub 上构建未来。\n    *   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) Customer stories：了解使用 GitHub 的公司和工程团队。\n    *   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025：在旧金山参加年度大会的最后机会。",
      "shortSummary": "GitHub 首席执行官 Thomas Dohmke 宣布将于 2025 年底离职，回归创业。在他领导下，GitHub 取得了巨大发展，用户数和代码库激增，并成功推出了 GitHub Copilot，使其成为 AI 时代开发者工具的领导者。Dohmke 坚信 AI 将赋能十亿开发者，开启软件开发新纪元。他感谢团队的贡献，并对GitHub的未来充满信心。",
      "translated_title": "再见，GitHub ♥️",
      "images": [
        {
          "url": "https://secure.gravatar.com/avatar/f9a3d6bee42f4503d3169861b9ecdfab5b2faebc73eb6344d2c3fa15727da799?s=200&d=mm&r=g",
          "alt": "Thomas Dohmke",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>tl;dr: I am stepping down as GitHub CEO to build my next adventure. GitHub is thriving and has a bright future ahead. The following is the internal post I sent to GitHub employees (Hubbers) this morning announcing my departure.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/goodbye-github/\">Auf Wiedersehen, GitHub ♥️</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何使用 GitHub Copilot 提升代码审查和拉取请求的水平 (原标题: How to use GitHub Copilot to level up your code reviews and pull requests)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-to-use-github-copilot-to-level-up-your-code-reviews-and-pull-requests/",
      "pubDate": "Fri, 08 Aug 2025 16:00:00 +0000",
      "isoDate": "2025-08-08T16:00:00.000Z",
      "creator": "Melissa Pastore",
      "summary": "# 如何使用 GitHub Copilot 提升代码审查和拉取请求的水平\n\n作为 GitHub 的软件工程师，作者亲历了 GitHub Copilot 从简单的代码补全工具发展成为功能更强大的 AI 编码助手。其应用场景已扩展到日常工作的各个方面，包括拉取请求（Pull Requests, PRs）和代码审查。Copilot 在软件开发生命周期的这些关键环节中展现出极高的实用价值。\n\n## Copilot 在代码审查和拉取请求中的实际应用\n\n### 1. 代码审查中的 Copilot 建议\n\n在审查队友的拉取请求时，Copilot 能提供代码改进建议或确认代码是否遵循最佳实践，从而节省手动编写重构代码的时间。\n\n*   **代码重构**：当发现重复代码时，可以点击 Copilot 图标并提示其进行重构。例如，作者曾提示 Copilot 重构 Ruby on Rails 中的重复代码，Copilot 的建议与作者预期一致，节省了数分钟时间，使其能专注于更高层次的反馈。\n*   **最佳实践检查**：由于经常在 Ruby、TypeScript 和 Go 等不同语言之间切换上下文，作者会利用 Copilot 提醒特定语言的最佳实践。例如，通过提示 Copilot 检查 Go 代码是否遵循变量赋值的最佳实践，Copilot 迅速生成了可操作的改进建议。\n\n![GitHub Copilot 在 Go 语言代码审查中提供变量声明优化建议](https://github.blog/wp-content/uploads/2025/08/Screenshot-2025-07-09-at-4.31.23-PM.png?resize=1024%2C448)\n*图片描述：一张 GitHub 拉取请求的截图，展示了 Copilot 对 Go 语言文件中的代码进行审查，建议将 `var result int` 更改为更简洁的短变量声明 `result := add(1, 2)`。右侧的 Copilot 面板总结了更改并解释了建议的理由。*\n\n### 2. 为拉取请求格式化表格和数据\n\n为了给审阅者提供更多上下文，作者喜欢在拉取请求描述中添加图片、屏幕录像和电子表格。将这些信息格式化为 Markdown 表格通常很繁琐，此时 Copilot 可以代劳。\n\n*   **Markdown 表格生成**：作者曾将页面加载时间数据（前后对比）提供给 Copilot，并要求其格式化为 GitHub Flavored Markdown 表格。Copilot 迅速生成了清晰、易于粘贴的表格，极大地简化了数据共享。\n\n### 3. 让 Copilot 协助撰写拉取请求摘要\n\n撰写拉取请求描述往往是提交代码前的最后一道障碍。Copilot 可以通过在拉取请求描述编辑器栏中提供初始草稿来帮助启动这一过程，即使后续需要编辑，有一个起点也能减轻任务的难度。\n\n![GitHub Copilot 在拉取请求页面提供摘要生成选项](https://github.blog/wp-content/uploads/2025/08/Screenshot-2025-07-09-at-4.31.54-PM.png?resize=1024%2C438)\n*图片描述：一张 GitHub 拉取请求页面的截图，标题为“Test PR #1”，显示了对话选项卡。Copilot 菜单提供了生成摘要或拉取请求更改大纲的选项。*\n\n### 4. 利用 Copilot 进行代码自查和理解陌生代码\n\nCopilot 在审查和解释代码方面表现出色，作者将其应用于日常工作中的两个方面：\n\n*   **提交前自查**：在将拉取请求标记为“准备好审查”之前，作者会利用 Copilot 对自己的更改进行快速审查，它经常能发现作者可能遗漏的问题或提出更好的编写方式。用户还可以在仓库的自定义指令中添加注释，指导 Copilot 在审查拉取请求时关注的重点。\n*   **解释不熟悉的代码**：在审查他人代码时，如果遇到不理解的更改，作者会请 Copilot 解释。这有助于快速获取上下文，尤其是在不熟悉该部分代码库时，从而能为队友提供更周到、更彻底的审查。\n\n## Copilot 对代码审查和拉取请求的影响\n\n尽管 Copilot 无法替代深思熟虑的人工代码审查，但它已成为作者作为软件工程师日常工作中不可或缺的工具。从生成智能建议和代码重构，到快速 Markdown 格式化和起草拉取请求摘要，Copilot 通过使反馈更具操作性、代码审查过程更快更彻底，从而简化了围绕代码编写的工作。通过将 Copilot 整合到软件开发生命周期的每个阶段，作者能够专注于更高层次的工程问题和协作。",
      "shortSummary": "GitHub Copilot 已从代码补全发展为强大的AI工具，显著提升了代码审查和拉取请求的效率。它能提供代码重构和最佳实践建议，协助格式化PR描述中的数据表格，并帮助撰写PR摘要。此外，Copilot还能进行代码自查和解释不熟悉的代码，从而加快审查流程，使反馈更具操作性。Copilot 并非人工审查的替代品，但它简化了开发工作，让工程师能专注于更复杂的工程挑战。",
      "translated_title": "如何使用 GitHub Copilot 提升代码审查和拉取请求的水平",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/Screenshot-2025-07-09-at-4.31.23-PM.png?resize=1024%2C448",
          "alt": "Screenshot of a GitHub pull request for a Go file, suggesting a change to use the short variable declaration “result := add(1, 2)” instead of “var result int”. A Copilot panel on the right summarizes the changes and explains the reasoning behind the suggestion.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/Screenshot-2025-07-09-at-4.31.54-PM.png?resize=1024%2C438",
          "alt": "Screenshot of a GitHub pull request page titled \"Test PR #1\" showing the conversation tab, with a Copilot menu offering options to generate a summary or an outline of the pull request changes.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://avatars.githubusercontent.com/u/64283754?v=4&s=200",
          "alt": "Melissa Pastore",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 7
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Discover practical ways GitHub Copilot streamlines code reviews, pull requests, and daily engineering tasks with real prompts, examples, and workflow tips from our engineering team.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-to-use-github-copilot-to-level-up-your-code-reviews-and-pull-requests/\">How to use GitHub Copilot to level up your code reviews and pull requests</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "初级开发者并未过时：在AI时代如何蓬勃发展 (原标题: Junior developers aren’t obsolete: Here’s how to thrive in the age of AI)",
      "link": "https://github.blog/ai-and-ml/generative-ai/junior-developers-arent-obsolete-heres-how-to-thrive-in-the-age-of-ai/",
      "pubDate": "Thu, 07 Aug 2025 21:05:55 +0000",
      "isoDate": "2025-08-07T21:05:55.000Z",
      "creator": "Gwen Davis",
      "summary": "## 初级开发者在AI时代蓬勃发展\n\n### 引言：AI对初级开发者的影响与机遇\n\n人工智能（AI）正在深刻改变软件工程领域的工作方式。尽管2023年的一项研究预测，到2027年，初级应用开发者近26%的任务将被AI增强或完全自动化，但这并不意味着初级开发者会过时。相反，文章指出，新入行的学习者由于天生就熟悉AI工具，反而处于有利地位，能够更好地适应软件开发方式的变革。\n\nGitHub首席执行官Thomas Dohmke强调，实习生和初级开发者已经熟练掌握市场上最好的AI代码生成工具，他们与AI“产生共鸣”并用AI进行构建。罗汉普顿大学计算教育教授Miles Berry也认为，今天的学习者必须培养与AI协作的技能，而非担心被其取代。他强调，批判性思维、好奇心以及与AI和资深团队成员的协作至关重要，因为“创造力和好奇心是区分我们与机器的核心”。\n\n### 在AI时代脱颖而出的五种方法\n\n为了在AI时代作为初级开发者脱颖而出，文章提出了以下五种策略：\n\n1.  **利用AI加速学习，而非仅加速编码**\n    *   **将GitHub Copilot用作编程导师：** 大多数开发者使用Copilot进行自动补全，但初学者可以将其设置为强大的学习工具。通过设置个性化指令（例如，充当导师，教授概念和最佳实践，但不提供完整解决方案，并提醒检查AI生成内容的正确性），Copilot可以引导你理解概念。\n    *   **向Copilot提问：** 将Copilot Chat视为私人教练，询问它解释不熟悉的概念、调试步骤、分解复杂语法，或比较不同方法（如`for`循环与`map`），解释错误消息，或帮助编写测试用例。\n    *   **练习不依赖自动补全的问题解决：** 暂时关闭内联补全功能，以锻炼解决问题和批判性思维能力。你仍可使用Copilot Chat提问和获取帮助，但不会过早看到完整解决方案。这有助于在学习新概念时深入思考。\n\n2.  **构建展示技能（和AI熟练度）的公开项目**\n    *   个人项目是你的作品集，GitHub提供了展示和提升技能的平台。使用Copilot Chat的`/new`命令可以快速搭建新项目。\n    *   请求Copilot为项目添加MIT许可证并发布为GitHub上的公共项目。\n    *   通过问题、提交和项目看板跟踪进度，在README中记录旅程和里程碑，并通过反馈和AI协助进行迭代和改进。\n\n3.  **通过核心GitHub工作流提升开发者工具包**\n    *   尽管AI改变了游戏规则，但扎实的基础仍然是成功的关键。以下核心工作流是初级开发者晋升的跳板：\n        *   **使用GitHub Actions自动化：** 自动化构建和部署是所有开发者的最佳实践。利用GitHub Actions自动构建、测试和部署项目。\n        *   **贡献开源：** 加入全球开发者社区，通过贡献开源项目学习新技能、丰富简历并获得实际经验。\n        *   **通过拉取请求（Pull Requests）协作：** 编码是团队运动。练习专业团队使用的拉取请求工作流：审查他人代码、讨论反馈并自信地合并。\n    *   **AI辅助故障排除：** 在学习GitHub工作流时遇到问题（如YAML语法错误、权限问题、构建失败）是正常的。Copilot Chat可以帮助解释错误日志、调试YAML格式、指导配置认证、密钥或CI/CD步骤。\n\n4.  **通过代码审查提升专业技能**\n    *   从同行审查中学习是开发者成长最快的方式之一。每次拉取请求都是获取反馈的机会，不仅针对代码，也针对思维、沟通和协作方式。\n    *   **有效利用代码审查的技巧：** 提问以理解决策或探索替代方法；寻找重复出现的模式以内化最佳实践；记录收到的反馈和处理方式；保持谦逊，感谢并跟进。\n\n5.  **利用AI更智能、更快速地调试**\n    *   调试是软件开发中最耗时的部分之一。GitHub Copilot可以提供帮助：\n        *   询问“这个函数为什么会抛出错误？”以获得实时解释。\n        *   使用`/fix`高亮代码并生成潜在修复方案。\n        *   运行`/tests`创建测试用例并验证逻辑。\n        *   对晦涩的错误使用`/explain`来理解根本原因。\n        *   甚至可以组合命令进行深度调试（例如，`/explain`理解问题，`/fix`生成解决方案，`/doc`为团队编写文档）。\n\n### 更多资源与总结\n\n文章还推荐了GitHub Skills、GitHub Education和GitHub Copilot文档等资源，以帮助开发者成长。总而言之，无论你是第一次提交拉取请求还是在构建第五个副项目，GitHub都是磨练技能、开放协作和构建求职作品集的理想场所。AI正在重塑软件世界，但凭借正确的工具和心态，初级开发者完全可以蓬勃发展。",
      "shortSummary": "初级开发者在AI时代并非过时，反而因熟悉AI工具而拥有独特优势。文章提出五种策略助其蓬勃发展：利用AI加速学习（如将Copilot作导师）、构建展示AI技能的公开项目、掌握核心GitHub工作流（自动化、开源贡献、PR协作）、通过代码审查提升专业技能，以及利用AI更智能地调试。关键在于培养与AI协作的能力、批判性思维和好奇心。通过这些方法，初级开发者能有效适应行业变化，在AI时代取得成功。",
      "translated_title": "初级开发者并未过时：在AI时代如何蓬勃发展",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>The role of junior developer is evolving. If you're at this stage in your career, here's how to keep up and stand out.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/junior-developers-arent-obsolete-heres-how-to-thrive-in-the-age-of-ai/\">Junior developers aren’t obsolete: Here’s how to thrive in the age of AI</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "使用GitHub Models在Actions中自动化你的项目 (原标题: Automate your project with GitHub Models in Actions)",
      "link": "https://github.blog/ai-and-ml/generative-ai/automate-your-project-with-github-models-in-actions/",
      "pubDate": "Mon, 04 Aug 2025 16:00:00 +0000",
      "isoDate": "2025-08-04T16:00:00.000Z",
      "creator": "Kevin Lewis",
      "summary": "## 使用GitHub Models在Actions中自动化你的项目\n\nGitHub Models将人工智能（AI）引入GitHub Actions工作流，帮助您在项目所在位置自动化分类、总结等任务。本文探讨了三种集成和自动化使用GitHub Models的方法，从最直接到最强大。\n\n### 前置条件：添加正确的权限\n\n在使用GitHub Models之前，您的工作流需要获得访问AI模型的权限。在工作流的权限块中添加以下行即可：\n\n```yaml\npermissions:\n  contents: read\n  issues: write\n  models: read\n```\n\n这些权限允许工作流读取仓库内容、读写问题和评论，最重要的是，启用对GitHub Models的访问。\n\n### 示例一：在Bug报告中请求更多信息\n\n此示例展示了如何使用AI推理操作以及如何利用AI创建分支逻辑，以自动化处理信息不足的Bug报告。\n\n*   **目标**：自动检查新的Bug报告是否包含足够信息，并在信息不足时自动回复。\n*   **工具**：`actions/ai-inference` 操作，允许调用领先的AI模型来分析或生成文本。\n*   **工作流 (`bug-reproduction-instructions.yml`) 设置**：\n    *   **触发器**：当新问题被打开时 (`on: issues: types: [opened]`)。\n    *   **权限**：`contents: read`, `issues: write`, `models: read`。\n    *   **步骤**：\n        1.  **获取问题**：使用`actions/github-script`获取问题的标题和正文。\n        2.  **分析问题以进行复现**：\n            *   仅当问题标记为“bug”时执行 (`if: contains(..., 'bug')`)。\n            *   使用`actions/ai-inference@v1`，配置`mistral-ai/ministral-3b`模型（可替换为GitHub Models目录中的40多种模型）。\n            *   `system-prompt`定义了有效复现说明的特征（复现步骤、预期/实际行为、环境细节）。如果信息足够，AI返回“pass”；否则，返回缺失信息的简要描述。\n        3.  **评论问题**：\n            *   仅当问题标记为“bug”且AI返回的值不是“pass”时执行。\n            *   使用`actions/github-script@v7`将AI的回复作为评论发布到问题中。\n*   **核心思想**：通过提示AI模型在满足特定条件时返回固定字符串（如“pass”），可以在工作流中创建AI驱动的条件逻辑。\n\n![An issue on GitHub named \"Doesn't work on firefox\" with no description and a bug label. The github-actions bot responds asking for more information - specifically reproduction steps, expected and actual behavior, and browser and operating system details.](https://github.blog/wp-content/uploads/2025/07/image1_5f1e88.png?resize=1024%2C755)\n\n### 示例二：从合并的拉取请求创建发布说明\n\n此示例展示了如何使用`gh CLI`与`gh-models`扩展来自动化发布说明的生成。\n\n*   **目标**：当拉取请求合并时，自动汇总其内容并添加到发布说明问题中。\n*   **工具**：`gh CLI`及`gh-models`扩展。\n*   **设置**：创建一个名为“release”的标签，并创建一个名为“Publish next release changelog”的问题，并为其添加“release”标签。\n*   **工作流 (`release-notes.yml`) 设置**：\n    *   **触发器**：当拉取请求关闭时 (`on: pull_request: types: [closed]`)。\n    *   **条件**：仅当拉取请求已合并时运行 (`if: github.event.pull_request.merged == true`)。\n    *   **权限**：`pull-requests: read`, `issues: write`, `contents: read`, `models: read`。\n    *   **步骤**：\n        1.  **检出仓库**：使用`actions/checkout@v4`。\n        2.  **安装gh-models扩展**：运行`gh extension install https://github.com/github/gh-models`，需要工作流令牌。\n        3.  **汇总拉取请求并追加到发布问题**：\n            *   使用`gh pr view`获取PR的标题、正文、评论和评审信息，并保存到文件。\n            *   将PR数据通过管道传递给`gh models run xai/grok-3-mini`，并提供一个提示，要求生成一个简洁的单行变更日志条目。\n            *   获取带有“release”标签的发布问题编号和当前正文。\n            *   将AI生成的摘要（包含PR编号）追加到发布问题正文。\n            *   使用`gh issue edit`更新发布问题。\n\n![A pull request named Publish Next Release Changelog. The description has two bullet list items - each one describing a change in 8-12 words with a link to the merged pull request.](https://github.blog/wp-content/uploads/2025/07/image2_f6eb85.png?resize=1024%2C438)\n\n### 示例三：汇总和优先排序问题\n\n此示例演示了如何使用`GitHub CLI`、`gh-models`扩展和提示文件来自动化更复杂的定时工作流，以每周汇总、主题化和优先排序新问题。\n\n*   **目标**：每周生成一个问题，汇总、主题化并优先排序过去一周新打开的问题。\n*   **工具**：`gh CLI`、`gh-models`扩展和独立的提示文件。\n*   **工作流 (`weekly-issue-summary.yml`) 设置**：\n    *   **触发器**：手动触发 (`workflow_dispatch`) 或每周一上午9点定时触发 (`schedule: - cron: '0 9 * * 1'`)。\n    *   **权限**：`issues: write`, `contents: read`, `models: read`。\n    *   **步骤**：\n        1.  **检出仓库**：使用`actions/checkout@v4`。\n        2.  **安装gh-models扩展**：运行`gh extension install https://github.com/github/gh-models`。\n        3.  **获取过去一周的问题并汇总**：\n            *   使用`gh search issues`获取过去一周内创建的开放问题（标题、正文、URL），并保存到文件。\n            *   将问题数据通过管道传递给`gh models run --file prompts/issue-summary.prompt.yml`。\n        4.  **提示文件 (`prompts/issue-summary.prompt.yml`)**：\n            *   定义模型（如`openai/gpt-4.1`）、系统和用户提示。\n            *   系统提示：“你是一个有用的问题汇总器。”\n            *   用户提示：“请将以下问题总结为几个简短的要点。如果提供链接，请包含。如果可能，提取一般主题并帮助团队根据影响进行优先排序。”\n            *   使用`{{input}}`占位符接收管道数据。\n            *   优势：通过`.prompt.yml`文件，可以利用GitHub Models的仓库集成，通过丰富的UI迭代提示。\n        5.  **创建问题**：使用`gh issue create`创建新问题，标题包含日期范围，并使用AI生成的摘要作为正文。\n\n![An issue with the title \"Issue Summary - June 16 to June 23\". It has three sections - an issue summary which details and links each issue that has been opened, general themes which contains three groupings for the issues, and suggested prioritization. The top issue is on data integrity - issue 37.](https://github.blog/wp-content/uploads/2025/07/image3_6c2c47.png?resize=972%2C1024)\n\n### 总结\n\n无论是从简单的AI推理操作开始，使用带有内联提示的`gh-models CLI`，还是创建功能齐全、提示驱动的工作流，GitHub Models都使您能够轻松地通过AI扩展您的项目流程。只需添加正确的权限，选择一个上述示例，即可在您的下一个工作流中尝试GitHub Models。",
      "shortSummary": "GitHub Models将AI集成到GitHub Actions，实现项目自动化。通过设置特定权限，用户可利用AI处理任务。文章展示了三种应用：一是使用`actions/ai-inference`自动请求Bug报告补充信息；二是利用`gh CLI`和`gh-models`从PR生成发布说明；三是结合定时任务和提示文件，每周汇总并优先排序新问题。这些方法使开发者能更高效地管理项目，简化工作流程。",
      "translated_title": "使用GitHub Models在Actions中自动化你的项目",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/07/image1_5f1e88.png?resize=1024%2C755",
          "alt": "An issue on GitHub named \"Doesn't work on firefox\" with no description and a bug label. The github-actions bot responds asking for more information - specifically reproduction steps, expected and actual behavior, and browser and operating system details.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/07/image2_f6eb85.png?resize=1024%2C438",
          "alt": "A pull request named Publish Next Release Changelog. The description has two bullet list items - each one describing a change in 8-12 words with a link to the merged pull request.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/07/image3_6c2c47.png?resize=972%2C1024",
          "alt": "An issue with the title \"Issue Summary - June 16 to June 23\". It has three sections - an issue summary which details and links each issue that has been opened, general themes which contains three groupings for the issues, and suggested prioritization. The top issue is on data integrity - issue 37.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://avatars.githubusercontent.com/u/1461554?v=4&s=200",
          "alt": "Kevin Lewis",
          "title": "",
          "position": 4
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn how to integrate AI features with GitHub Models directly in GitHub Actions workflows.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/automate-your-project-with-github-models-in-actions/\">Automate your project with GitHub Models in Actions</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-08-17T04:42:09.080Z"
}