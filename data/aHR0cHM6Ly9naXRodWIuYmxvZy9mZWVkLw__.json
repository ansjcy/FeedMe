{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "通过这9个开源AI和MCP项目加速开发者生产力 (原标题: Accelerate developer productivity with these 9 open source AI and MCP projects)",
      "link": "https://github.blog/open-source/accelerate-developer-productivity-with-these-9-open-source-ai-and-mcp-projects/",
      "pubDate": "Fri, 17 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-17T16:00:00.000Z",
      "creator": "Kevin Crosby",
      "summary": "### 通过9个开源AI和MCP项目加速开发者生产力\n\n随着模型上下文协议（MCP）的兴起，开发者们正在发现AI和智能体与工具、代码库乃至浏览器交互的革命性方式。基于这项核心技术，许多项目（如浏览器扩展和代码编辑器工具）正在实现AI原生工作流，并解锁一类全新的智能体工具：专注于MCP驱动能力的创新生态系统和新项目正在改变我们的工作方式。\n\n微软开源项目办公室（OSPO）与GitHub Copilot和VS Code团队合作，共同赞助了九个项目，旨在加速开源领域的创新、安全性和可持续性。这些项目围绕以下三个主要主题展开：\n\n#### 1. 框架和平台集成：面向实际用例的生态系统集成\n\n这些项目旨在将MCP能力集成到流行的框架和生态系统中，用于AI原生工具，帮助MCP与广泛使用的平台结合，并使智能体能够与真实世界的应用程序和工作流进行交互。\n\n*   **fastapi_mcp**：以最少的设置、认证和有限的配置，通过统一的基础设施，将安全的FastAPI端点作为MCP工具暴露。\n*   **nuxt-mcp**：为Nuxt开发者提供路由检查和SSR调试工具，使团队更容易让模型更好地理解Vite/Nuxt应用程序。\n*   **unity-mcp**：允许与Unity游戏引擎API进行接口交互，实现AI辅助游戏开发，为AI工具提供管理资产、控制场景、编辑脚本和自动化Unity内任务的能力。\n\n#### 2. 开发者体验和AI增强编码：AI优先的开发者生产力\n\n这些项目通过改进开发者工作流、语义代码理解和安全代码执行，赋能AI、大型语言模型（LLM）和智能体，使其成为智能IDE助手和代码编辑器。\n\n*   **context7**：直接从代码中提取最新、版本特定的文档和代码示例，并将其直接插入到AI和LLM的提示上下文中。\n*   **serena**：为智能体驱动的编码工具包提供语义代码编辑和检索能力。\n*   **Peekaboo**：Swift代码分析工具，将屏幕上的内容转化为可操作的AI上下文，以创建完整的GUI自动化，并可用于AI助手。\n*   **coderunner**：将LLM转化为即时、本地执行伙伴，在机器上预配置的沙盒中编写和运行代码，自动安装工具，直接读取文件，并返回输出和生成的工件。\n\n#### 3. 自动化、测试和编排：MCP基础设施的可靠性和质量保证\n\n这些项目旨在将MCP基础设施扩展到生产级工具，用于自动化管道，并提供强大的测试和调试工具。它们有助于确保MCP能够大规模运行。\n\n*   **n8n-mcp**：一个超优化的平台，通过简化工作流创建和编排来增强n8n的工作流自动化。它集成了AI模型，帮助用户更好地理解和使用n8n节点。\n*   **inspector**：一个用于测试和调试MCP服务器的工具，通过检查协议握手、工具、资源、提示和OAuth流程。它提供内置的LLM游乐场，并允许运行评估模拟以捕获安全或性能回归。\n\n#### 总结与展望\n\n开发者们正以AI和MCP的力量以惊人的速度进行构建。这些项目代表了MCP生态系统和社区中增长最快的开发者工具。它们是开发者使用并关心的工具。GitHub Copilot和VS Code团队很高兴能赞助更多推动MCP等创新以实现智能体原生开发的开源项目。\n\n鼓励开发者通过GitHub Sponsors支持这些项目，并探索使用VS Code和GitHub Copilot体验MCP。\n\n---\n**作者：**\n![Kevin Crosby](https://avatars.githubusercontent.com/u/6313838?v=4&s=200)\nKevin Crosby，开源资助高级总监\n\n**相关文章：**\n探索更多来自GitHub的内容：\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) **文档**：掌握GitHub所需的一切，一站式获取。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) **GitHub**：在GitHub上构建未来，这里是任何人、任何地方构建任何东西的平台。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) **客户案例**：了解使用GitHub进行构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) **GitHub Universe 2025**：最后机会：节省700美元购买Universe现场通行证，于10月28-29日在旧金山与我们相聚。",
      "shortSummary": "模型上下文协议（MCP）正在革新AI与工具的交互方式。微软OSPO、GitHub Copilot和VS Code团队赞助了九个开源项目，旨在加速开发者生产力。这些项目分为三大类：框架和平台集成、AI增强的开发者体验、以及MCP基础设施的自动化、测试和编排。它们共同推动AI原生工作流和智能体工具的发展，赋能开发者高效构建。",
      "translated_title": "通过这9个开源AI和MCP项目加速开发者生产力",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/6313838?v=4&s=200",
          "alt": "Kevin Crosby",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>GitHub Copilot and VS Code teams, along with the Microsoft Open Source Program Office (OSPO), sponsored these nine open source MCP projects that provide new frameworks, tools, and assistants to unlock AI-native workflows, agentic tooling, and innovation.</p>\n<p>The post <a href=\"https://github.blog/open-source/accelerate-developer-productivity-with-these-9-open-source-ai-and-mcp-projects/\">Accelerate developer productivity with these 9 open source AI and MCP projects</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如果你是内向者，如何参加GitHub Universe（或任何技术大会） (原标题: How to navigate GitHub Universe (or any tech conference) if you’re an introvert)",
      "link": "https://github.blog/news-insights/company-news/how-to-navigate-github-universe-or-any-tech-conference-if-youre-an-introvert/",
      "pubDate": "Thu, 16 Oct 2025 16:14:02 +0000",
      "isoDate": "2025-10-16T16:14:02.000Z",
      "creator": "GitHub Staff",
      "summary": "# 如何作为内向者参加GitHub Universe（或任何技术大会）\n\n对于内向、焦虑或习惯长时间在电脑前工作的人来说，大型技术大会可能令人望而生畏。然而，GitHub Universe旨在为这类人群提供舒适的体验，它提供了多种参与方式，让参会者可以按照自己的节奏学习和交流。大会通过精心设计的活动，确保所有人的体验都更加舒适、安全和激动人心。\n\n以下是内向者有效参加GitHub Universe（或任何技术大会）的实用建议：\n\n## 1. 参加小型会议或研讨会\n与其选择最大、最繁忙的会议，不如选择小型研讨会、小众专题讨论和分组会议。这些小型活动通常能促进更深入的联系和对话，避免在人群中感到迷失。\n*   **GitHub Universe特色：** 互动式研讨会（参与人数少，对话深入）、演示型沙盒会议（包含实践练习，保持思维活跃）、讨论休息室（2-3名主持人引导小组讨论特定主题，注重积极参与和协作）。\n![与会者在演示室的会议期间使用笔记本电脑工作。](https://github.blog/wp-content/uploads/2025/10/image8.jpg?resize=1024%2C683)\n\n## 2. 寻找安静区和充电空间\n内向者需要独处来恢复精力。大会提供了专门的休息室和充电空间，让参会者无需在错过内容和保护个人平静之间做选择。\n*   **GitHub Universe特色：** 设有安静室，用于无手机的放松、冥想和祈祷。提供充足的饮料、小吃和餐食，以保持精力。建议到户外欣赏Fort Mason的海滨景色，呼吸新鲜空气，在会议间隙放松身心。\n![日落时分海湾景色，水面上有鸟儿飞翔，背景是群山。](https://github.blog/wp-content/uploads/2025/10/image7-1.jpg?resize=1024%2C683)\n\n## 3. 参与策划的社交活动\n如果大型、无主题的社交活动令人望而却步，可以寻找有引导或主题的活动，这些活动通常有明确的对话起点，更容易建立联系。\n*   **GitHub Universe特色结构化社交点：**\n    *   **Recess!：** 与志同道合的参会者交流，分享代码之外的兴趣爱好（如乐高爱好者、Swiftie粉丝）。\n    *   **Makerspace：** 创作互动项目，涵盖艺术、AI、音乐和机器人等领域，提供一个动手实践的平台。\n    *   **Open Source Zone：** 与开源项目的贡献者和维护者建立联系，探索项目，并庆祝社区主导软件的力量。\n![一个人在桌子旁组装色彩鲜艳的乐高建筑，包括一座塔楼和一栋房子，旁边有整理好的砖块容器。](https://github.blog/wp-content/uploads/2025/10/image3-1.jpg?resize=1024%2C683)\n\n## 4. 设定个人目标和界限\n提前确定参会目标，查看议程，明确必看会议和想见的人。务必安排充足的休息时间，无需感到内疚。\n*   **GitHub Universe工具：** 提供议程构建器、精选日程和内容轨道，帮助参会者根据兴趣和目标制定计划，并按照自己的节奏进行。\n![一位身穿格子西装的会议与会者在拥挤的展厅中阅读活动地图。](https://github.blog/wp-content/uploads/2025/10/image4-1.jpg?resize=1024%2C683)\n\n## 5. 携带破冰工具\n穿着与个人兴趣相关的T恤、佩戴徽章或贴纸，可以更容易地被他人搭讪，也可能增加自己主动与人交流的信心。\n*   **GitHub Universe周边：** 大会周边商品和社区贴纸旨在帮助引发自然、低压力的对话。如果会前没有，也可以在活动当天前往GitHub商店购买最新系列商品。\n![两位与会者在技术会议上交谈，其中一人佩戴GitHub Star标签并戴蓝色帽子。](https://github.blog/wp-content/uploads/2025/10/image6-1.jpg?resize=1024%2C683)\n\n## 6. 通过线上直播或点播会议参与\n如果亲自到场仍然不适，可以选择虚拟参加GitHub Universe，或稍后按需观看主题演讲和精选会议录像。\n*   **目标：** 确保参会者能以最适合自己的方式参与并保持联系。\n*   **注意：** 并非所有技术大会都提供此选项，但值得查询是否有从家中学习和连接的方式。\n![演讲者向大量观众展示GitHub模型，屏幕上显示“GitHub上新一代AI工程师”。](https://github.blog/wp-content/uploads/2025/10/image5-1.jpg?resize=1024%2C683)\n\n## 总结\n无论选择何种方式参加GitHub Universe——亲临现场、虚拟参与、只参加几个研讨会，或介于两者之间——一切都由个人掌控。大会希望无论是内向者还是外向者，或介于两者之间，都能拥有愉快的体验。\n![通过一个色彩鲜艳的艺术装置框架看到的恶魔岛景色，海滨有游客剪影。](https://github.blog/wp-content/uploads/2025/10/image2-1.jpg?resize=1024%2C683)",
      "shortSummary": "对于内向者而言，参加技术大会可能令人不知所措。GitHub Universe特别设计了多种方式，以确保所有参会者都能舒适地学习和交流。文章提供了六项实用建议：选择小型会议、寻找安静的充电空间、参与有组织的社交活动、提前设定个人目标和界限、携带破冰工具，以及利用线上直播或点播选项。这些策略旨在帮助内向者按照自己的节奏，最大化会议体验，确保无论亲临现场还是线上参与，都能获得愉快的经历。",
      "translated_title": "如果你是内向者，如何参加GitHub Universe（或任何技术大会）",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image8.jpg?resize=1024%2C683",
          "alt": "Attendees working on laptops during conference session in presentation room.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image7-1.jpg?resize=1024%2C683",
          "alt": "Sunset view across the bay with birds flying over water and hills in background.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image3-1.jpg?resize=1024%2C683",
          "alt": "Person at table assembling colorful LEGO buildings including a tower and house with organized brick containers.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image4-1.jpg?resize=1024%2C683",
          "alt": "Conference attendee in checkered blazer reading event map in crowded exhibition hall.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image6-1.jpg?resize=1024%2C683",
          "alt": "Two attendees having conversation at tech conference, one wearing GitHub Star tag and blue cap.",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image5-1.jpg?resize=1024%2C683",
          "alt": "Speaker presenting GitHub Models to large audience with \"A new generation of AI engineers on GitHub\" displayed on screen.",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image2-1.jpg?resize=1024%2C683",
          "alt": "View of Alcatraz Island through a colorful art installation frame with visitors silhouetted at waterfront.",
          "title": "",
          "position": 7
        },
        {
          "url": "https://avatars.githubusercontent.com/u/9919?v=4&s=200",
          "alt": "GitHub Staff",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>If alone time is your love language—don’t worry, it’s ours too—you can still attend, learn from, and enjoy big events like GitHub Universe. Here are some practical tips on how.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/how-to-navigate-github-universe-or-any-tech-conference-if-youre-an-introvert/\">How to navigate GitHub Universe (or any tech conference) if you’re an introvert</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "Copilot：更快、更智能，并为您的当前工作方式而生 (原标题: Copilot: Faster, smarter, and built for how you work now)",
      "link": "https://github.blog/ai-and-ml/github-copilot/copilot-faster-smarter-and-built-for-how-you-work-now/",
      "pubDate": "Wed, 15 Oct 2025 15:00:00 +0000",
      "isoDate": "2025-10-15T15:00:00.000Z",
      "creator": "Ashley Willis",
      "summary": "GitHub Copilot最初以代码自动补全工具的形式出现，现已发展成为开发者最广泛使用的AI工具，根据Pragmatic Engineer的调查，它已帮助开发者接受了超过30亿次代码建议，每月协助数百万次代码审查并贡献120万次拉取请求。Copilot的目标是帮助开发者将待办事项（TODOs）转化为已提交的代码，并专注于提供稳定而非前沿的生产级解决方案。\n\n### 从自动补全到实际协作\n\n如果说2024年是展示AI可能性的年份，那么2025年则致力于使其变得实用。Copilot已从一个简单的自动补全功能演变为一个多模态、多模型的助手，能够理解项目并推动其进展。它支持来自不同提供商的多个模型，并快速集成OpenAI和Google Gemini等最新AI模型。这一演变是基于开发者对更强大代理工作流和多文件编辑的需求而实现的，旨在让Copilot更智能，而无需用户进行安装或配置。\n\n### 从构思到合并，创纪录的速度\n\n过去一年，原始速度和代理工作流定义了新一代AI工具。Copilot对此做出了回应，引入了多项功能以加速开发流程：\n\n*   **代理模式（Agent mode）**：Copilot现在可以处理跨文件任务、运行命令、重构整个模块，并建议终端操作，所有这些都无需离开编辑器。\n*   **编码代理（Coding agent）**：将问题分配给Copilot，它将起草包含代码、测试和项目上下文的拉取请求，每月贡献约120万次拉取请求。\n*   **下一编辑建议（Next-edit suggestions）**：Copilot预测用户将进行的下一个更改，并以内联方式提供建议，一键即可完成。\n*   **低延迟补全（Low-latency completions）**：大多数Copilot响应在400毫秒内渲染，速度快到用户几乎察觉不到。\n*   **Copilot CLI**：将Copilot的智能引入终端，无需切换窗口即可进行设置、调试和脚本编写。\n*   **多模型路由（Multi-model routing）**：Copilot允许用户访问来自领先AI公司的多个大型语言模型（LLMs），以适应不同任务的需求。\n\n![GitHub Copilot功能列表](https://github.blog/wp-content/uploads/2025/10/FeatureList_v6.png?resize=1232%2C2146)\n\n### 随工作流扩展的AI\n\nCopilot无缝集成到开发者已使用的GitHub生态系统中，并随之扩展：\n\n*   **JetBrains + VS Code + CLI 兼容性**：无论在何处构建，都能获得相同的Copilot体验。\n*   **自定义指令（Custom instructions）**：通过`.copilot-instructions.md`文件，可以教导Copilot项目特定的命名约定、测试框架和注释格式。\n*   **GitHub MCP Server**：允许任何AI工具安全地访问GitHub上下文（拉取请求、问题、Actions），而无需离开GitHub。\n*   **工作区提示文件（Workspace prompt files）**：为团队提供可重用的蓝图，以确保提示的一致性。\n*   **2000万+开发者网络**：每一次Copilot更新都通过全球最大的真实开发者数据和反馈网络进行改进。\n\nCopilot不是一个需要“添加”到GitHub的独立工具，它是GitHub全栈开发平台的一部分，不仅帮助编写代码，还协助构建、测试、保护和发布软件。\n\n### 更智能、更清晰、更安全的代码\n\nCopilot在提升代码质量和安全防护方面投入了大量精力：\n\n*   **Copilot Autofix**：自动检测并修补漏洞，仅今年就修复了超过一百万个漏洞。\n*   **代码审查（Code review）**：在拉取请求中总结差异、标记逻辑错误并建议修复，每月在GitHub上支持数百万次代码审查。\n*   **改进的模型推理（Improved model reasoning）**：生成更具可读性、通过测试、更少lint错误和回归的代码。\n*   **CodeQL集成**：与GitHub Advanced Security、Dependabot和GitHub Actions集成，确保供应链的稳固性。\n*   **内置隐私**：通过企业隔离、审计日志和租户级控制，确保用户工作内容的私密性。\n\n研究表明，使用Copilot编写的新代码通常具有更高的可读性、可靠性和可维护性。Copilot由保护全球最大开源生态系统和90%以上财富100强公司的相同安全堆栈提供支持。\n\n### Copilot与其他工具的对比\n\nCopilot的独特之处在于其深度集成于GitHub，使其贴近开发者所做的所有事情，包括拉取请求、GitHub Actions工作流或CI/CD管道。这意味着：\n\n*   **无需迁移、新IDE或新习惯**：Copilot存在于开发者已使用的工具中。\n*   **全栈感知**：将拉取请求、审查、测试和工作流整合到同一对话中。\n*   **端到端覆盖**：Copilot为实际的软件交付提供AI辅助。\n\n![GitHub Copilot从2024到2025的飞跃](https://github.blog/wp-content/uploads/2025/10/LeapForward_v5.png?resize=1232%2C2104)\n\n### 未来展望\n\nGitHub Universe 2025将发布更多关于更智能代理工作流、更深度的多模型集成和下一代安全功能的新闻。Copilot将继续致力于帮助每位开发者更快地提交代码，而不是追逐待办事项。",
      "shortSummary": "GitHub Copilot已从代码补全发展为开发者最常用的AI工具，每月协助数百万次代码审查和拉取请求。它通过代理模式、编码代理、低延迟补全和CLI等功能，显著加速开发流程。Copilot深度集成于GitHub生态系统，支持多模型、自定义指令，并大幅提升代码质量与安全性。它帮助开发者从构思到发布全流程，无需切换工具，实现更快、更智能、更安全的软件交付，是GitHub全栈开发平台的核心组成部分。",
      "translated_title": "Copilot：更快、更智能，并为您的当前工作方式而生",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/FeatureList_v6.png?resize=1232%2C2146",
          "alt": "A table showing how GitHub Copilot can help you code faster (Agent mode, Coding agent, Next edit suggestions, Latency improvements, Model choice, Copilot CLI), Build at scale (JetBrains + VS Code + CLI parity, Custom instructions, GitHub MCP Server, 20M+ developers), and Ship quality (Copilot Autofix, Code review, Improved model reasoning, Security that works, Built-in privacy).",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/LeapForward_v5.png?resize=1232%2C2104",
          "alt": "A table demonstrating GitHub Copilot's leap forward from 2024 to 2025: Single model to Multi-model support, Single-file edits to Agent mode with multi-file reasoning, Basic completions to Next-edit suggestions and inline task automation, Chat in VS Code to IDE + JetBrains + CLI, Limited customization to Project-level instructions & workspace prompts, Text only to Image, diagram, and UI inputs, Early security hints to Copilot Autofix & deeper security integrations, and Competitive lag to 400ms responses & GitHub MCP Server.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://avatars.githubusercontent.com/u/3139143?v=4&s=200",
          "alt": "Ashley Willis",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 7
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Discover how GitHub Copilot has evolved from a high-powered autocomplete tool to a powerful, multi-model agentic assistant.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/copilot-faster-smarter-and-built-for-how-you-work-now/\">Copilot: Faster, smarter, and built for how you work now</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub Copilot 和 AI 代理如何拯救遗留系统 (原标题: How GitHub Copilot and AI agents are saving legacy systems)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-github-copilot-and-ai-agents-are-saving-legacy-systems/",
      "pubDate": "Tue, 14 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-14T16:00:00.000Z",
      "creator": "Andrea Griffiths",
      "summary": "# GitHub Copilot 和 AI 代理如何拯救遗留系统\n\n## 遗留系统现代化挑战\n文章指出，COBOL 等遗留系统（如处理数百万 ATM 交易的主机系统）虽然已运行 65 年，但仍在支撑全球最关键的业务。然而，COBOL 开发者日益稀缺，而现有 2000 亿行 COBOL 代码急需现代化。GitHub Copilot 和自主 AI 代理为这一挑战提供了新的解决方案。\n\n## AI 驱动的现代化方法\n微软的 Julia Kordick 团队展示了无需学习 COBOL 即可实现系统现代化的方法。关键在于将 AI 专业知识与拥有数十年领域知识的专家相结合，AI 负责设计智能解决方案，专家提供遗留系统知识。这种合作是成功的关键。\n\n## AI 驱动的遗留系统现代化三步框架\nJulia 团队开发了一个系统化的框架，适用于任何遗留系统现代化项目：\n\n### 1. 代码准备（逆向工程）\n*   **问题**：组织往往不清楚其遗留代码的具体功能。\n*   **解决方案**：利用 GitHub Copilot 作为“考古工具”进行代码分析。\n*   **Copilot 功能**：\n    *   从遗留文件中提取业务逻辑。\n    *   将所有内容以 Markdown 格式文档化，便于人工审查。\n    *   自动识别调用链和依赖关系。\n    *   清理不相关的注释和历史日志。\n    *   根据需要添加额外注释。\n*   **专家提示**：始终由人类专家审查 AI 生成的分析结果，领域知识对业务上下文至关重要。\n*   **Copilot 生成示例**：包括文件清单、业务目的（如客户账户验证、余额计算、交易日志生成）和发现的依赖项（如 DB2 数据库连接、外部验证服务调用、遗留打印队列系统）。\n\n### 2. 丰富（使代码易于 AI 理解）\n*   **添加上下文**：帮助 AI 更好地理解代码。\n*   **关键步骤**：\n    *   **翻译**：将非英语注释翻译成英语，因为模型在英语上下文中表现更好。\n    *   **结构分析**：COBOL 具有确定性模式（如 IDENTIFICATION DIVISION、ENVIRONMENT DIVISION、DATA DIVISION、PROCEDURE DIVISION 四个固定分区）。可以要求 GitHub Copilot 映射这些分区并总结其功能，或列出数据结构、提取业务逻辑。AI 可以解析这些结构化部分并用通俗易懂的语言解释，无需理解 COBOL 语法。\n    *   **文档作为事实来源**：将所有 AI 生成的内容保存为 Markdown 文件，作为主要参考资料。\n*   **专家提示**：COBOL 的冗长性反而是优势，如 `ADD TOTAL-SALES TO ANNUAL-REVENUE` 语句几乎是自文档化的，可要求 Copilot 将这些业务规则提取为自然语言描述。\n\n### 3. 自动化辅助（规模化流程）\n*   从交互式使用 Copilot 转向使用 AI 代理构建自动化工作流。\n*   **Microsoft Semantic Kernel 框架**：用于编排多个专业代理，每个代理负责特定任务，协同处理复杂性。\n*   **实践中的编排示例**：\n    *   **调用链映射**：生成 Mermaid 图表展示文件间的交互。一个代理读取 COBOL 文件，另一个追踪程序间的 `CALL` 语句，第三个生成可视化图表，从而无需手动追踪即可获得整个系统映射。\n    *   **测试驱动现代化**：代理 1 提取业务逻辑，代理 2 生成验证该逻辑的测试用例，代理 3 生成通过这些测试的现代代码。测试成为迁移过程中的安全网。\n    *   **依赖优化**：识别可替换为现代等效项的实用类和库。代理分析第三方 COBOL 库，检查是否存在现代替代方案，并指出简化迁移的机会。\n*   **专家提示**：在进行任何更改之前，使用 Mermaid 图表可视化复杂的依赖关系，有助于及早发现边缘情况。\n*   **Mermaid 图表示例**：\n    ![COBOL 到 Java 现代化代理工作流流程图](https://github.blog/wp-content/uploads/2025/10/mermaid.png?resize=475%2C908)\n\n## 现实检验：并非万能药\nJulia 坦言，AI 并非解决所有主机问题的“一键式”方案。人类必须参与验证，每个 COBOL 代码库都是独特且复杂的，完全自动化可能还需要至少五年。但即便如此，AI 仍能带来巨大进展。\n\n## Azure 示例框架\nJulia 团队已开源其整个框架（基于 Microsoft Semantic Kernel），包括：\n*   多个专业代理（如 DependencyMapperAgent, COBOLAnalyzerAgent, JavaConverterAgent）。\n*   成本跟踪（每 1000 行分析通常 2-5 美元）。\n*   内置的人工验证点。\n*   `doctor.sh` 配置和测试脚本，可快速启动。\n*   **快速设置**：通过 `git clone`、`cd`、`./doctor.sh setup` 和 `./doctor.sh run` 即可开始现代化过程。\n\n## 改变一切的商业案例\n这不仅仅是技术债务问题，更是关乎企业生存。传统方法（昂贵顾问、手动转换、生成难以维护的代码）效率低下。AI 驱动的方法则能帮助团队理解业务逻辑、生成可读的现代代码，并保持对知识产权的控制，使团队在过程中学习并维护代码。\n\n## 成为现代化英雄的路径\n*   **从小处着手**：识别小型遗留系统（少于 5000 行），用 GitHub Copilot 分析单个文件，文档化并分享。\n*   **构建 AI 工具包**：尝试 Azure 示例框架，学习代码分析的提示工程，实践迭代现代化技术。\n*   **超越代码**：考虑云原生设计的非功能性需求，规划分布式系统架构。\n\n## 现在是最佳时机\nAI 不会取代开发者专业知识，而是放大它。COBOL 专家提供领域知识，现代开发者带来架构视角，AI 提供规模化的模式识别和翻译能力。三者结合，遗留系统现代化将从不可能变为可实现。",
      "shortSummary": "GitHub Copilot 和 AI 代理正革新遗留系统现代化。面对 COBOL 等老旧系统和开发者短缺，AI 提供了一个三步框架：代码准备（逆向工程）、代码丰富（使 AI 易于理解）和自动化辅助（通过 AI 代理规模化）。该方法结合了 AI 的分析能力与人类领域知识，帮助企业理解业务逻辑，生成可维护的现代代码，从而有效解决技术债务和业务生存挑战。虽然人类验证仍不可或缺，但 AI 大幅加速了现代化进程。",
      "translated_title": "GitHub Copilot 和 AI 代理如何拯救遗留系统",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/mermaid.png?resize=475%2C908",
          "alt": "Flowchart showing the COBOL to Java modernization agent workflow. Seven boxes connected by arrows flow top to bottom: COBOLAnalyzerAgent, DependencyMapperAgent, Business Logic Extractor, Test Generator, JavaConverterAgent, Human Validation, and Production-Ready Java Quarkus Output.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg",
          "alt": "Andrea Griffiths",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>GitHub Copilot and AI agents are making legacy COBOL systems accessible to modern developers.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-github-copilot-and-ai-agents-are-saving-legacy-systems/\">How GitHub Copilot and AI agents are saving legacy systems</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub Copilot CLI：如何开始使用 (原标题: GitHub Copilot CLI: How to get started)",
      "link": "https://github.blog/ai-and-ml/github-copilot/github-copilot-cli-how-to-get-started/",
      "pubDate": "Mon, 13 Oct 2025 22:40:04 +0000",
      "isoDate": "2025-10-13T22:40:04.000Z",
      "creator": "Andrea Griffiths",
      "summary": "## GitHub Copilot CLI：将AI带入命令行\n\nGitHub Copilot CLI 是一款创新工具，旨在将人工智能辅助直接集成到命令行界面（CLI）中，从而消除开发者在终端、编辑器和浏览器之间频繁切换上下文的需要。它允许用户在不中断工作流的情况下，在熟悉的终端环境中获得AI的帮助。\n\n### 安装与认证\n要开始使用 Copilot CLI，用户需要：\n1.  通过 npm 全局安装：`npm install -g @github/copilot`。\n2.  启动 Copilot CLI：`copilot`。\n3.  使用现有的 GitHub 账户登录并认证，这需要有效的 GitHub Copilot Pro、Pro+、Business 或 Enterprise 计划。\n\n**系统要求**：Node v22+ 和 npm version 10 或更高版本。\n\n### 核心使用场景：从克隆到拉取请求\nCopilot CLI 旨在简化从项目克隆到提交拉取请求的整个开发流程，提供以下关键辅助功能：\n\n1.  **克隆并启动 Copilot**\n    *   用户首先克隆一个仓库，然后在该仓库目录中运行 `copilot`。\n    *   在 Copilot 界面中，可以随时输入 `/` 查看可用命令，或使用 `Ctrl+R` 查看 Copilot 执行的命令日志。\n\n2.  **了解新代码库结构**\n    *   无需手动浏览文件或拼凑 README，用户可以直接提问：“Explain the layout of this project.”。\n    *   Copilot 会利用 `find`、`tree` 命令和 `README` 文件来分析仓库，并返回一个清晰的 Markdown 格式项目结构摘要。\n\n3.  **检查环境准备情况**\n    *   用户可以询问：“Make sure my environment is ready to build this project.”。\n    *   Copilot 会验证项目依赖项，安装缺失的工具（如 GitHub CLI 所需的 Go），并确认本地构建环境已准备就绪。\n\n4.  **查找合适的“首次贡献”问题**\n    *   为了帮助用户快速开始贡献，可以提问：“Find good first issues in this repository and rank them by difficulty.”。\n    *   Copilot 会通过其内置的 GitHub MCP 服务器查询 GitHub Issues，并提供一份根据难度排序的精选问题列表。\n\n5.  **开始实现**\n    *   在找到要处理的问题后，用户可以指示 Copilot 起草解决方案，例如：“Start implementing issue #1234. Show me the diff before applying.”。\n    *   Copilot 会制定计划，进行必要的修改，并展示差异（diff）供用户审查和批准，确保用户始终掌控代码变更。\n    *   **专业提示**：在提示中 `@-mention` 文件可以引导 Copilot 关注代码的特定部分。\n\n6.  **提交并创建草稿拉取请求**\n    *   当更改满意后，用户可以要求 Copilot 自动化 Git 流程：“Stage changes, write a commit referencing #1234, and open a draft PR.”。\n    *   Copilot 将暂存文件，编写提交信息，并为用户创建草稿拉取请求。\n\n7.  **额外功能：终止占用端口的进程**\n    *   Copilot 还能处理常见的开发难题，例如端口占用。用户可以提问：“What process is using port 8080? Kill it and verify the port is free.”。\n    *   Copilot 会运行 `lsof` 命令查找进程 ID，终止该进程，并验证端口是否已释放。\n\n### 控制与权限管理\nCopilot CLI 始终将控制权交给用户。在执行任何命令或访问目录之前，它会提示用户选择：\n*   允许一次 (Allow once)\n*   始终允许此命令 (Allow always for this command)\n*   拒绝 (Deny)\n\n用户还可以使用以下命令管理权限：\n*   `/session`：查看当前允许的权限。\n*   `/reset`：随时重置所有权限。\n*   `/add-directory`：将目录添加到允许列表中。\n\n### 通过MCP服务器扩展\nCopilot CLI 内置了 GitHub MCP（Model Context Protocol）服务器，用于支持问题搜索和仓库交互。用户还可以使用 `/mcp` 命令从注册表添加任何自定义 MCP 服务器，从而根据特定工作流（如 Playwright 浏览器测试或公司内部工具集成）扩展其功能。\n\n![GitHub Copilot CLI MCP服务器添加界面](https://github.blog/wp-content/uploads/2025/10/image1_8dda93.png?resize=1024%2C785)\n\n### 重要意义\nCopilot CLI 的主要价值在于它能与开发者现有的终端工作流无缝融合，减少了在不同工具之间切换的认知负担。这对于新贡献者入门项目或开发者探索新代码库时，保持工作流的连贯性和效率至关重要。它被定位为 IDE 的补充工具，而非替代品。\n\n### 未来展望\nGitHub Copilot CLI 目前处于公开预览阶段，鼓励用户通过 `/feedback` 命令分享使用体验，以帮助塑造未来的开发路线图。\n\n![作者：Andrea Griffiths](https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg)\n\n**作者**：Andrea Griffiths，GitHub 高级开发者倡导者。",
      "shortSummary": "GitHub Copilot CLI 将AI助手直接集成到命令行，让开发者无需离开终端即可获得帮助。它通过 `npm` 安装，支持 Copilot Pro/Business/Enterprise 账户登录。Copilot CLI 能协助完成从代码库克隆、理解项目结构、检查环境、查找任务、实现代码到提交和创建拉取请求等一系列开发工作。它在执行操作前会征求用户许可，确保控制权，并支持通过 MCP 服务器扩展功能。该工具旨在减少上下文切换，提高开发效率，是 IDE 的有力补充，目前处于公开预览阶段。",
      "translated_title": "GitHub Copilot CLI：如何开始使用",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/image1_8dda93.png?resize=1024%2C785",
          "alt": "A terminal window showing the GitHub Copilot CLI interface where a user is adding a new MCP (Model Context Protocol) server. The screen includes input fields for server name, type (Local, HTTP, or SSE), command, arguments, environment variables, and tools to include. The interface indicates the user is logged in as “Andrea@Griffiths11” and offers navigation shortcuts for saving or canceling.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/08/Andrea-Griffiths_avatar_1755783168-200x200.jpeg",
          "alt": "Andrea Griffiths",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Discover how to use GitHub Copilot directly in the terminal. From cloning a repository to opening a pull request, here’s how to streamline your workflow with Copilot CLI.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/github-copilot-cli-how-to-get-started/\">GitHub Copilot CLI: How to get started</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "如何使用代理原语和上下文工程构建可靠的AI工作流 (原标题: How to build reliable AI workflows with agentic primitives and context engineering)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-to-build-reliable-ai-workflows-with-agentic-primitives-and-context-engineering/",
      "pubDate": "Mon, 13 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-13T16:00:00.000Z",
      "creator": "Daniel Meppiel",
      "summary": "本文介绍了一个三部分框架，旨在将临时性的AI探索转化为可重复、可靠的工程实践，从而构建可靠的AI工作流。该框架的核心是**代理原语**（可重用、可配置的构建块）和**上下文工程**（确保AI代理专注于正确的信息）。\n\n### AI原生开发框架\n\n该框架的公式是：Markdown提示工程 + 代理原语 + 上下文工程 = 可靠性。它旨在帮助开发者构建、扩展和共享能够学习并不断改进的智能系统。\n\n**💡 尝试使用GitHub Copilot CLI**：通过GitHub Copilot CLI，用户可以直接在终端中运行、调试和自动化AI工作流，无需设置脚本，也无上下文丢失，并能直接连接到GitHub仓库、拉取请求和问题。\n\n### 三层框架详解\n\n该框架通过结合Markdown的结构、代理原语的能力和智能上下文管理，将临时性的AI实验转变为可靠、可重复的过程。\n\n#### 第一层：使用Markdown进行更具策略性的提示工程\n\n清晰、精确、上下文丰富的提示能带来更好、更准确的结果。Markdown的结构（标题、列表、链接）可以自然地引导AI的推理，使输出更可预测和一致。关键技术包括：\n\n*   **上下文加载**：使用链接作为上下文注入点，从文件或网站中提取相关信息。\n*   **结构化思维**：使用标题和项目符号为AI创建清晰的推理路径。\n*   **角色激活**：使用“你是一名[此角色]的专家”等短语来触发专业知识领域。\n*   **工具集成**：使用`MCP tool tool-name`让AI代理在MCP服务器上以受控、可重复的方式运行代码。\n*   **精确语言**：通过具体指令消除歧义。\n*   **验证门**：“停止并获得用户批准”，确保在关键决策点有人工监督。\n\n例如，一个复杂的调试提示会明确指定AI的角色、参考文档、步骤、使用的工具以及在提交修复前寻求用户验证。\n\n#### 第二层：代理原语——系统化部署提示工程技术\n\n手动为每个任务编写完美的提示是不可持续的。代理原语是简单、可重用的文件或模块，为AI代理提供特定的能力或规则，从而系统化地实施提示工程技术。核心代理原语包括：\n\n*   **指令文件（.instructions.md）**：通过模块化文件部署结构化指导。\n*   **聊天模式（.chatmode.md）**：通过具有MCP工具边界的文件部署基于角色的专业知识，防止安全漏洞和跨域干扰。\n*   **代理工作流（.prompt.md）**：通过内置验证部署可重用提示。\n*   **规范文件（.spec.md）**：创建可重复结果的实施就绪蓝图。\n*   **代理记忆文件（.memory.md）**：在会话之间保留知识。\n*   **上下文辅助文件（.context.md）**：优化信息检索。\n\n**示例**：一个简单的“实现安全用户认证系统”提示，通过选择后端开发聊天模式，自动触发安全指令，加载上下文，生成规范文件，并执行带有验证门的实现工作流，最终实现开发者驱动的知识积累和持续改进。\n\n#### 第三层：上下文工程——帮助AI代理专注于重要信息\n\n大型语言模型（LLM）的记忆（上下文窗口）有限，且容易遗忘。战略性地提供上下文可以帮助AI专注于相关信息，提高其可靠性和效率。关键技术包括：\n\n*   **会话拆分**：为不同的开发阶段和任务使用不同的代理会话（例如，规划、实施、测试）。\n*   **模块化和自定义规则/指令**：仅通过有针对性的`.instructions.md`文件应用相关指令，节省上下文空间。\n*   **记忆驱动开发**：利用`.memory.md`文件在会话和时间轴上维护项目知识和决策。\n*   **上下文优化**：战略性地使用`.context.md`上下文辅助文件加速信息检索并减少认知负荷。\n*   **认知焦点优化**：在`.chatmode.md`文件中使用聊天模式，使AI的注意力集中在相关领域，防止跨域干扰。\n\n### 代理工作流：完整的系统实践\n\n当所有三层结合时，就形成了代理工作流——一个完整的、系统化的过程，其中所有代理原语协同工作，理解提示，并仅使用所需的上下文。这些工作流可以作为`.prompt.md`文件实现，协调多个代理原语，无论是在IDE、终端还是CI管道中执行。\n\n### 工具：如何扩展代理原语\n\n代理原语本质上是用自然语言编写的可执行软件，其扩展方式类似于任何编程生态系统的演变。它们具有模块化、可重用性、依赖性、演进性和可分发性等特性，因此需要适当的工具基础设施。\n\n*   **代理CLI运行时**：\n    *   **内循环（VS Code和GitHub Copilot）**：用于交互式开发、测试和工作流优化。\n    *   **外循环（代理CLI运行时，如Copilot CLI）**：用于可重现的执行、CI/CD集成和生产部署，将自然语言程序从个人工具转变为强大、可共享的解决方案。\n*   **运行时管理（APM - 代理包管理器）**：\n    *   APM通过提供统一的运行时管理和包分发来解决管理多个代理CLI运行时的复杂性。\n    *   它允许用户安装和配置不同的运行时（如Copilot CLI、OpenAI Codex CLI），安装依赖项，编译代理原语文件，并运行工作流，同时保持一致的VS Code开发体验。\n\n本文强调，通过迭代改进，该框架能够创建复合智能，不断提升AI系统的性能和可靠性。",
      "shortSummary": "本文介绍了一个三部分框架，旨在通过将AI探索转化为可靠的工程实践，构建可靠的AI工作流。该框架结合了**Markdown提示工程**（结构化提示）、**代理原语**（可重用构建块）和**上下文工程**（优化AI注意力）。它通过GitHub Copilot CLI和APM等工具，将自然语言编写的代理原语视为软件，支持其开发、自动化和部署，从而实现AI系统的持续学习和改进，确保可预测和一致的输出。",
      "translated_title": "如何使用代理原语和上下文工程构建可靠的AI工作流",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>See how this three-part framework will turn AI into a repeatable and reliable engineering practice.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-to-build-reliable-ai-workflows-with-agentic-primitives-and-context-engineering/\">How to build reliable AI workflows with agentic primitives and context engineering</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "Git 二十年，GitHub 总部两天：Git Merge 2025 亮点回顾 🎉 (原标题: 20 Years of Git, 2 days at GitHub HQ: Git Merge 2025 highlights 🎉)",
      "link": "https://github.blog/open-source/git/20-years-of-git-2-days-at-github-hq-git-merge-2025-highlights/",
      "pubDate": "Thu, 09 Oct 2025 08:00:00 +0000",
      "isoDate": "2025-10-09T08:00:00.000Z",
      "creator": "Lee Reilly",
      "summary": "# Git Merge 2025 亮点回顾\n\nGit Merge 2025 在 GitHub 旧金山总部举行，庆祝 Git 诞生二十周年。此次活动汇聚了来自世界各地的贡献者，共同回顾 Git 的历史并展望其未来。超过 100 人亲临现场，另有 600 多人在线参与。\n\n## 第一天：面向所有人的精彩演讲\n\n第一天的议程内容丰富，涵盖了从 Git 内部机制的深入探讨到面向初学者的创意工作流介绍，满足了不同背景参与者的需求。演讲者包括维护者、教育工作者、业余爱好者，甚至还有一名高中生，他们分享了 Git 如何塑造他们的工作和学习。演讲者通过线上和线下方式参与，使得本次 Git Merge 成为迄今为止最具包容性和可访问性的活动之一。\n\n![Git 贡献者峰会期间，人们围坐在 GitHub 总部行政简报中心的一张长会议桌旁。笔记本电脑打开着，几位参与者通过房间前方的大屏幕远程加入。](https://github.blog/wp-content/uploads/2025/10/gitmerge2.png?resize=1600%2C1200)\n\n在 GitHub 总部的圆形剧场，与会者齐聚一堂。多位专家带来了精彩分享：\n*   **Scott Chacon**：通过现场演示 GitButler CLI，将幽默与代码相结合。\n*   **Google 的 Martin von Zweigbergk**：深入剖析 Jujutsu 如何与 Git 集成。\n*   **Jacob Stopak**：通过可视化和游戏化重新构想 Git 学习。\n*   **Steffen Hiller 和 Zoran Petrovic**：展示了可视化仓库随时间增长的新方法。\n*   **brian m. carlson**：探讨了 SHA-256 互操作性的未来发展。\n\n所有这些演讲及更多内容都可在活动播放列表中观看。\n\n## 第二天：社区协作的核心\n\n第二天的活动聚焦于社区协作，包括年度 Git 贡献者峰会和一场非正式会议（Unconference）。核心维护者和贡献者通过线上和线下方式会面，共同规划 Git 未来一年的发展路线图，这也是迄今为止最支持远程参与的聚会之一。\n\n![Git 贡献者峰会期间，人们围坐在 GitHub 总部行政简报中心的一张长会议桌旁。笔记本电脑打开着，几位参与者通过房间前方的大屏幕远程加入。](https://github.blog/wp-content/uploads/2025/10/498627888-b18da4a6-d427-48b5-915b-b99cf10bbb57_4c4af4.png?resize=2600%2C1950)\n\n在峰会期间，非正式会议为所有人提供了开放的交流平台，白板上迅速填满了关于分支策略、Git 教育和创意工作流的各种想法。\n\n## 感谢\n\nGit Merge 2025 的成功离不开整个社区的贡献。衷心感谢所有分享工作的演讲者、付出时间和精力的贡献者和志愿者，以及每一位前来学习和交流的与会者。同时，也特别感谢 GitHub 幕后团队为全球与会者提供无缝的活动体验，以及赞助商 GitButler 和 Google 对本次活动的大力支持。",
      "shortSummary": "Git Merge 2025 在 GitHub 总部举行，庆祝 Git 诞生二十周年。活动汇聚了全球贡献者，共同回顾 Git 历史并展望未来。第一天有丰富的技术演讲，涵盖 Git 内部机制到创意工作流。第二天则专注于社区协作，通过贡献者峰会和非正式会议规划 Git 路线图。本次活动吸引了超过 100 人现场参与，600 多人在线观看，并感谢了社区、GitHub 团队及赞助商 GitButler 和 Google 的支持。",
      "translated_title": "Git 二十年，GitHub 总部两天：Git Merge 2025 亮点回顾 🎉",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/gitmerge2.png?resize=1600%2C1200",
          "alt": "People seated around a long conference table at GitHub HQ’s Executive Briefing Center during the Git Contributors Summit. Laptops are open, and several participants join remotely on large screens at the front of the room.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/498627888-b18da4a6-d427-48b5-915b-b99cf10bbb57_4c4af4.png?resize=2600%2C1950",
          "alt": "People seated around a long conference table at GitHub HQ’s Executive Briefing Center during the Git Contributors Summit. Laptops are open, and several participants join remotely on large screens at the front of the room.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://avatars.githubusercontent.com/u/121322?v=4&s=200",
          "alt": "Lee Reilly",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 7
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Git Merge 2025 celebrated 20 years of Git with talks, collaboration, and community. Catch the highlights and recordings.</p>\n<p>The post <a href=\"https://github.blog/open-source/git/20-years-of-git-2-days-at-github-hq-git-merge-2025-highlights/\">20 Years of Git, 2 days at GitHub HQ: Git Merge 2025 highlights 🎉</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub可用性报告：2025年9月 (原标题: GitHub Availability Report: September 2025)",
      "link": "https://github.blog/news-insights/company-news/github-availability-report-september-2025/",
      "pubDate": "Thu, 09 Oct 2025 02:19:28 +0000",
      "isoDate": "2025-10-09T02:19:28.000Z",
      "creator": "Jakub Oleksy",
      "summary": "GitHub在2025年9月经历了三次导致服务性能下降的事件。以下是详细报告：\n\n## 2025年9月GitHub服务可用性报告\n\n2025年9月，GitHub共发生了三起导致服务性能下降的事件。\n\n### 事件一：Copilot可用性下降\n*   **日期与时间**：2025年9月15日，UTC时间17:55至18:20（持续25分钟）。\n*   **受影响服务**：Copilot的大部分功能可用性下降，返回403错误。\n*   **根本原因**：一个特性标志被部分部署到全局限速器，意外触发了限速逻辑中的一个未检测到的边缘情况。该标志旨在为部分用户降低限速，却导致限速配置进入无效状态，限制了100%的请求。\n*   **解决方案**：回滚了该特性标志，服务立即恢复。\n*   **未来改进**：\n    *   增加流量异常监控器，以便及早发现问题。\n    *   扩大限速扩展测试的覆盖范围，加强预生产验证，以增强系统弹性。\n\n### 事件二：电子邮件投递延迟\n*   **日期与时间**：\n    *   2025年9月23日，UTC时间15:29至17:38。\n    *   2025年9月24日，UTC时间14:02至15:12。\n*   **受影响服务**：电子邮件投递，导致大多数类型的电子邮件通知显著延迟。两次事件总影响约130分钟，客户经历的峰值延迟约为50分钟。\n*   **根本原因**：异常高的流量导致部分出站电子邮件服务器资源争用。\n*   **解决方案**：更新了配置，以在高流量时更好地分配容量。\n*   **未来改进**：更新监控器以提高检测能力。\n\n### 事件三：Copilot API部分性能下降\n*   **日期与时间**：2025年9月29日，UTC时间16:26至17:33（持续67分钟）。\n*   **受影响服务**：Copilot API出现部分性能下降，导致平均0.2%的GitHub MCP服务器请求出现间歇性404错误，峰值时约2%。\n*   **根本原因**：内部依赖升级暴露了服务中的一个配置错误。\n*   **解决方案**：回滚了升级以解决配置错误。\n*   **未来改进**：修复配置问题，并将改进文档和发布流程，以防止类似问题再次发生。\n\n### 更多信息\n\n*   请关注GitHub状态页面获取实时更新和事后回顾。\n*   如需了解更多GitHub正在进行的工作，请查阅GitHub工程博客。\n\n本文作者：\n\n![Jakub Oleksy](https://avatars.githubusercontent.com/u/6147691?v=4&s=200)\n\n### 相关资源\n\n探索更多来自GitHub的内容：\n\n*   **文档**：\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n    掌握GitHub所需的一切，尽在一个地方。\n*   **GitHub**：\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n    在GitHub上构建未来，这里是任何人、任何地点构建任何东西的平台。\n*   **客户案例**：\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n    了解使用GitHub进行构建的公司和工程团队。\n*   **GitHub Universe 2025**：\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)\n    最后机会：节省700美元购买Universe现场通行证，于10月28-29日在旧金山与我们相聚。",
      "shortSummary": "2025年9月，GitHub经历了三次服务性能下降事件。9月15日，Copilot因限速逻辑边缘情况导致25分钟可用性下降。9月24日，电子邮件投递因高流量导致约50分钟的峰值延迟。9月29日，Copilot API因内部依赖升级暴露配置错误，导致67分钟的部分性能下降。GitHub已采取措施解决问题，并计划通过增强监控、扩大测试覆盖和改进发布流程来提升系统弹性。",
      "translated_title": "GitHub可用性报告：2025年9月",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/6147691?v=4&s=200",
          "alt": "Jakub Oleksy",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>In September, we experienced three incidents that resulted in degraded performance across GitHub services.</p>\n<p>The post <a href=\"https://github.blog/news-insights/company-news/github-availability-report-september-2025/\">GitHub Availability Report: September 2025</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "使用 GitHub Copilot 编码代理和移动设备随时随地完成紧急修复 (原标题: Completing urgent fixes anywhere with GitHub Copilot coding agent and mobile)",
      "link": "https://github.blog/developer-skills/github/completing-urgent-fixes-anywhere-with-github-copilot-coding-agent-and-mobile/",
      "pubDate": "Wed, 08 Oct 2025 16:00:00 +0000",
      "isoDate": "2025-10-08T16:00:00.000Z",
      "creator": "Scott Lusk",
      "summary": "## 引言：GitHub Copilot 编码代理与 GitHub Mobile 的强大结合\n\n文章指出，在软件开发中，结合多种工具可以产生巨大的力量，就像视频游戏中的组合升级一样。GitHub 相信，这种组合能够赋能开发者应对任何挑战，无论是修复关键错误、添加新功能还是发布产品。本文通过作者的亲身经历，展示了 GitHub Copilot 编码代理和 GitHub Mobile 应用如何协同工作，帮助开发者在任何地点高效完成紧急修复。\n\n## 亲身经历：移动设备上的紧急修复\n\n作者分享了一个紧急场景：在一次高可见度演示前，一个关键网站功能出现错误，而他当时远离笔记本电脑。传统修复方式耗时过长，回滚也不是选项。在这种情况下，作者利用手机上的 GitHub Copilot 编码代理和 GitHub Mobile 应用解决了问题。\n\n**操作流程：**\n\n1.  **识别问题：** 作者在 GitHub Mobile 上扫描了最近的拉取请求（PR），识别出一个可能导致问题的 PR（添加了 Markdown 渲染和富文本编辑器）。\n2.  **创建问题：** 他创建了一个新问题，详细描述了问题，并引用了可疑的 PR，同时利用了仓库中预设的 `copilot-instructions` 文件来指导 Copilot 代理。\n3.  **分配任务：** 作者将该问题分配给了 GitHub Copilot 编码代理。\n4.  **Copilot 修复：** 仅仅六分钟后，GitHub Mobile 上收到通知，Copilot 已生成一个包含修复方案的 PR。\n5.  **移动审查与批准：** 作者立即在手机上审查了 PR，确认这是一个清晰、简单的解决方案。他甚至可以在手机上通过预览分支测试修复，然后批准了 PR。\n6.  **自动化部署：** 修复通过仓库中由 GitHub Actions 管理的自动化工作流部署到生产环境。\n\n**结果：** 在作者到达汽车时，问题已解决，演示得以顺利进行。这次完全通过手机管理修复的经历，揭示了 GitHub 平台内强大的能力，并促使作者探索更多平台内组合以提升工作效率。\n\n以下是作者在手机上审查并批准拉取请求后，通过 GitHub Mobile 应用看到的视图，显示了 Copilot 对问题的修复摘要：\n\n![Copilot Coding Agent with a suggested fix for our issue.](https://github.blog/wp-content/uploads/2025/10/01-copilot-pr-fix.jpeg?resize=472%2C1024)\n\n## 解锁这种“能力提升”的关键\n\n作者强调，虽然并非所有开发任务都应通过移动设备委派给 Copilot，但拥有正确的工具应对特定情况至关重要。以下是实现这种效率提升的三个关键点：\n\n### 关键 1：利用指令文件 (Instructions Files)\n\n指令文件为 GitHub Copilot 提供了项目特定的指导和规则，显著影响其建议的质量和相关性。\n\n*   **作用：** 提供仓库的核心目的、技术栈、架构约束、编码标准、测试策略、依赖管理、可观察性、文档、错误处理等上下文信息。\n*   **位置：** 通常位于仓库根目录下的 `.github/copilot-instructions.md` 文件中。\n*   **示例：** 文章提供了一个详细的 `copilot-instructions.md` 示例，涵盖了 Next.js App Router、React、TypeScript、Tailwind CSS、pnpm、shadcn/ui 组件、服务器组件、Vitest 测试、文件夹结构、常用命令等。\n*   **路径特定指令：** 可以使用 `applyTo` 关键字定义针对特定目录、文件模式、语言或任务上下文的指令，例如针对 `src/components/ui` 和 `src/components/shared` 目录的组件创建规范。\n*   **生成指令：** 在 VS Code 中，可以通过“配置聊天”选项生成指令文件。\n\n![Location of copilot-instructions in .github folder](https://github.blog/wp-content/uploads/2025/10/02-github-copilot-instructions_v2.png?resize=2400%2C2528)\n\n![Generate instructions in VS Code using configure chat.](https://github.blog/wp-content/uploads/2025/10/03-configure-chat_v2.png?resize=1200%2C992)\n\n**要点：** 编写良好的指令文件能帮助 Copilot 更好地理解项目和编码标准，从而提供更高质量的输出，加快任务完成速度。\n\n### 关键 2：熟悉 Copilot 编码代理\n\n将 Copilot 编码代理视为团队成员，了解其擅长的技能，并充分利用这些技能。\n\n*   **熟悉方式：** 通过分配问题、创建拉取请求和跟踪 Copilot 在仓库中的会话来熟悉其工作方式。\n*   **创建问题时的指导：** 在将问题分配给 Copilot 之前，确保问题描述提供正确的上下文、明确意图并定义清晰。\n*   **审查与迭代：** Copilot 完成工作后，务必审查其生成的 PR。可以通过在评论中使用 `@copilot` 来请求修改，而不是盲目接受。\n\n![Assign an issue to Copilot coding agent.](https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v3.png?resize=2400%2C1770)\n\n![Copilot as an assignee on an issue.](https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v2.png?resize=836%2C1024)\n\n![Copilot fixed the issue with and had a pull request in six minutes.](https://github.blog/wp-content/uploads/2025/10/05-6min-fix-pr_v3.png?resize=2400%2C806)\n\n![Use @copilot in a pull request comment to have copilot make changes.](https://github.blog/wp-content/uploads/2025/10/06-mention-copilot_v2.png?resize=2400%2C588)\n\n**要点：** 将任务委派给 Copilot 编码代理可以释放开发者的精力，专注于其他关键任务，但仍需仔细审查其结果并提供具体的指导。\n\n### 关键 3：建立最佳实践和自动化\n\n结合 IssueOps 和 GitHub Actions 自动化是提升效率的另一个重要方面。\n\n*   **IssueOps：** 将 GitHub Issues 转化为自动化的控制接口。结构化的命令可以触发 GitHub Actions 工作流，执行部署、配置、迁移等操作，并将结果写回问题中，便于审计。\n*   **问题模板：** 使用预先创建的问题模板（例如针对 Bug 的模板）可以帮助开发者提供详细的上下文信息，节省创建问题的时间。\n*   **示例：** 文章提供了一个“Bug (Copilot Coding Agent-ready)”问题模板示例，包含环境、复现步骤等字段，旨在为 Copilot 提供修复所需的详细信息。\n\n**要点：** 自动化和结构化的流程（如 IssueOps 和问题模板）进一步提升了开发和问题解决的效率。",
      "shortSummary": "本文介绍了如何结合 GitHub Copilot 编码代理和 GitHub Mobile 应用，实现随时随地处理紧急软件修复。作者通过亲身经历展示了在远离电脑时，如何利用手机创建问题、分配给 Copilot 自动生成修复拉取请求，并在手机上审查、批准并部署。文章强调了利用自定义指令文件指导 Copilot、熟悉其工作方式以及通过 IssueOps 和 GitHub Actions 建立自动化流程的重要性，以显著提高开发效率和应对突发情况的能力。",
      "translated_title": "使用 GitHub Copilot 编码代理和移动设备随时随地完成紧急修复",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/01-copilot-pr-fix.jpeg?resize=472%2C1024",
          "alt": "Copilot Coding Agent with a suggested fix for our issue.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/02-github-copilot-instructions_v2.png?resize=2400%2C2528",
          "alt": "Location of copilot-instructions in .github folder",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/03-configure-chat_v2.png?resize=1200%2C992",
          "alt": "Generate instructions in VS Code using configure chat.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v3.png?resize=2400%2C1770",
          "alt": "Assign an issue to Copilot coding agent.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/04-assign-to-copilot_v2.png?resize=836%2C1024",
          "alt": "Copilot as an assignee on an issue.",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/05-6min-fix-pr_v3.png?resize=2400%2C806",
          "alt": "Copilot fixed the issue with and had a pull request in six minutes.",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/10/06-mention-copilot_v2.png?resize=2400%2C588",
          "alt": "Use @copilot in a pull request comment to have copilot make changes.",
          "title": "",
          "position": 7
        },
        {
          "url": "https://avatars.githubusercontent.com/u/2342987?v=4&s=200",
          "alt": "Scott Lusk",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Unlock the full potential of the GitHub platform. See how Copilot coding agent and GitHub Mobile combine to help you tackle development tasks and urgent fixes, no matter where you are.</p>\n<p>The post <a href=\"https://github.blog/developer-skills/github/completing-urgent-fixes-anywhere-with-github-copilot-coding-agent-and-mobile/\">Completing urgent fixes anywhere with GitHub Copilot coding agent and mobile</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "我们如何使用GitHub Copilot在五小时内实现无障碍合规自动化 (原标题: How we automated accessibility compliance in five hours with GitHub Copilot)",
      "link": "https://github.blog/ai-and-ml/github-copilot/how-we-automated-accessibility-compliance-in-five-hours-with-github-copilot/",
      "pubDate": "Tue, 07 Oct 2025 17:00:00 +0000",
      "isoDate": "2025-10-07T17:00:00.000Z",
      "creator": "Janice Rimmer",
      "summary": "## 引言：手动无障碍合规流程的挑战\n\nGitHub每周都会收到核心服务的无障碍等级报告。此前，当服务等级低于阈值时，他们依赖一个完全手动的修复链：有人阅读报告，在仓库中创建问题，猜测负责人，在单独的治理跟踪器中追踪状态，并尝试向领导层汇报。这种方式导致了反应迟缓、跟进不均衡，并且随着服务和检查的增加，无法实现规模化。他们意识到需要改变，并决定利用GitHub Copilot将这个脆弱的流程转变为一个自动化、可审计的循环。\n\n**传统手动流程的低效性：**\n\n*   每周三，无障碍等级报告会出现在跟踪板上，低于预定义分数的服务需要立即修复。\n*   当发现不合格等级时，管理方式效率低下：\n    *   手动在仓库中创建跟踪问题。\n    *   猜测正确的负责人。\n    *   希望有人跟进。\n    *   手动在无障碍治理仓库中跟踪进度。\n\n**具体痛点：**\n\n*   无法扩展。\n*   团队收到的沟通不一致。\n*   领导层缺乏可见性。\n*   修复时间从几天延长到几周。\n\n## 解决方案：利用GitHub Copilot实现自动化\n\n为了解决这些问题，GitHub需要一种可扩展、低维护的方式来触发、跟踪和关闭无障碍修复，而无需持续的手动协调。他们选择使用GitHub Copilot来自动化整个工作流程。\n\n**自动化后的新工作流程：**\n\n*   当无障碍等级低于某个分数时，自动在服务仓库中创建GitHub Issues。\n*   对于持续不合规的情况，使用新的等级数据更新现有问题。\n*   将修复问题与客户关系管理（CRM）跟踪板进行交叉引用。\n*   当服务恢复到可接受的等级时，自动关闭链接。\n*   同步治理板和服务团队之间的负责人。\n*   提及利益相关者以提高透明度，同时避免仓库垃圾信息。\n\n## Copilot如何改变开发方式\n\n传统的内部自动化构建方法意味着起草详细需求、将其优先级排入团队待办事项、等待工程能力，并经历多个冲刺迭代才能看到端到端的工作价值，这可能需要数周甚至更长时间。相反，GitHub团队花了五到六个小时直接与Copilot对话，快速原型设计和测试想法。\n\n**Copilot驱动的快速迭代模式：**\n\n他们的工作循环刻意保持轻量化。每次迭代大致遵循以下模式：\n\n*   用简单的语言描述一个规则（例如，检测持续不合规并确保问题存在或已更新当前上下文）。\n*   要求Copilot搭建或调整代码（例如，新的辅助函数、数据解析调整、API优化），而不是从头开始编写所有内容。\n*   使用少量合成的等级快照（例如，初始下降、持续下降、恢复）在本地验证逻辑。\n*   审查输出（例如，问题主体、标签、负责人）并优化提示，以收紧命名、阈值或分支。\n*   添加防护措施：幂等性（即，如果有效问题已打开则跳过）、简单的阻尼以避免频繁关闭和重新打开，以及对不完整数据的防御性处理。\n*   记录高级决策（例如，“更新现有问题”与“无操作 – 合规”）以快速验证意图。\n*   重新运行测试（加上一个变体）以确认没有回归，然后提交并进入下一个规则。\n\n**带来的好处：**\n\n*   每次迭代都针对单一行为，Copilot的建议保持相关性，避免了大型重构。\n*   当出现新的边缘情况（如短暂的分数下降或因服务重命名导致重复创建问题）时，他们会添加另一个短循环，而不是安排会议。\n*   这种快速的节奏使他们能够在没有正式项目计划的情况下，收敛到一个可投入生产的方案。\n\n## 从原型到生产的演进\n\n他们首先构建了一个快速原型，以可靠地检测不合规服务、提出或更新修复问题，并保持所有权可见。他们还希望证明无需任何人工分类即可实现这一点。最初的目标是在一个具有历史已知等级波动性的预生产环境中，对一小组服务进行受控推广。\n\n**逐步推广计划：**\n\n1.  在预生产环境中使用个人访问令牌进行原型开发。\n2.  在预生产环境中使用模拟服务仓库观察少量测试周度等级周期，并调整阈值或标签。\n3.  重构代码并迁移到GitHub App，以实现适当的安全性和范围权限。\n4.  部署到生产环境，并推广到所有跟踪无障碍合规的服务。\n5.  在噪音最小化后，正式化治理报告。\n\n**验证与成果：**\n\n为了验证，他们录制了一个简洁的端到端演示，展示了输入等级变化如何触发自动问题创建、交叉链接、负责人同步以及重复失败时的后续更新。这个演示让利益相关者能够异步评估完整体验。反馈是决定性的。看到实时问题以清晰的结构和可追溯性出现，加速了从原型阶段推进的批准。他们获得了工程合作伙伴关系，以将流程投入生产，建立了用于强化的沙盒环境，并开始实施具有适当安全和规模考虑的GitHub App版本。\n\n## 实际影响\n\n影响来自两个层面：引入的自动化以及Copilot改变了谁可以构建和迭代它的方式。\n\n**自动化带来的成果：**\n\n*   修复问题现在及时出现（或更新），而不是等待人工分类，这使得服务所有者能够立即理解解决这些问题的策略要求，并在请求例外时承担责任。\n*   所有权、状态和交叉链接集中在一处，为领导层提供了一个可靠的快照，无需临时电子表格或通知。这也加强了无障碍项目所有者与工程团队之间的合作。\n*   由于幂等逻辑和阻尼机制防止了嘈杂的关闭和重新打开，重复或陈旧的联系减少了。\n*   治理工作从文书跟踪转向对系统性无障碍模式进行更高价值的分析，并实现了更严格的治理控制。\n\n**Copilot赋能交付的成果：**\n\n*   领域专家构建了原型，使工程师能够专注于其关键的路线图工作。\n*   减少了工程师的上下文切换。\n*   合作时间用于安全、规模和生产强化，而不是基本的搭建工作。\n*   降低了未来合规或治理工具的门槛，因为现在有了一个其他人可以遵循的可重复模式。\n\n**核心转变：**\n\n这种转变在无障碍等级发出新风险信号时最为重要：系统现在会在跟进时间流逝之前，发现问题、分配所有权并保持状态可见，而不是等待某人注意到并启动手动链条。得益于Copilot，这个系统提前数周投入使用，并且可以由最接近治理问题的人进行迭代。\n\n底线是，他们从“让我写一张工单”转变为“这是具有可衡量影响修复速度和可见性的工作代码”。这种转变改变了人们对内部合规工具实现速度的期望。\n\n## 文章作者与相关资源\n\n本文由 **Janice Rimmer** 撰写，她是一名员工项目经理，致力于通过协作加速创新。\n\n![Janice Rimmer](https://avatars.githubusercontent.com/u/105733155?v=4&s=200)\n\n探索更多来自GitHub的资源：\n\n*   **文档**：掌握GitHub所需的一切，尽在一处。\n    ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n*   **GitHub**：在GitHub上构建未来，这里是任何人、任何地点构建任何东西的地方。\n    ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n*   **客户案例**：了解使用GitHub进行构建的公司和工程团队。\n    ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n*   **GitHub Universe 2025**：抓住最后机会，节省700美元购买Universe现场通行证，并于10月28-29日在旧金山加入我们。\n    ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)",
      "shortSummary": "GitHub利用GitHub Copilot在五小时内自动化了其无障碍合规流程。此前，该流程完全手动，导致响应慢、跟进不一致且难以扩展。通过Copilot，他们构建了一个自动化系统，能自动创建和更新GitHub Issues、同步负责人、追踪进度并自动关闭已解决的问题。这不仅显著加快了修复速度，提高了可见性，还让领域专家而非工程师主导了原型开发，降低了未来工具开发的门槛，将治理工作从文书处理转向高价值分析。",
      "translated_title": "我们如何使用GitHub Copilot在五小时内实现无障碍合规自动化",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/105733155?v=4&s=200",
          "alt": "Janice Rimmer",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>See how we turned weekly accessibility signals into an automated, accountable remediation workflow—powered by GitHub Copilot and cross‑functional collaboration.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/how-we-automated-accessibility-compliance-in-five-hours-with-github-copilot/\">How GitHub Copilot enabled accessibility governance process improvements in record time</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-10-19T04:33:19.578Z"
}