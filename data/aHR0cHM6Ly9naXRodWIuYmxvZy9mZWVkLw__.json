{
  "sourceUrl": "https://github.blog/feed/",
  "title": "The GitHub Blog",
  "description": "Updates, ideas, and inspiration from GitHub to help developers build and design software.",
  "link": "https://github.blog/",
  "items": [
    {
      "title": "规范驱动开发：在使用AI构建时将Markdown作为编程语言 (原标题: Spec-driven development: Using Markdown as a programming language when building with AI)",
      "link": "https://github.blog/ai-and-ml/generative-ai/spec-driven-development-using-markdown-as-a-programming-language-when-building-with-ai/",
      "pubDate": "Tue, 30 Sep 2025 19:07:46 +0000",
      "isoDate": "2025-09-30T19:07:46.000Z",
      "creator": "Tomas Vesely",
      "summary": "# 规范驱动开发：使用Markdown作为AI编程语言\n\n## 引言：AI编码代理的挑战\n\n传统的AI编码代理（如GitHub Copilot）工作流程通常是迭代式的：“编写应用A实现X”，“添加功能Y”，“修复bug Z”。然而，这种方式容易导致代理丢失应用目的或之前的决策上下文，表现为重复提问或提出与先前指令矛盾的建议。尽管一些代理支持自定义指令文件（如`copilot-instructions.md`），但作者发现，在编码过程中常常忘记更新这些文件，且在聊天提示和指令文件中重复相同信息显得多余。\n\n## 核心理念：Markdown驱动的规范开发\n\n作者提出了一种新的方法：将整个应用“编写”在Markdown指令文件中。在他的最新项目——GitHub Brain MCP Server中，作者尝试将应用代码完全用Markdown编写，然后让GitHub Copilot将其编译成实际的Go代码。通过这种方式，他很少直接编辑或查看Go代码。这种方法理论上适用于任何AI编码代理和编程语言，本文以VS Code、GitHub Copilot和Go为例进行阐述。\n\n## 关键文件与工作流程\n\n该工作流程涉及四个核心文件：\n\n*   `.github/prompts/compile.prompt.md`：AI编码代理的编译提示文件。\n*   `main.go`：由AI代理生成的实际Go代码。\n*   `main.md`：应用的Markdown格式规范文件，是应用的“源代码”。\n*   `README.md`：面向用户的文档。\n\n**高层工作流程：** 编辑`README.md`或`main.md`进行开发，调用`compile.prompt.md`让AI代理生成`main.go`，然后像普通Go应用一样构建和运行`main.go`。\n\n### `README.md`：用户文档\n\n`README.md`提供清晰的用户安装和使用说明。对于GitHub Brain MCP Server这个命令行工具，它包含了`pull`和`mcp`等命令的用法和参数说明。例如：\n\n```markdown\n# GitHub Brain MCP Server\n**GitHub Brain** 是一个实验性的MCP服务器，用于总结GitHub讨论、问题和拉取请求。\n\n## 用法\n```sh\ngo run main.go <command> [<args>]\n```\n\n**工作流程：**\n1.  使用 `pull` 命令填充本地数据库。\n2.  使用 `mcp` 命令启动MCP服务器。\n\n### `pull`\n使用GitHub数据填充本地数据库。\n示例：\n```sh\ngo run main.go pull -o my-org\n```\n参数：\n- `-t`: 您的GitHub个人访问令牌。**必需。**\n- `-o`: 要从中拉取数据的GitHub组织。**必需。**\n- `-db`: SQLite数据库目录路径。默认值：当前目录中的 `db` 文件夹。\n\n### `mcp`\n使用本地数据库启动MCP服务器。\n```\n\n### `main.md`：AI编码代理规范\n\n`main.md`是应用的实际“源代码”，当需要添加功能或修复bug时，作者会编辑此文件。它将`README.md`中的用户文档嵌入到规范中，确保文档和实现同步。例如：\n\n```markdown\n# GitHub Brain MCP Server\nAI编码代理规范。面向用户的文档在 [README.md](README.md) 中。\n\n## CLI\n实现 [Usage](README.md#usage) 部分的CLI。遵循精确的参数/变量名称。仅支持 `pull` 和 `mcp` 命令。\n\n## pull\n- 将CLI参数和环境变量解析为 `Config` 结构体：\n  - `Organization`：组织名称（必需）\n  - `GithubToken`：GitHub API令牌（必需）\n  - `DBDir`：SQLite数据库路径（默认：`./db`）\n- 始终使用 `Config` 结构体，避免多次读取环境变量\n- 拉取项：仓库、讨论、问题、拉取请求、团队\n- 使用 `log/slog` 自定义日志记录器，用于控制台输出中带有时间戳的最后5条日志消息\n```\n\n`main.md`中还包含具体的逻辑描述，如查询GitHub Discussions的GraphQL片段、处理数据更新的逻辑，以及数据库模式定义：\n\n```markdown\n### Discussions\n- 查询每个 `has_discussions_enabled: true` 仓库的讨论\n- 在拉取第一页之前，从数据库记录最近的仓库讨论 `updated_at` 时间戳\n```graphql\n{\n  repository(owner: \"<organization>\", name: \"<repository>\") {\n    discussions(first: 100, orderBy: { field: UPDATED_AT, direction: DESC }) {\n      nodes {\n        url\n        title\n        body\n        createdAt\n        updatedAt\n        author {\n          login\n        }\n      }\n    }\n  }\n}\n```\n- 如果仓库不存在，则从数据库中删除该仓库及其所有相关项并继续\n- 按最近的 `updatedAt` 排序查询讨论\n- 当遇到 `updatedAt` 早于记录时间戳的讨论时停止拉取\n- 通过主键 `url` 保存或更新\n- 保留讨论的Markdown正文\n\n## Database\nSQLite数据库位于 `{Config.DbDir}/{Config.Organization}.db`（如果需要则创建文件夹）。避免事务。立即保存每个GraphQL项。\n\n### Tables\n#### table:repositories\n- 主键：`name`\n- 索引：`updated_at`\n- `name`：仓库名称（例如，`repo`），不带组织前缀\n- `has_discussions_enabled`：布尔值，指示仓库是否启用了讨论功能\n- `has_issues_enabled`：布尔值，指示仓库是否启用了问题功能\n- `updated_at`：上次更新时间戳\n```\n\n### `compile.prompt.md`：AI编码代理提示\n\n`compile.prompt.md`使用GitHub Copilot的提示文件格式，指示代理将`main.md`编译为`main.go`。其内容简洁，将大部分信息委托给`main.md`：\n\n```markdown\n---\nmode: agent\n---\n- 更新应用以遵循 [规范](../../main.md)\n- 使用VS Code任务构建代码。避免要求我手动运行 `go build` 或 `go test` 命令。\n- 获取每个使用的库的GitHub主页，以获取文档和示例。\n```\n\n## 整合工作流程\n\n开发循环直接而高效：\n\n1.  编辑`main.md`或`README.md`中的规范。\n2.  请求AI编码代理将其编译为Go代码（在GitHub Copilot for VS Code中，使用`/`命令调用提示）。\n    ![在VS Code中使用GitHub Copilot的/命令调用AI编码代理提示的截图。](https://github.blog/wp-content/uploads/2025/09/image-2.png?resize=1024%2C516)\n3.  运行并测试应用。\n4.  如果出现问题，更新规范并重复。\n\n对于较小的规范，GitHub Copilot通常会自动捕获更改。随着规范的增长，可以通过添加“focus on <the-change>”来引导代理。\n\n![在VS Code中演示如何使用/命令提示GitHub Copilot专注于特定更改的截图。](https://github.blog/wp-content/uploads/2025/09/image-2_87448b.png?resize=1770%2C2836)\n\n## Markdown中的编码辅助\n\n直接在`main.md`中编码有时比直接编写Go代码更具挑战性，因为它要求清晰地描述所需功能。幸运的是，GitHub Copilot可以协助编写Markdown规范本身，例如，帮助为MCP工具添加分页逻辑，并推荐适当的分页样式和参数名称。\n\n![在Markdown规范中，GitHub Copilot在VS Code中为MCP工具推荐分页样式和参数名称的截图。](https://github.blog/wp-content/uploads/2025/09/image-4.png?resize=1760%2C2672)\n\n## Markdown规范的Linting\n\n与任何代码一样，`main.md`也可能变得混乱。为了解决这个问题，可以使用另一个提示文件`lint.prompt.md`来请求Copilot清理规范：\n\n```markdown\n---\nmode: agent\n---\n- 优化 [应用规范](../../main.md) 以提高清晰度和简洁性\n- 将英语视为一种编程语言\n- 最小化同义词的数量 - 即 pull/get/fetch。坚持使用一个术语。\n- 删除重复内容\n- 保留所有重要细节\n- 不要修改Go代码。只优化Markdown文件。\n- 不要修改此提示本身。\n```\n\nAI编码代理会根据此提示对`main.md`进行Linting，如果结果满意，再使用`compile.prompt.md`将其编译为Go代码。\n\n![GitHub Copilot在VS Code中清理和Linting Markdown规范以提高清晰度和简洁性的截图。](https://github.blog/wp-content/uploads/2025/09/image-3_bc6205.png?resize=1742%2C2416)\n\n## 总结与展望\n\n经过几个月的使用，作者观察到：\n\n*   该工作流程有效，并随着Copilot的代理更新而不断改进。\n*   随着`main.go`代码量的增长，编译速度会变慢。下一步计划是修改规范，将编译后的代码拆分为多个模块。\n*   测试仍然至关重要。规范描述了预期行为，但测试验证了它。\n*   未来尝试：完全丢弃Go代码，并从头开始用另一种语言重新生成应用，以验证新代码的即时可用性。\n\n作者鼓励读者尝试这些实验性工作流程，并对该领域的快速发展表示乐观。",
      "shortSummary": "本文介绍了一种“规范驱动开发”新范式，利用Markdown作为AI编码代理的“编程语言”。开发者在Markdown文件（如`main.md`）中详细定义应用逻辑、CLI和数据库架构，然后由AI代理（如GitHub Copilot）将其编译成实际代码（如Go）。这种方法解决了AI代理上下文丢失问题，确保文档与实现同步，并允许AI协助编写和优化规范。该工作流程提高了开发效率，尽管大型项目可能面临编译速度挑战，但其潜力巨大，尤其是在跨语言代码生成方面。",
      "translated_title": "规范驱动开发：在使用AI构建时将Markdown作为编程语言",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-2.png?resize=1024%2C516",
          "alt": "Screenshot showing the use of the / command in GitHub Copilot for VS Code to invoke the AI coding agent prompt.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-2_87448b.png?resize=1770%2C2836",
          "alt": "Screenshot demonstrating how to prompt GitHub Copilot in VS Code to focus on a specific change using the / command.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-4.png?resize=1760%2C2672",
          "alt": "Screenshot showing GitHub Copilot in VS Code recommending pagination style and parameter names for MCP tools in the Markdown specification.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/image-3_bc6205.png?resize=1742%2C2416",
          "alt": "Screenshot of GitHub Copilot in VS Code cleaning up and linting the Markdown specification for improved clarity and conciseness.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://avatars.githubusercontent.com/u/448809?v=4&s=200",
          "alt": "Tomas Vesely",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>I coded my latest app entirely in Markdown and let GitHub Copilot compile it into Go. This resulted in cleaner specs, faster iteration, and no more context loss.  ✨</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/generative-ai/spec-driven-development-using-markdown-as-a-programming-language-when-building-with-ai/\">Spec-driven development: Using Markdown as a programming language when building with AI</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "CodeQL从零到英雄第五部分：调试查询 (原标题: CodeQL zero to hero part 5: Debugging queries)",
      "link": "https://github.blog/security/vulnerability-research/codeql-zero-to-hero-part-5-debugging-queries/",
      "pubDate": "Mon, 29 Sep 2025 15:00:00 +0000",
      "isoDate": "2025-09-29T15:00:00.000Z",
      "creator": "Sylwia Budzynska",
      "summary": "## CodeQL从零到英雄第五部分：调试查询\n\n本文是“CodeQL从零到英雄”系列博客的第五部分，专注于讲解如何调试和修复CodeQL查询。由于CodeQL是一种类似Prolog的语言，其评估模型与Python等主流语言不同，传统的调试方法（如单步执行、GDB或打印语句）不适用。幸运的是，CodeQL提供了一系列内置功能来帮助诊断和解决查询问题。\n\n### 调试背景：Gradio框架中的不安全反序列化漏洞示例\n文章以一个由用户提出的Gradio框架中不安全反序列化漏洞为例进行讲解。该漏洞涉及用户通过`gr.File`上传文件，然后应用程序使用`pickle.load`加载该文件内容，导致不安全的反序列化。攻击者可以上传恶意文件，然后应用程序加载它。\n\n**最小代码示例：**\n```python\nimport pickle\nimport gradio as gr\n\ndef load_config_from_file(config_file):\n    \"\"\"Load settings from a UUID.pkl file.\"\"\"\n    try:\n        with open(config_file.name, 'rb') as f:\n            settings = pickle.load(f)\n        return settings\n    except Exception as e:\n        return f\"Error loading configuration: {str(e)}\"\n\nwith gr.Blocks(title=\"Configuration Loader\") as demo:\n    config_file_input = gr.File(label=\"Load Config File\")\n    load_config_button = gr.Button(\"Load Existing Config From File\", variant=\"primary\")\n    config_status = gr.Textbox(label=\"Status\")\n\n    load_config_button.click(\n        fn=load_config_from_file,\n        inputs=[config_file_input],\n        outputs=[config_status]\n    )\n    demo.launch()\n```\n\n一个初步的CodeQL污点追踪查询未能检测到此漏洞，这促使了对查询进行调试的需求。\n\n### CodeQL查询调试步骤\n\n以下是解决CodeQL查询问题的建议步骤：\n\n1.  **创建最小CodeQL数据库**\n    *   **目的：** 减少结果数量，便于聚焦调试。\n    *   **方法：** 在包含最小代码示例的目录中运行 `codeql database create codeql-zth5 --language=python`。\n\n2.  **简化查询并快速评估**\n    *   **目的：** 验证`isSource`和`isSink`谓词是否正确识别了源和汇点。\n    *   **问题：** 初始`isSink`谓词将整个`pickle.load(f)`调用标记为汇点，而非其第一个参数。\n    *   **修正`isSink`谓词：**\n        ```ql\n        predicate isSink(DataFlow::Node sink) {\n            exists(Decoding d | d.mayExecuteInput() | sink = d.getAnInput())\n        }\n        ```\n        此修正确保汇点是可执行反序列化（如`pickle.load`）的输入参数。快速评估后，源和汇点均被正确识别。\n\n3.  **抽象语法树 (AST) 查看器**\n    *   **目的：** 当识别源或汇点节点遇到困难时，通过查看代码的AST来确定特定代码元素的CodeQL类型。\n    *   **方法：** 右键点击感兴趣的代码元素，选择“CodeQL: View AST”。\n\n4.  **`getAQlClass` 谓词**\n    *   **目的：** 识别代码元素的类型。通常建议为此创建一个单独的查询。\n    *   **示例查询：** 查询`gradio.Button.click`函数参数的类型。\n        ```ql\n        import python\n        import semmle.python.ApiGraphs\n        import semmle.python.Concepts\n        import semmle.python.dataflow.new.RemoteFlowSources\n\n        from DataFlow::Node node\n        where node = API::moduleImport(\"gradio\").getMember(\"Button\").getReturn()\n                               .getMember(\"click\").getACall().getParameter(0, \"fn\").getParameter(_).asSource()\n        select node, node.getAQlClass()\n        ```\n    *   **结果：** 可以看到`ExprNode`和`ParameterNode`等类型，有助于编写更精确的查询。\n\n5.  **部分路径图：正向追踪 (Partial Path Graph: Forwards)**\n    *   **目的：** 确定污点流停止传播的位置。这对于大型代码库尤其有用，可以通过限制源文件来减少结果。\n    *   **方法：** 使用`PartialFlow::FlowExplorationFwd`模块和`PartialFlow::partialFlow`谓词，并设置`explorationLimit()`来控制分析深度。\n    *   **观察：** 污点流在`with open(config_file.name, 'rb') as f:`行中的`config_file`处停止，未能传播到`config_file.name`属性。\n    *   **原因：** 默认情况下，CodeQL不会将污点传播到对象的所有属性。\n\n6.  **污点传播步骤 (Taint Step)**\n    *   **目的：** 帮助污点从一个对象传播到其特定属性（例如，从`config_file`传播到`config_file.name`）。\n    *   **方法：** 在污点追踪配置中添加`isAdditionalFlowStep`谓词。\n    *   **示例：**\n        ```ql\n        predicate isAdditionalFlowStep(DataFlow::Node nodeFrom, DataFlow::Node nodeTo) {\n            exists(DataFlow::AttrRead attr | attr.accesses(nodeFrom, \"name\") and nodeTo = attr )\n        }\n        ```\n        这个步骤允许CodeQL将污点传播到任何对`name`属性的读取操作。虽然这可能在生产查询中引入误报，但在安全研究和调试中非常有用。\n\n通过以上步骤，可以系统地诊断和解决CodeQL查询中遇到的问题，从而成功检测到预期的漏洞。",
      "shortSummary": "本文是CodeQL系列教程的第五部分，重点介绍如何调试CodeQL查询。由于CodeQL的Prolog特性，传统调试方法无效。文章通过一个Gradio不安全反序列化漏洞示例，详细阐述了调试步骤：首先创建最小数据库，然后快速评估并修正源/汇点定义。接着利用AST查看器和`getAQlClass`识别代码元素类型。最后，使用部分路径图定位污点流中断点，并通过添加`isAdditionalFlowStep`谓词来解决污点未能传播到对象属性的问题，从而成功检测漏洞。",
      "translated_title": "CodeQL从零到英雄第五部分：调试查询",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Learn to debug and fix your CodeQL queries.</p>\n<p>The post <a href=\"https://github.blog/security/vulnerability-research/codeql-zero-to-hero-part-5-debugging-queries/\">CodeQL zero to hero part 5: Debugging queries</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub 如何保护开发者免受版权执法过度干预 (原标题: How GitHub protects developers from copyright enforcement overreach)",
      "link": "https://github.blog/news-insights/policy-news-and-insights/how-github-protects-developers-from-copyright-enforcement-overreach/",
      "pubDate": "Fri, 26 Sep 2025 17:06:17 +0000",
      "isoDate": "2025-09-26T17:06:17.000Z",
      "creator": "Margaret Tucker",
      "summary": "# GitHub 如何保护开发者免受版权执法过度干预\n\nGitHub 采取以开发者为中心的方法，旨在保护开源开发者免受版权执法过度干预，避免因不公正的版权下架通知而导致账户被暂停。\n\n## 传统版权政策的挑战\n\n*   **“三振出局”政策的弊端**：许多平台采用的“三振出局”政策可能导致不公正的结果，尤其对开源开发者而言。他们经常分叉流行项目，这些项目可能成为版权下架的对象。\n*   **账户暂停的负面影响**：账户暂停不仅对开发者个人有即时负面影响，也会影响他们维护的所有开源项目。\n*   **代码的复杂性**：代码的协作性、复杂性和高复用性使得版权执法充满挑战，并放大了下架的下游影响。\n\n## GitHub 的开发者优先方法\n\nGitHub 采取以下措施来应对这些挑战：\n\n*   **个案审查**：在暂停账户之前，GitHub 会对每个案件进行单独审查。\n*   **确保合法工作不受影响**：确保版权执法不会阻碍合法的开发工作。\n\n## 最高法院案件及其对平台责任的影响\n\n美国最高法院即将审理的 **Cox Communications v. Sony Music Entertainment** 案件，将决定互联网服务提供商或平台何时应对用户侵犯版权的行为负责。这可能改变平台处理版权主张的方式，进而影响开发者构建和分享代码。\n\n*   **行业立场**：Google、微软（包括 GitHub）、亚马逊、Mozilla 和 Pinterest 等公司敦促法院采纳明确规则：只有当存在“实质性协助侵权的自觉、有罪行为”时，才应承担责任，而非仅仅是知晓或不作为。\n*   **安全港的重要性**：开发者所依赖的平台依赖于《数字千年版权法案》（DMCA）第 512 条等法律保护，即“安全港”条款，以避免对用户生成内容承担持续责任。只要平台遵循正式的通知-下架流程，DMCA 第 512 条就能保护其免受版权侵权责任。\n*   **GitHub 的特殊性**：鉴于开源的协作性质、代码的功能作用以及移除广泛使用代码的连锁反应，DMCA 保护对 GitHub 尤为关键。\n*   **下架通知的挑战**：GitHub 拥有超过 1.5 亿开发者和 5.18 亿项目，每月处理数百起 DMCA 下架通知，但同时也收到数千份自动化、不完整或不准确的通知。如果仅凭“知晓”就足以构成责任，平台可能被迫基于有缺陷的通知过度移除内容，从而扼杀软件生态系统中的创新和协作。\n\n## GitHub 的 DMCA 下架政策\n\nGitHub 的 DMCA 下架政策旨在支持版权保护，同时限制对合法项目的干扰，其特点包括：\n\n*   **明确的申诉和恢复路径**。\n*   **透明度**：将有效的 DMCA 下架通知发布到公共 DMCA 存储库。\n\n## 广泛的支持\n\n该案件对 GitHub 作为一个平台以及所有使用互联网服务提供商进行创作和协作的开发者都至关重要。包括 Engine Advocacy、电子前沿基金会（EFF）和 Public Knowledge 在内的广泛公民社会利益相关者提交了法庭之友简报，倡导言论自由、开放互联网，并强调常识性责任限制对现代互联网运作的重要性。\n\n## 透明度中心更新\n\nGitHub 致力于以开发者为中心的内容审核，通过以下方式实现透明度：\n\n*   **限制内容的方式**：以最窄的方式限制内容以解决违规问题，给予用户申诉机会，并提供行动透明度。\n*   **数据更新**：GitHub 透明度中心已更新 2025 年上半年数据，包括结构化数据文件存储库。\n*   **政府下架报告的改进**：\n    *   **合并接收类别**：将基于当地法律和基于服务条款收到的政府下架请求合并为一个“收到的政府下架”报告类别，以提高报告的准确性。\n    *   **保留处理类别**：保留“基于当地法律处理的政府下架”和“基于服务条款处理的政府下架”的单独类别。这区分了违反服务条款的内容（按常规报告处理）和仅违反当地法律的内容（仅在法律要求管辖区内限制访问，并将请求发布到 `gov-takedowns` 存储库以确保透明度）。\n    *   **README 澄清**：`gov-takedowns` 存储库的 README 已澄清，该存储库仅包含因当地法律导致内容移除的官方政府请求。\n*   **目的**：这些澄清旨在确保共享数据的清晰性和准确性，以便研究人员可以利用这些数据研究平台审核和政府信息压制。\n\n## 可接受使用政策（AUP）更新\n\nGitHub 已发布拉取请求并启动了为期 30 天的通知和评论期，以更新其可接受使用政策（AUP）。拟议的更新将重组现有 AUP 条款，将其分为独立的政策并提供额外指导。\n\n*   **新政策包括**：\n    *   儿童性虐待材料（CSAM）\n    *   恐怖主义和暴力极端主义内容（TVEC）\n    *   非自愿亲密图像\n    *   合成媒体和人工智能工具（将明确禁止 CSAM 和 TVEC，符合国际法律）。\n*   **评论期**：邀请所有利益相关者在 10 月 16 日之前对拟议的 AUP 补充进行审查和评论。\n\n--- \n\n**作者：**\n\n![Margaret Tucker](https://avatars.githubusercontent.com/u/92055439?v=4&s=200)\n\n**相关文章：**\n\n探索更多来自 GitHub 的内容：\n\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) **文档**：掌握 GitHub 所需的一切，尽在一处。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) **GitHub**：在 GitHub 上构建未来，这里是任何人、任何地方构建任何东西的平台。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) **客户案例**：了解使用 GitHub 进行构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) **GitHub Universe 2025**：最后机会：节省 700 美元购买 Universe 现场通行证，并于 10 月 28-29 日在旧金山加入我们。",
      "shortSummary": "GitHub 致力于以开发者为中心，保护开源开发者免受版权执法过度干预。他们反对“三振出局”政策，主张个案审查，并支持最高法院将平台责任限制在“自觉、有罪行为”的裁决，而非仅仅知晓。GitHub 通过 DMCA 安全港、透明的下架政策、更新的透明度中心和可接受使用政策，确保在保护版权的同时，不阻碍合法协作和创新。他们还改进了政府下架报告，并更新了 AUP 以应对 CSAM、TVEC 和 AI 工具等新挑战。",
      "translated_title": "GitHub 如何保护开发者免受版权执法过度干预",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/92055439?v=4&s=200",
          "alt": "Margaret Tucker",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Why the U.S. Supreme Court case Cox v. Sony matters for developers and sharing updates to our Transparency Center and Acceptable Use Policies.</p>\n<p>The post <a href=\"https://github.blog/news-insights/policy-news-and-insights/how-github-protects-developers-from-copyright-enforcement-overreach/\">How GitHub protects developers from copyright enforcement overreach</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "开启2025年网络安全意识月：研究员聚焦与奖励提升 (原标题: Kicking off Cybersecurity Awareness Month 2025: Researcher Spotlights and Enhanced Incentives)",
      "link": "https://github.blog/security/vulnerability-research/kicking-off-cybersecurity-awareness-month-2025-researcher-spotlights-and-enhanced-incentives/",
      "pubDate": "Fri, 26 Sep 2025 15:00:00 +0000",
      "isoDate": "2025-09-26T15:00:00.000Z",
      "creator": "Shilpa Kumari",
      "summary": "## 开启2025年网络安全意识月：研究员聚焦与奖励提升\n\nGitHub在2025年网络安全意识月（十月）期间，通过表彰安全研究人员并推出新的激励措施，强调了安全在不断发展的数字环境中的重要性。保护全球软件生态系统依赖于安全研究社区的承诺、技能和独创性。\n\n### 主要举措与激励\n\nGitHub为庆祝网络安全意识月，推出了以下主要举措：\n\n1.  **漏洞提交额外奖励**\n    *   **奖励内容**：针对Copilot Coding Agent、GitHub Spark和Copilot Spaces功能的**所有符合条件的有效漏洞提交**，提供额外的10%奖金。\n    *   **资格要求**：报告需明确提及漏洞与Copilot Coding Agent、GitHub Spark或Copilot Spaces的关联。\n    *   **活动期限**：2025年10月1日至31日。\n\n2.  **2025年“玻璃防火墙”大会 (Glass Firewall Conference)**\n    *   **合作方**：GitHub与Capital One、Salesforce和HackerOne合作举办。\n    *   **目标群体**：专为对安全研究和网络安全感兴趣的女性举办的独家活动。\n    *   **大会宗旨**：赋能和支持女性从事道德黑客和安全测试（无论是作为职业还是爱好），努力创造一个欢迎的环境，并提供入门基础知识。\n    *   **行动呼吁**：了解更多信息并进行注册。\n\n3.  **研究员聚焦 (Researcher's Spotlight)**\n    *   **年度传统**：每年都会借此机会突出那些为GitHub漏洞赏金计划做出贡献的研究员，并分享他们独特的经验。\n    *   **洞察分享**：通过访谈，深入了解他们的安全研究方法、兴趣和旅程。\n    *   **往期聚焦研究员**：\n        *   @chen-robert 和 @ginkoid\n        *   @yvvdwf\n        *   @ahacker1\n        *   @inspector-ambitious\n        *   @Ammar Askar\n        *   @adrianoapj\n        *   @imrerad\n    *   **展望**：本月将有更多研究员被聚焦。\n\n### 参与呼吁\n\nGitHub鼓励所有感兴趣的安全研究人员参与其漏洞赏金计划。每一次提交都有助于提升GitHub、其产品、开发者社区和客户的安全性。访问GitHub网站可获取计划的范围、规则和奖励详情。\n\n### 作者信息\n\n本文由 Shilpa Kumari 撰写。\n\n![Shilpa Kumari](https://avatars.githubusercontent.com/u/82128924?v=4&s=200)\n\n### 相关文章\n\n*   **更安全的npm供应链计划**：GitHub正通过更严格的认证、细粒度令牌和增强的信任发布来加强npm的安全性，以恢复开源生态系统的信任。\n*   **保护VS Code免受提示注入攻击**：解释VS Code功能如何降低因间接提示注入导致GitHub令牌、机密文件泄露或任意代码执行的风险。\n\n### 探索更多GitHub资源\n\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) **Docs**：掌握GitHub所需的一切，尽在一处。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) **GitHub**：在GitHub上构建未来，这里是任何人从任何地方构建任何东西的平台。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) **客户案例**：了解使用GitHub进行构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) **GitHub Universe 2025**：最后机会，节省700美元购买线下门票，于10月28-29日在旧金山与我们相聚。",
      "shortSummary": "GitHub在2025年网络安全意识月期间，推出多项举措以表彰并激励安全研究人员。这包括为Copilot Coding Agent、GitHub Spark和Copilot Spaces功能的有效漏洞提交提供10%的额外奖金（2025年10月1日至31日）。此外，GitHub将与合作伙伴共同举办“玻璃防火墙”大会，支持女性从事安全研究。文章还继续聚焦贡献突出的研究员，并鼓励更多人参与其漏洞赏金计划，共同提升GitHub生态系统的安全性。",
      "translated_title": "开启2025年网络安全意识月：研究员聚焦与奖励提升",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/82128924?v=4&s=200",
          "alt": "Shilpa Kumari",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>For this year’s Cybersecurity Awareness Month, GitHub’s Bug Bounty team is excited to offer some additional incentives to security researchers!</p>\n<p>The post <a href=\"https://github.blog/security/vulnerability-research/kicking-off-cybersecurity-awareness-month-2025-researcher-spotlights-and-enhanced-incentives/\">Kicking off Cybersecurity Awareness Month 2025: Researcher spotlights and enhanced incentives</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "超越浏览器构建：Keeley Hammond谈Electron、开源和维护的未来 (原标题: Building beyond the browser: Keeley Hammond on Electron, open source, and the future of maintainership)",
      "link": "https://github.blog/open-source/maintainers/building-beyond-the-browser-keeley-hammond-on-electron-open-source-and-the-future-of-maintainership/",
      "pubDate": "Thu, 25 Sep 2025 17:05:48 +0000",
      "isoDate": "2025-09-25T17:05:48.000Z",
      "creator": "Abigail Cabunoc Mayes",
      "summary": "# 超越浏览器构建：Keeley Hammond谈Electron、开源和维护的未来\n\n本文记录了作者与Electron项目长期维护者Keeley Hammond的对话，探讨了Electron的技术能力、开源项目的可持续维护之道以及未来的挑战。作者指出，尽管Electron在日常工具（如VS Code、Slack、Discord）中广泛应用，但其作为使用Web技术构建跨平台桌面应用的能力，以及其背后的可持续维护模式，是常常被忽视的关键。\n\n## 从“新手问题”到核心维护者\n\nKeeley Hammond的维护者之路始于InVision，当时她主动承担了Electron相关工作。她强调，Electron社区的“热情欢迎”是她坚持至今的关键。社区对“基础”问题的耐心解答和私密Slack群组的支持，让她得以学习和成长。如今，Keeley致力于营造一个同样支持新贡献者的文化。\n\n## 关于Electron的常见误解\n\nKeeley纠正了关于Electron应用臃肿或缓慢的常见误解。她认为，性能问题更多源于糟糕的代码而非Electron本身，并指出原生应用也可能占用大量资源。Electron团队每周回溯Chromium更新，维护三个活跃发布线，并大力投资修补漏洞，表明其对安全性和性能的重视程度不亚于任何原生框架。\n\n## 治理模式如何维持增长\n\nElectron项目如此大规模的运作，仅靠热情是不足的。Keeley描述了一个包含七个工作组（涵盖从发布到API等各个方面）的治理模式，将责任分散给不同的维护者。来自Slack和Microsoft的付费贡献者是项目的核心支柱，但志愿者也至关重要。Electron依赖他们的打包、安装程序和生态系统工具方面的专业知识。项目尽可能雇佣志愿者，并在无法雇佣时提供资金、差旅和资源支持，确保所有贡献者都受到重视。这种企业支持与志愿者活力的平衡是Electron持续繁荣的原因。\n\n## 维持维护者的系统\n\nKeeley强调，其他维护者应从Electron学到的一点是：**自动化繁琐的工作**。\n*   **问题模板**：自动请求缺失的详细信息。\n*   **标签和预设回复**：加速问题分类和处理。\n*   **操作手册（Runbooks）**：标准化导师支持新贡献者的方式。\n\n自动化能让维护者从琐碎事务中解脱出来，专注于调试、指导和构建等更具挑战性的人力工作。\n\n## AI、垃圾信息与未来的挑战\n\nKeeley指出，AI生成垃圾提案是日益增长的问题，尤其是在Google Summer of Code等项目中。她提到，今年收到的提案数量翻倍，其中很大一部分是AI生成的“噪音”，这让那些认真思考的贡献者感到沮丧。然而，她也看到了AI的潜力，例如帮助非英语母语者更清晰地沟通，以及辅助代码探索。挑战在于创建过滤器和教育机会，以区分有效信息和噪音，而非简单地禁止AI。批判性思维、创造力和韧性等人类技能在AI时代变得前所未有地重要。\n\n## Electron带给我们的开源启示\n\nElectron在文化建设方面的刻意性给作者留下了深刻印象。从问题分类系统到治理小组，从尽可能雇佣维护者到赞助志愿者贡献，一切都旨在保持社区的欢迎度和可持续性。\n\nElectron的经验表明，成功的开源项目不仅仅是交付代码，更是构建能够让贡献者感到有价值的系统和文化。\n\n## 从Electron的经验中可以借鉴什么\n\n*   **设置问题模板**：包含自动回复以请求缺失的详细信息。\n*   **创建操作手册（Runbooks）**：用于常见交互（Electron使用Notion）。\n*   **建立工作组**：分散所有权和责任。\n*   **定期举行问题分类会议**：Electron的发布组每周开会。\n*   **集中沟通**：将所有GSoC邮件路由到一个Slack频道。\n*   **刻意营造文化**：明确如何对待贡献者。\n\n## 展望未来\n\nElectron不仅为我们日常使用的应用程序提供动力，它还在一个面临前所未有压力的世界中（如垃圾信息、规模化和源源不断的贡献）树立了可持续开源的典范。Keeley从“新手”到核心维护者的旅程并非因为她天赋异禀，而是因为Electron构建了实现这一目标的途径。作者总结道：开源的健康状况不应以代码行数或星标数量来衡量，而应以我们支持项目背后人员的程度来衡量。\n\n---\n**关于作者：**\n![Abigail Cabunoc Mayes](https://avatars.githubusercontent.com/u/617994?v=4&s=200)\nAbigail Cabunoc Mayes 在 GitHub 工作，致力于帮助开源生态系统现在和未来蓬勃发展。\n\n**相关文章：**\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) Docs：掌握 GitHub 所需的一切，尽在一个地方。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) GitHub：在 GitHub 上构建未来，这里是任何地方的任何人都可以构建任何东西的地方。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) 客户案例：了解使用 GitHub 进行构建的公司和工程团队。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) GitHub Universe 2025：最后机会：节省 700 美元购买 Universe 现场通行证，并于 10 月 28-29 日在旧金山与我们见面。",
      "shortSummary": "Keeley Hammond在访谈中分享了Electron项目在跨平台桌面应用开发、开源维护及未来挑战方面的经验。她澄清了Electron应用性能的误解，强调其对安全和性能的重视。项目通过多工作组治理、企业与志愿者协作实现可持续发展，并倡导自动化繁琐工作以聚焦核心任务。面对AI生成垃圾信息等新挑战，Electron强调批判性思维和文化建设的重要性。文章总结，开源项目的成功在于构建支持贡献者的系统和文化。",
      "translated_title": "超越浏览器构建：Keeley Hammond谈Electron、开源和维护的未来",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/617994?v=4&s=200",
          "alt": "Abigail Cabunoc Mayes",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn what it really takes to sustain one of the web’s most widely used frameworks on this episode of the GitHub Podcast.</p>\n<p>The post <a href=\"https://github.blog/open-source/maintainers/building-beyond-the-browser-keeley-hammond-on-electron-open-source-and-the-future-of-maintainership/\">Building beyond the browser: Keeley Hammond on Electron, open source, and the future of maintainership</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "GitHub Copilot 代码查找更智能：揭秘我们的新嵌入模型 (原标题: GitHub Copilot gets smarter at finding your code: Inside our new embedding model )",
      "link": "https://github.blog/news-insights/product-news/copilot-new-embedding-model-vs-code/",
      "pubDate": "Wed, 24 Sep 2025 20:24:18 +0000",
      "isoDate": "2025-09-24T20:24:18.000Z",
      "creator": "Shengyu Fu",
      "summary": "GitHub Copilot 推出新的嵌入模型，显著提升 VS Code 中代码搜索的速度、内存效率和准确性。新模型旨在检索开发者真正需要的代码片段，而非“近似匹配”，带来了检索质量提升 37.6%，吞吐量提高约 2 倍，索引大小缩小 8 倍，从而使 GitHub Copilot 聊天和智能体响应更准确，结果返回更快，VS Code 内存使用更低。\n\n### 重要性\n优秀的 AI 编码体验依赖于准确找到相关上下文（代码片段、函数、测试、文档、代码中的错误）。“查找”步骤由嵌入（将语义相关的代码和自然语言内容表示为向量）驱动，即使词语不完全匹配，嵌入也能实现相关内容的检索。更好的嵌入模型直接带来更好的检索质量和更优的 GitHub Copilot 体验。\n\n### 已发布内容\nGitHub 训练并部署了一个专为代码和文档定制的新嵌入模型。该模型现在为 GitHub Copilot 聊天、智能体模式、编辑模式和提问模式提供上下文检索支持。\n\n### 影响与提升\n*   **检索质量显著提升：**\n    *   在多基准评估中，相对提升了 37.6%（平均得分从 0.362 提高到 0.498）。\n    *   对于 VS Code 中的 C# 开发者，代码接受率提升了 110.7%。\n    *   对于 Java 开发者，代码接受率提升了 113.1%。\n    *   ![模型在多个代码检索基准上的得分比较](https://github.blog/wp-content/uploads/2025/09/All_1200x630-1.png?resize=1024%2C538)\n        *图 1：模型在多个代码检索基准上的得分比较*\n*   **效率更高：**\n    *   嵌入吞吐量提高约 2 倍，减少了检索延迟。\n    *   索引内存大小缩小约 8 倍，改善了客户端和服务器端的扩展性。\n    *   ![显示 P50 延迟降低和内存占用减少的条形图](https://github.blog/wp-content/uploads/2025/09/All_1200x630.png?resize=1024%2C538)\n        *图 2：模型效率比较*\n\n### 检索质量示例\n新模型能更好地响应提示和指令，并区分高度相关和仅部分相关的搜索结果。例如，对于提示“在项目中通过名称查找单个命名空间时调用哪个方法？”，新模型能准确检索到包含 `findOne` 函数的代码片段，而旧模型则可能检索到语义相似但不正确的 `find` 函数。\n\n### 其他受益场景\n*   在大型单体仓库中搜索测试函数。\n*   查找分散在多个文件中的辅助方法。\n*   调试代码，例如“显示此错误字符串在哪里处理”。\n\n### 训练方法\n训练目标是在预算范围内优化真实开发者工作负载的检索质量，同时控制延迟和内存。核心技术是使用 InfoNCE 损失的对比学习和 Matryoshka 表示学习，这有助于嵌入模型区分几乎相同的代码片段，并支持多种嵌入大小以提高灵活性。\n\n**关键要素：** 使用“硬负例”进行训练。这些“硬负例”是看起来正确但实际上不正确的代码示例。通过教会模型区分“几乎正确”和“真正正确”，实现了最大的质量提升。硬负例从大型、多样化的语料库（公共 GitHub 和微软/GitHub 内部仓库）中挖掘，并使用大型语言模型 (LLM) 发现棘手的近似匹配，从而减少捷径学习并提高泛化能力。\n\n**硬负例训练示例：**\n对于查询“停用词表是如何填充的？”，最相关的代码示例是加载停用词表的函数。而加载单词到表或从文件读取停用词的函数则被用作不回答查询的硬负例。\n![一个示例展示了如何使用硬负例来训练嵌入模型](https://github.blog/wp-content/uploads/2025/09/Negative_1200x630_0ee98b.png?resize=1024%2C538)\n\n**训练数据编程语言分布：**\n*   Python：36.7%\n*   Java：19.0%\n*   C++：13.8%\n*   JavaScript/TypeScript：8.9%\n*   C#：4.6%\n*   其他语言：17.0%\n\n### 评估套件\n采用多基准评估，而非单一测试，以覆盖代码检索的不同方面，包括：\n*   **自然语言 (NL) 到代码：** 用相关函数/片段响应自然语言查询。\n*   **代码到 NL：** 代码的自然语言摘要。\n*   **代码到代码：** 相似函数搜索（重构或翻译的代码）。\n*   **问题到代码：** 将问题描述转化为建议的代码修复。\n\n### 未来展望\n新 Copilot 嵌入模型是使 AI 编码助手更智能、更可靠的一步。未来计划包括：\n*   将训练和评估数据扩展到更多语言和仓库。\n*   完善硬负例挖掘流程以获得更高质量。\n*   利用效率提升部署更大、更准确的模型。",
      "shortSummary": "GitHub Copilot 推出新的嵌入模型，显著提升了 VS Code 中代码搜索的准确性、速度和内存效率。新模型使检索质量提升 37.6%，吞吐量提高约 2 倍，索引大小缩小 8 倍。通过使用对比学习和“硬负例”训练，模型能更准确地区分高度相关和近似相关的代码，从而提供更精准的 Copilot 聊天和智能体响应。未来将扩展训练数据并部署更大型模型，进一步增强 AI 编码助手的智能性和可靠性。",
      "translated_title": "GitHub Copilot 代码查找更智能：揭秘我们的新嵌入模型",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/All_1200x630-1.png?resize=1024%2C538",
          "alt": "A bar graph showing improved code retrieval, agentic code retrieval, and chat retrieval scores.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/All_1200x630.png?resize=1024%2C538",
          "alt": "A bar graph showing decreased P50 latency and decreased memory footprint (bits).",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/Negative_1200x630_0ee98b.png?resize=1024%2C538",
          "alt": "An example showing how hard negatives are used for training the embedding model.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://avatars.githubusercontent.com/u/23369389?v=4&s=200",
          "alt": "Shengyu Fu",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn about a new Copilot embedding model that makes code search in VS Code faster, lighter on memory, and far more accurate.</p>\n<p>The post <a href=\"https://github.blog/news-insights/product-news/copilot-new-embedding-model-vs-code/\">GitHub Copilot gets smarter at finding your code: Inside our new embedding model </a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "利用人工智能为联合国难民署的难民绘制希望地图 (原标题: Using AI to map hope for refugees with UNHCR, the UN Refugee Agency)",
      "link": "https://github.blog/open-source/social-impact/using-ai-to-map-hope-for-refugees-with-unhcr-the-un-refugee-agency/",
      "pubDate": "Wed, 24 Sep 2025 16:12:47 +0000",
      "isoDate": "2025-09-24T16:12:47.000Z",
      "creator": "Sidney Espinosa",
      "summary": "### 引言：难民营规划的挑战\n\n难民营是复杂且动态的生态系统，通常迅速建立并有机发展以满足紧急需求。随着这些定居点的增长，联合国难民署（UNHCR）等国际人道主义援助组织在提供最基本的基础设施和服务方面面临巨大挑战。在长期危机中，当难民营成为长期庇护所时（例如肯尼亚的Kalobeyei定居点，收容了来自20多个国家的30多万难民），创建类似城市的功能性区域似乎是一项难以逾越的任务。任何人口密集区域的核心都是空间数据：关于学校、医院、住宅和道路的地图、网格和可靠的位置信息。然而，在许多难民营中，此类数据根本不存在，没有正式的街道名称，没有统一的地址，也无法清晰地追踪基本资源的位置。缺乏这一基础，城市规划就变成了猜测。\n\n### 解决方案：AI与开源技术的结合\n\n面对这一难题，联合国难民署及其他支持流离失所者的人道主义组织提出了一个大胆的假设：人工智能和开源技术不仅能提供技术工具，还能提供应对看似不可能的挑战所需的协作框架和全球社区。GitHub作为开放协作的平台，成为了连接本地知识与全球问题解决者网络的枢纽。\n\n### 数据收集与AI应用\n\n*   **从无人机到数据**：\n    *   项目始于最了解Kakuma的人：难民和当地居民。在人道主义开放街道地图团队（HOT）的培训下，他们使用无人机对定居点进行了航拍，捕获了数千张图像。\n    *   随后，他们手动标注了部分图像，标记出房屋、太阳能板、诊所、卫生设施等，建立了“地面实况”数据。\n    *   微软“AI for Good Lab”利用这些“地面实况”数据训练机器学习模型，以识别营地其他区域的相似特征。\n    *   这项技术将原本需要数年手动测绘的工作，缩短到极短的时间内完成。\n\n### 代码转化为协作：GitHub的作用\n\n*   **开放共享**：项目的突破不仅在于数据收集方式，更在于其共享方式。所有数据集、模型和代码都在GitHub上公开。\n*   **可复用性**：这意味着为Kakuma构建的工具可以被改编用于其他难民营、灾后恢复区或快速发展的城市。\n*   **效率提升**：GitHub Copilot帮助简化了流程，节省了大量格式化和清理时间，确保最终的存储库清晰且易于任何人使用。\n*   **协作中心**：GitHub不仅仅是一个发布平台，它还是一个将开发者、数据科学家和公民技术专家与联合国难民署使命连接起来的枢纽。通过开放源代码，其他人可以在此项目基础上进行开发、改进或应用于新的情境。\n*   **未来展望**：正如一位项目负责人所解释：“GitHub是这个项目下一阶段的开始。将开发者与这类问题联系起来是我们的使命。”\n\n### 共同构建希望\n\n*   **协作核心**：这个项目的核心是协作。难民提供了数据，HOT提供了培训和支持，科学家和开发者确保了工具的可复用性和可共享性。他们共同创建了一个蓝图，可以指导Kakuma以及世界各地社区的可持续规划。\n*   **UNHCR的愿景**：对于联合国难民署而言，该项目旨在创建知识和工具，以尊严和远见支持数百万流离失所者。\n*   **开放知识**：得益于GitHub，这些知识不再局限于一处，而是开放共享，让任何地方的任何人都能利用它，不仅绘制地图，更构建希望。\n\n### 相关链接\n\n*   Docs: ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg)\n*   GitHub: ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg)\n*   Customer stories: ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg)\n*   GitHub Universe 2025: ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg)",
      "shortSummary": "联合国难民署（UNHCR）利用人工智能和开源技术（GitHub）解决难民营缺乏空间数据导致规划困难的问题。项目通过培训难民使用无人机收集数据，并由AI模型处理，将测绘时间大幅缩短。所有数据和代码在GitHub上公开共享，促进全球协作，使工具可应用于其他危机区域。GitHub成为连接开发者与UNHCR使命的枢纽，为Kakuma及全球社区的可持续规划提供了蓝图，旨在以尊严和远见支持流离失所者，并开放知识以构建希望。",
      "translated_title": "利用人工智能为联合国难民署的难民绘制希望地图",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 4
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>With the help of GitHub, UNHCR turned drone imagery into maps — helping refugees in Kakuma and Kalobeyei build sustainable, powered communities.</p>\n<p>The post <a href=\"https://github.blog/open-source/social-impact/using-ai-to-map-hope-for-refugees-with-unhcr-the-un-refugee-agency/\">Using AI to map hope for refugees with UNHCR, the UN Refugee Agency</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "使用 GitHub Copilot 代理模式现代化 Java 项目的分步指南 (原标题: A step-by-step guide to modernizing Java projects with GitHub Copilot agent mode)",
      "link": "https://github.blog/ai-and-ml/github-copilot/a-step-by-step-guide-to-modernizing-java-projects-with-github-copilot-agent-mode/",
      "pubDate": "Tue, 23 Sep 2025 13:00:00 +0000",
      "isoDate": "2025-09-23T13:00:00.000Z",
      "creator": "Andrea Griffiths",
      "summary": "# 使用 GitHub Copilot 代理模式现代化 Java 项目的分步指南\n\n现代化遗留应用程序，如将 Java 应用迁移到云端或更新 Java 运行时，通常面临依赖冲突、过时部署目标和安全漏洞等挑战。GitHub Copilot 代理模式结合 GitHub Copilot 应用现代化 VS Code 扩展，提供了一个交互式、分步式的体验，旨在更快、更准确地升级和迁移 Java 项目。该工具集也支持 .NET 应用的现代化，包括 AI 辅助升级、云就绪迁移路径和无缝部署到 Azure。\n\n## 核心功能\n\n通过 Visual Studio Code 中的这些工具，用户可以：\n*   分析 Java 项目并生成升级计划。\n*   使用 GitHub Copilot 自动应用更改。\n*   在循环中修复构建问题并验证测试。\n*   在升级后检测并修复 CVE（常见漏洞和暴露）。\n\n## 先决条件\n\n要遵循本指南，您需要：\n*   Visual Studio Code\n*   GitHub Copilot 许可证（Pro、Pro+、Business 和 Enterprise 订阅者可访问 Copilot 编码代理）\n*   GitHub Copilot 应用现代化 – Java 升级扩展\n*   一个基于 Git 的遗留 Java 项目，使用 Maven 或 Gradle 构建（JDK 8 或更高版本均可）\n\n## 现代化流程概览\n\n当使用 Java 升级扩展启动代理会话时，Copilot 会执行以下操作：\n*   分析 Java 代码库。\n*   生成可自定义的升级计划。\n*   使用 OpenRewrite 等工具执行代码转换。\n*   迭代修复构建错误。\n*   通过测试执行验证更改。\n*   扫描 CVE，提供代码验证行为并提出安全的替代方案。\n*   提供完整的摘要报告。\n\n## 分步指南\n\n### 步骤 1：在 VS Code 中打开 Java 项目\n\n使用一个示例遗留 Java 项目（或您自己的项目），确保已使用 Git 初始化源代码控制并拥有一个可工作的测试套件（最好包含单元测试）。\n\n```bash\ngit clone https://github.com/your-org/your-legacy-java-app.git\ncd your-legacy-java-app\ncode .\n```\n\n### 步骤 2：启动代理会话\n\n启动 GitHub Copilot 聊天侧边栏，并开始一个新的代理会话。从可用工具中选择“GitHub Copilot app modernization – upgrade for Java”。\n\n![Visual Studio Code 窗口显示一个名为“spring-webflow”的 Java 项目。文件浏览器在左侧打开，显示项目文件，包括 build.gradle、settings.gradle 和 README.md。主编辑器显示 README.md 文件，其中包含描述 Spring Web Flow 的文本。顶部可见一个 Copilot 代理模式工具选择下拉菜单，其中包含升级 Java 项目的选项。右侧边栏打开了 Copilot 代理模式面板，解释了 Copilot 如何编辑文件、运行命令和处理上下文。](https://github.blog/wp-content/uploads/2025/09/1.png?resize=1024%2C621)\n\n在代理会话中复制并粘贴以下内容以开始：\n`Using Java upgrade tools,upgrade this project to Java 21. Analyze deprecated APIs, update Gradle dependencies, and propose a safe, testable migration plan.`\n\n### 步骤 3：Copilot 扫描并规划\n\nCopilot 将分析您的项目并提出升级计划。该工具首先扫描您的：\n*   JDK 版本使用情况\n*   构建工具配置（Gradle 的 build.gradle 或 Maven 的 pom.xml）\n*   过时或不安全的依赖项\n*   已弃用的 API 和语言特性\n\n然后，它会创建一个结构化的升级计划，可在 Copilot 聊天中进行编辑。您可以提示 Copilot 从升级中排除模块或对计划进行任何必要的调整。\n\n![Visual Studio Code 窗口显示 Java 项目升级计划。在主编辑器中，plan.md 文件打开，包含项目信息、Java 环境、升级目标和附加任务部分。它指定使用 Gradle Wrapper 从 Java 17 升级到 Java 21。在右侧的 Copilot 代理模式面板上，显示 JSON 输入和输出，表明已使用自动生成的迁移计划创建了一个新的升级会话。左侧的文件浏览器列出了项目文件，包括 build.gradle、progress.md 和其他配置文件。](https://github.blog/wp-content/uploads/2025/09/2.png?resize=1024%2C640)\n\n### 步骤 4：应用更改并解决错误\n\n一旦您批准计划，Copilot 便会开始升级文件、调整导入并修复语法错误。如果出现构建错误，Copilot 会进入修复-测试循环，直到项目干净地编译。\n\n![Visual Studio Code 窗口显示 Java 项目升级的日志文件 3.1.upgradeProjectUsingOpenRewrite.log。日志详细说明了升级到 Java 21 的任务，包括收集和应用 OpenRewrite 配方、运行 Gradle 构建以及报告许多任务为 UP-TO-DATE。右侧的 Copilot 代理模式面板显示了升级会话的输入和输出，以及执行计划的说明和注意事项。左侧的文件浏览器列出了 Java 项目文件，包括日志、Gradle 文件和源文件夹。](https://github.blog/wp-content/uploads/2025/09/3.png?resize=1024%2C642)\n\nCopilot 会生成一份详细的升级报告，包括：\n*   更改的文件和提交历史。\n*   API 和依赖项更新。\n*   剩余待办事项和后续步骤。\n\n![Visual Studio Code 窗口显示将 Java 项目升级到版本 21 的摘要报告 summary.md。报告包括项目信息、目标、测试更改（显示升级前后所有 1177 个测试均通过），以及依赖项更改（Java 从 17 升级到 21）。在右侧边栏，Copilot 代理模式显示了迁移的好处、标记为“低”的风险评估，以及生产的后续步骤，例如更新环境、CI/CD 管道、文档和监控。左侧的文件浏览器显示了项目文件，包括 plan.md、progress.md 和 Gradle 配置文件。](https://github.blog/wp-content/uploads/2025/09/4.png?resize=1024%2C623)\n\n例如，升级前后的代码更改：\n\n```java\n// Before (deprecated constructor)\nView view = this.resolver.resolveViewName(\"intro\", new Locale(\"EN\"));\n// After Java 21 upgrade\nView view = this.resolver.resolveViewName(\"intro\", Locale.of(\"EN\"));\n```\n\n### 5. 迁移到 Azure\n\n为了使应用程序适应 Azure，您可以运行应用程序评估以识别云就绪问题。在 GitHub Copilot 应用现代化扩展 UI 中，点击“Migrate to Azure”。\n\n![Visual Studio Code 侧边栏显示 GitHub Copilot 应用现代化面板。在“快速入门”下，它询问如何现代化 Java 应用，并有两个蓝色按钮：“升级运行时和框架”和“迁移到 Azure”。下方消息建议使用 Claude Sonnet 3.7 或更高版本。下方，“评估”部分链接到“评估报告”。](https://github.blog/wp-content/uploads/2025/09/5.png?resize=756%2C966)\n\n根据部署目标，GitHub Copilot 应用现代化将识别云迁移问题并提供建议操作。要设置部署目标，请修改 `appmod-java/appcat` 文件夹下的 `assessment-config.yaml` 文件。例如，选择 Azure Kubernetes Service (AKS) 作为目标。\n\n![Visual Studio Code 编辑器显示一个名为 assessment-config.yaml 的 YAML 配置文件。该文件定义了 appcat，其目标设置为 azure-aks，模式设置为 source-only。](https://github.blog/wp-content/uploads/2025/09/6.png?resize=942%2C300)\n\n生成评估报告，详细说明云就绪问题。点击与“Auth Migration”问题类别相关的“Migrate”按钮，将本地用户身份验证迁移到 Microsoft Entra ID。\n\n![云就绪报告面板显示“Auth Migration (Spring Security)”下的一个问题。严重性标记为“潜在 (1)”，代码影响为 2，解决方案建议将本地用户身份验证迁移到 Microsoft Entra ID。在“操作”列中出现一个蓝色的“迁移”按钮。](https://github.blog/wp-content/uploads/2025/09/7.png?resize=1024%2C99)\n\n与升级过程类似，Copilot 首先制定一个计划，突出显示依赖项更新和配置更改。一旦您批准计划，Copilot 将执行迁移步骤。\n\n![Visual Studio Code 编辑器显示 code-migration 下的 plan.md 文件。该文件包含 Spring WebFlow 项目与 Spring Security 集成的分析摘要。它指出使用了 Spring Security BOM 6.0.8、框架性质、SecurityFlowExecutionListener 组件、Java 21 和 Spring Framework 6.0.23。 “要修改的文件”部分突出显示了 build.gradle 中的依赖项更新，需要 Microsoft Entra ID 依赖项。更改包括添加 spring-cloud-azure-starter-active-directory、spring-boot-starter-oauth2-client，并更新 Spring Cloud Azure 依赖项的 BOM。](https://github.blog/wp-content/uploads/2025/09/8.png?resize=1024%2C527)\n\nCopilot 总结了此迁移场景所做的更改列表，包括：\n*   在构建配置中添加了 Microsoft Entra ID 依赖项。\n*   在 `Application.properties` 中添加了 Microsoft Entra ID 配置。\n*   为 Spring Security 添加了配置适配器以启用 Microsoft Entra ID。\n*   添加了文档以解释如何使用 Spring WebFlow 应用实现 Microsoft Entra ID 身份验证。\n\n![Visual Studio Code 编辑器显示名为“迁移摘要：本地用户身份验证到 Microsoft Entra ID”的 summary.md 文件。概述列出了项目详细信息、迁移场景、会话 ID、日期（2025 年 9 月 10 日）和状态“成功完成”。摘要描述了依赖项更新、文档创建和 Spring WebFlow 的框架增强。右侧面板显示了已创建/修改的文件（build.gradle、entra-id-integration.adoc、SampleEntraIdSecurityConfig.java 和 application.properties）以及验证结果，确认没有漏洞、构建成功且所有测试均通过。](https://github.blog/wp-content/uploads/2025/09/9.png?resize=1024%2C413)\n\n### 6. 验证更改并审查报告\n\n代码更新后，需要确认一切按预期工作。Copilot 将指导您使用项目的构建系统运行测试套件。对于 Maven 项目，您可以手动运行测试：\n\n```bash\n./mvnw test\n```\n\n对于 Gradle 项目：\n\n```bash\n./gradlew test\n```\n\n如果出现故障，Copilot 将帮助调试甚至根据您最近的更改编写缺失的测试。所有这些都遵循“人机协作”原则，即所有提议的步骤都需要人工确认。\n\n#### 自动化 CVE 扫描器\n\nGitHub Copilot 应用现代化会自动对所有已更改的依赖项执行全面的 CVE 扫描，这是开发团队一直要求的关键安全功能。当检测到漏洞时，代理会智能地提出安全的版本替换或推荐替代库以保持安全合规性。\n\n![验证报告面板，标题为“迭代 1 – 阶段 1：CVE 验证”。它列出了新添加的依赖项 spring-cloud-azure-starter-active-directory:5.22.0 和 spring-boot-starter-oauth2-client:3.3.5。输出确认“未发现这些依赖项的已知 CVE”。底部注释说明阶段 1 成功完成，无需更改。](https://github.blog/wp-content/uploads/2025/09/10.png?resize=1024%2C995)\n\n## 部署到 Azure\n\n将应用程序部署到 Azure 可能是一个漫长而艰巨的过程，需要一套特定的技能来编写基础设施即代码。GitHub Copilot 简化了这一步骤，并自动化了到 Azure 的部署，让您可以更快地从代码到云。\n\n![Visual Studio Code 侧边栏显示 GitHub Copilot Java 应用现代化面板。在“任务”下，包括升级任务、迁移任务、质量与安全任务、部署任务和我的任务。部署任务部分已展开，显示了部署到现有 Azure 基础设施或预置基础设施并部署到 Azure 的选项。](https://github.blog/wp-content/uploads/2025/09/11.png?resize=325%2C459)\n\n![部署摘要面板显示 Azure 部署的关键亮点。它列出了：6 个 Azure 资源已预置，一个正在运行的带有容器应用 URL 的实时应用程序，总部署时间为 4 分 58 秒，已启用自动伸缩（1-10 个副本），通过 Application Insights 和 Log Analytics 进行全面监控，以及使用托管身份进行安全部署。底部注释解释说此记录可作为未来参考和理解资源关系的文档。](https://github.blog/wp-content/uploads/2025/09/12.png?resize=475%2C442)\n\n## 总结\n\n借助 GitHub Copilot 应用现代化，您可以将遗留 Java 项目转变为云就绪应用。它能够修复 Java 升级和迁移场景中的代码，解决构建问题，验证更改，甚至帮助加强测试覆盖率——所有这些都在一个统一的、引导式工作流中完成。Copilot 代理模式及其增强扩展可以帮助分析大型代码库、规划升级或迁移、自动修复问题，并节省大量手动调试时间。",
      "shortSummary": "GitHub Copilot 代理模式结合 VS Code 扩展，提供了一种现代化 Java 项目的分步指南。它能自动分析代码、生成升级计划、修复构建错误、验证测试、扫描 CVE，并简化到 Azure 的迁移和部署。该工具显著减少了手动工作，加速了遗留 Java 应用的升级和云就绪过程，同时确保了代码质量和安全性。",
      "translated_title": "使用 GitHub Copilot 代理模式现代化 Java 项目的分步指南",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/1.png?resize=1024%2C621",
          "alt": "A Visual Studio Code window showing a Java project called ‘spring-webflow’. The file explorer is open on the left, displaying project files including build.gradle, settings.gradle, and a README.md. The main editor shows the README.md file with text describing Spring Web Flow. At the top, a Copilot agent mode tool selection dropdown is visible with options for upgrading Java projects. On the right sidebar, the Copilot Agent Mode panel is open, explaining how Copilot can edit files, run commands, and handle context.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/2.png?resize=1024%2C640",
          "alt": "Visual Studio Code window showing a Java project upgrade plan. In the main editor, the file plan.md is open with sections for Project Information, Java Environments, Upgrade Goals, and Additional Tasks. It specifies upgrading from Java 17 to Java 21 using Gradle Wrapper. On the right-hand Copilot Agent Mode panel, JSON input and output are displayed, showing that a new upgrade session was created with an auto-generated migration plan. The file explorer on the left lists project files including build.gradle, progress.md, and other configuration files.",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/3.png?resize=1024%2C642",
          "alt": "Visual Studio Code window showing a log file 3.1.upgradeProjectUsingOpenRewrite.log from a Java project upgrade. The log details tasks for upgrading to Java 21, including collecting and applying OpenRewrite recipes, running Gradle builds, and reporting many tasks as UP-TO-DATE. On the right, the Copilot Agent Mode panel displays input and output for the upgrade session, with instructions and notes about executing the plan. The file explorer on the left lists Java project files, including logs, Gradle files, and source folders.",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/4.png?resize=1024%2C623",
          "alt": "Visual Studio Code window showing a summary report summary.md for upgrading a Java project to version 21. The report includes project information, goals, test changes showing all 1177 tests passing before and after, and dependency changes with Java upgraded from 17 to 21. On the right sidebar, Copilot Agent Mode displays migration benefits, a risk assessment marked LOW, and next steps for production such as updating environments, CI/CD pipelines, documentation, and monitoring. The file explorer on the left shows project files including plan.md, progress.md, and Gradle configuration files.",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/5.png?resize=756%2C966",
          "alt": "Visual Studio Code sidebar showing the GitHub Copilot App Modernization panel. Under ‘Quickstart’, it asks how to modernize a Java app, with two blue buttons: ‘Upgrade Runtime & Frameworks’ and ‘Migrate to Azure’. A message below recommends using Claude Sonnet 3.7 or later. Below, an ‘Assessment’ section links to an ‘Assessment Report.",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/6.png?resize=942%2C300",
          "alt": "Visual Studio Code editor showing a YAML configuration file named assessment-config.yaml. The file defines appcat with a target set to azure-aks and mode set to source-only.",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/7.png?resize=1024%2C99",
          "alt": "Cloud Readiness report panel showing an issue under ‘Auth Migration (Spring Security)’. Criticality is marked as ‘Potential (1)’, code impact is 2, and the solution suggests migrating from on-premises user authentication to Microsoft Entra ID. A blue ‘Migrate’ button appears in the Action column.",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/8.png?resize=1024%2C527",
          "alt": "Visual Studio Code editor showing a plan.md file under code-migration. The file contains an analysis summary for a Spring WebFlow project with Spring Security integration. It notes use of Spring Security BOM 6.0.8, framework nature, SecurityFlowExecutionListener component, Java 21, and Spring Framework 6.0.23. The ‘Files to be Modified’ section highlights dependency updates in build.gradle, requiring Microsoft Entra ID dependencies. Changes include adding spring-cloud-azure-starter-active-directory, spring-boot-starter-oauth2-client, and updating the BOM for Spring Cloud Azure dependencies.",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Learn how to use GitHub Copilot agent mode to modernize legacy Java projects with guided upgrades, automated fixes, and cloud-ready migrations.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/a-step-by-step-guide-to-modernizing-java-projects-with-github-copilot-agent-mode/\">A step-by-step guide to modernizing Java projects with GitHub Copilot agent mode</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "我们为更安全的npm供应链制定的计划 (原标题: Our plan for a more secure npm supply chain)",
      "link": "https://github.blog/security/supply-chain-security/our-plan-for-a-more-secure-npm-supply-chain/",
      "pubDate": "Tue, 23 Sep 2025 00:29:50 +0000",
      "isoDate": "2025-09-23T00:29:50.000Z",
      "creator": "Xavier René-Corail",
      "summary": "## npm供应链安全强化计划\n\n开源软件是现代软件产业的基石，其协作性质和庞大生态系统推动了前所未有的效率和进步。然而，这种规模也带来了独特的漏洞，持续受到恶意攻击者的威胁，使开源安全成为一个关键问题。GitHub分享了近期npm注册表事件的详细信息、采取的补救措施以及未来对npm安全的持续投入。\n\n### 近期开源生态系统攻击\n\n软件行业近期面临包注册表（包括npm）上账户劫持事件的激增。恶意行为者通过未经授权访问维护者账户，通过知名且受信任的包分发恶意软件。\n\n*   **Shai-Hulud攻击**：2025年9月14日，GitHub收到Shai-Hulud攻击的通知。这是一种自复制蠕虫，通过受损的维护者账户，将恶意安装后脚本注入流行的JavaScript包中，从而渗透npm生态系统。该蠕虫结合了自复制能力和窃取多种秘密（不仅仅是npm令牌）的能力，若非GitHub和开源维护者及时采取行动，可能会导致无休止的攻击。\n\n### GitHub的即时响应\n\n为应对此次事件，GitHub迅速采取了果断行动，包括：\n\n*   立即从npm注册表中移除500多个受损包，以防止恶意软件进一步传播。\n*   npm阻止上传包含恶意软件IoC（妥协指标）的新包，切断了自复制模式。\n\n这些安全漏洞侵蚀了对开源生态系统的信任，对整个软件供应链的完整性和安全性构成直接威胁。它们也凸显了提高认证和安全发布实践标准对于强化npm生态系统以应对未来攻击的重要性。\n\n### npm强化包发布路线图\n\nGitHub致力于调查这些威胁并减轻其对开源社区构成的风险。为解决令牌滥用和自复制恶意软件问题，我们将在不久的将来更改认证和发布选项，仅包括：\n\n*   **强制两步验证（2FA）的本地发布。**\n*   **有效期为七天的细粒度令牌。**\n*   **可信发布。**\n\n为支持这些变更并进一步提高npm生态系统的安全性，我们将：\n\n*   弃用传统经典令牌。\n*   弃用基于时间的一次性密码（TOTP）2FA，将用户迁移到基于FIDO的2FA。\n*   限制具有发布权限的细粒度令牌的较短有效期。\n*   默认设置发布访问权限为不允许令牌，鼓励使用可信发布或强制2FA的本地发布。\n*   移除本地包发布绕过2FA的选项。\n*   扩展可信发布的合格提供商。\n\n我们认识到一些安全变更可能需要更新现有工作流程。我们将逐步推出这些变更，以尽量减少干扰，同时加强npm的安全态势。GitHub将通过清晰的时间表、文档、迁移指南和支持渠道提供未来更新，以支持用户完成此次过渡。\n\n### 通过可信发布强化生态系统\n\n可信发布是OpenSSF软件仓库安全工作组推荐的安全能力，因为它消除了在构建系统中安全管理API令牌的需求。它由PyPI于2023年4月率先推出，旨在将API令牌从构建管道中移除。此后，可信发布已添加到RubyGems（2023年12月）、crates.io（2025年7月）、npm（同样是2025年7月）以及最近的NuGet（2025年9月）和其他包仓库中。\n\n尽管npm在发布对可信发布的支持时，原意是让这项新功能自然增长，但攻击者表明他们不会等待。我们强烈鼓励所有支持的包管理器项目尽快采用可信发布。\n\n### npm维护者可立即采取的行动\n\nGitHub和更广泛的软件社区的这些努力，强调了我们全球范围内加强软件供应链安全的承诺。生态系统的安全是共同的责任，我们感谢开源社区的警惕和协作。以下是npm维护者现在可以采取的行动：\n\n*   使用npm可信发布而非令牌。\n*   强化账户、组织和包的发布设置，要求所有写入和发布操作都进行2FA。\n*   配置两步验证时，使用WebAuthn而非TOTP。\n\n真正的韧性需要软件行业中每个人的积极参与和警惕。通过采用强大的安全实践、利用可用工具并为这些集体努力做出贡献，我们可以共同为所有人构建一个更安全、更值得信赖的开源生态系统。\n\n由以下人员撰写：\n![Xavier René-Corail](https://avatars.githubusercontent.com/u/7395402?v=4&s=200)\nXavier René-Corail，GitHub安全研究高级总监，开源安全负责人。他领导GitHub安全实验室，赋能开源维护者和开发者交付安全软件。\n\n### 相关文章\n\n*   **保护VS Code免受提示注入攻击**：当聊天对话被间接提示注入污染时，可能导致GitHub令牌、机密文件泄露，甚至在用户未明确同意的情况下执行任意代码。本文解释了哪些VS Code功能可以降低这些风险。\n\n### 探索更多来自GitHub的内容\n\n*   ![Docs](https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg) **文档**：掌握GitHub所需的一切，尽在一处。前往文档。\n*   ![GitHub](https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg) **GitHub**：在GitHub上构建未来，这里是任何人、任何地方构建任何东西的平台。开始构建。\n*   ![Customer stories](https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg) **客户案例**：了解使用GitHub进行构建的公司和工程团队。了解更多。\n*   ![GitHub Universe 2025](https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg) **GitHub Universe 2025**：最后机会：节省700美元购买Universe现场通行证，于10月28-29日在旧金山与我们相聚。立即注册。",
      "shortSummary": "GitHub发布了强化npm供应链安全的计划，以应对近期账户劫持和恶意软件攻击（如Shai-Hulud蠕虫）。为提升安全性，npm将强制要求2FA本地发布、引入有效期为7天的细粒度令牌，并推广可信发布。未来将弃用传统令牌和TOTP 2FA，转而采用FIDO-based 2FA。GitHub鼓励维护者立即采用可信发布和WebAuthn 2FA，共同构建更安全的开源生态系统。",
      "translated_title": "我们为更安全的npm供应链制定的计划",
      "images": [
        {
          "url": "https://avatars.githubusercontent.com/u/7395402?v=4&s=200",
          "alt": "Xavier René-Corail",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 5
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Addressing a surge in package registry attacks, GitHub is strengthening npm's security with stricter authentication, granular tokens, and enhanced trusted publishing to restore trust in the open source ecosystem.</p>\n<p>The post <a href=\"https://github.blog/security/supply-chain-security/our-plan-for-a-more-secure-npm-supply-chain/\">Our plan for a more secure npm supply chain</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    },
    {
      "title": "Gartner连续第二年将GitHub评为2025年AI代码助手魔力象限的领导者 (原标题: Gartner positions GitHub as a Leader in the 2025 Magic Quadrant for AI Code Assistants for the second year in a row)",
      "link": "https://github.blog/ai-and-ml/github-copilot/gartner-positions-github-as-a-leader-in-the-2025-magic-quadrant-for-ai-code-assistants-for-the-second-year-in-a-row/",
      "pubDate": "Mon, 22 Sep 2025 18:24:17 +0000",
      "isoDate": "2025-09-22T18:24:17.000Z",
      "creator": "GitHub Staff",
      "summary": "## Gartner连续第二年将GitHub评为2025年AI代码助手魔力象限的领导者\n\n### 引言\n\nAI驱动的开发时代已全面到来。Gartner预测，到2028年，90%的企业软件工程师将使用AI代码助手，远高于2024年初的不足14%。这一趋势表明AI正在重塑软件开发方式，消除摩擦，激发创造力，并使团队能够实现前所未有的成就。GitHub Copilot凭借其庞大的规模（拥有2000多万用户，覆盖77000家企业）在快速发展的AI代码助手市场中脱颖而出。\n\n### Gartner魔力象限的认可\n\nGitHub连续第二年被Gartner®评为2025年AI代码助手魔力象限™的领导者，其旗舰产品GitHub Copilot获得了这一殊荣。\n\n*   **评估标准：** Gartner根据“执行能力”和“愿景完整性”两项标准评估了14家供应商。\n*   **GitHub的排名：** GitHub在执行能力方面排名最高，在愿景完整性方面也处于最右侧。\n\n![Gartner 2025年AI代码助手魔力象限图示，显示GitHub在执行能力方面最高，在愿景完整性方面最靠右。其他领导者包括Amazon、Cognition (Windsurf)、GitLab和Google Cloud。](https://github.blog/wp-content/uploads/2025/09/MQ.png?resize=937%2C1024)\n\n### Gartner对“领导者”的定义\n\nGartner指出，AI代码助手魔力象限的“领导者”为通过先进AI能力实现端到端开发者赋能设定了基准。他们：\n\n*   持续将尖端模型整合到强大的代理工作流中，提升软件开发生命周期（SDLC）中的生产力、代码质量和安全性。\n*   对企业需求有深刻理解，将客户反馈转化为迭代改进和差异化创新，例如长上下文推理、混合部署灵活性以及与IDE和DevSecOps平台的无缝集成。\n*   通过运营成熟度脱颖而出，以可扩展的基础设施、法规遵从性和强大的服务级别可靠性支持全球企业。\n*   拥有不断增长的生态系统、深入的产品集成和清晰的战略，确保在多样化的开发者和企业环境中持续产生影响力。\n\n### GitHub的承诺与创新\n\nGitHub将此次认可视为其承诺的体现：赋能每一位开发者，并坚持其核心目标——构建一个开放、安全、AI驱动的平台，定义软件开发的未来。\n\n自Gartner报告评估以来，GitHub持续创新，推出了多项重塑开发者和组织AI构建方式的功能：\n\n*   **GitHub Copilot Coding Agent：** 一个云端异步队友，可以处理问题并发送经过全面测试的拉取请求，让开发者专注于更高价值的工作。\n*   **Copilot agent mode：** 一个实时协作工具，驻留在开发者的编辑器中，与开发者协同工作，并根据需求编辑文件。\n*   **Copilot Application Modernization：** 帮助开发者和团队自动更新和重构遗留代码库，以使用更新的语言、框架或库，处理复杂的、多文件更改以实现应用程序现代化。\n*   **GitHub Copilot in VS Code：** 将核心Copilot体验直接集成到VS Code编辑器中，提供实时代码建议、函数自动补全，帮助开发者更快地编写代码。\n*   **GitHub Copilot in Visual Studio：** 相同的核心Copilot体验，将AI驱动的代码建议和实时协助直接带入Visual Studio IDE。\n\n### 未来展望\n\nGitHub的重点仍然是加强Copilot作为最广泛采用的开发工具的地位，包括：\n\n*   提供AI原生、企业级功能，大规模嵌入信任、合规和治理。\n*   扩展代理工作流，使开发者能够专注于更高价值的工作。\n*   拓宽模型支持并深化集成。\n\n这些投资都将为AI驱动的未来奠定基础，使Copilot能够赋能每一位开发者——从个人贡献者到全球企业——以更快的速度、更高的创造力和更强的信心进行构建。\n\n### Gartner免责声明\n\nGartner不认可其研究出版物中描绘的任何供应商、产品或服务，也不建议技术用户只选择那些评级最高或其他指定的供应商。Gartner研究出版物包含Gartner研究机构的意见，不应被解释为事实陈述。Gartner不承担与本研究相关的所有明示或暗示的保证，包括任何适销性或特定用途适用性的保证。",
      "shortSummary": "Gartner连续第二年将GitHub评为2025年AI代码助手魔力象限的领导者。GitHub在执行能力和愿景完整性方面均排名最高，这得益于GitHub Copilot在77000家企业中拥有2000多万用户的广泛采用。文章强调了AI驱动开发的重要性，并介绍了GitHub Copilot的最新创新，如Coding Agent和Application Modernization，旨在提升开发者生产力、代码质量和安全性。GitHub致力于构建开放、安全、AI驱动的平台，并持续深化其AI能力和集成。",
      "translated_title": "Gartner连续第二年将GitHub评为2025年AI代码助手魔力象限的领导者",
      "images": [
        {
          "url": "https://github.blog/wp-content/uploads/2025/09/MQ.png?resize=937%2C1024",
          "alt": "Gartner 2025 Magic Quadrant for AI Code Assistants showing GitHub as highest in ability to execute and the furthest right in completeness of vision. Other Leaders include Amazon, Cognition (Windsurf), GitLab, and Google Cloud.",
          "title": "",
          "position": 1
        },
        {
          "url": "https://avatars.githubusercontent.com/u/9919?v=4&s=200",
          "alt": "GitHub Staff",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon-Circle.svg",
          "alt": "Docs",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_95220f.svg",
          "alt": "GitHub",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/07/Icon_da43dc.svg",
          "alt": "Customer stories",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.blog/wp-content/uploads/2024/04/Universe24-North_Star.svg",
          "alt": "GitHub Universe 2025",
          "title": "",
          "position": 6
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Our commitment is to empower every developer and stay true to our north star by building an open, secure, and AI-powered platform that defines the future of software development.</p>\n<p>The post <a href=\"https://github.blog/ai-and-ml/github-copilot/gartner-positions-github-as-a-leader-in-the-2025-magic-quadrant-for-ai-code-assistants-for-the-second-year-in-a-row/\">Gartner positions GitHub as a Leader in the 2025 Magic Quadrant for AI Code Assistants for the second year in a row</a> appeared first on <a href=\"https://github.blog\">The GitHub Blog</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-10-01T04:34:02.185Z"
}