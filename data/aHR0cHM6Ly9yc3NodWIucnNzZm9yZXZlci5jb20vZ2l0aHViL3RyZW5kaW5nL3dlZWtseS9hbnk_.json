{
  "sourceUrl": "https://rsshub.rssforever.com/github/trending/weekly/any",
  "title": "Trending repositories on GitHub this week · GitHub",
  "description": "Trending repositories on GitHub this week · GitHub - Powered by RSSHub",
  "link": "https://github.com/trending/?since=weekly&spoken_language_code=",
  "items": [
    {
      "title": "Fosowl/智能代理搜索 (原标题: Fosowl/agenticSeek)",
      "link": "https://github.com/Fosowl/agenticSeek",
      "pubDate": "",
      "isoDate": "",
      "creator": "Fosowl",
      "summary": "# AgenticSeek：私有、本地的Manus替代方案\n\n![Agentic Seek Logo](https://github.com/Fosowl/agenticSeek/raw/main/media/agentic_seek_logo.png)\n\n## 项目概述\nAgenticSeek 是一个100%本地化的AI助手，旨在作为Manus AI的替代方案。它支持语音交互，能够自主浏览网页、编写代码和规划任务，同时将所有数据保留在用户设备上。该项目专为本地推理模型设计，完全在用户硬件上运行，确保了完整的隐私和零云依赖。\n\n## AgenticSeek 的核心优势\n\n*   **完全本地化与隐私保护**：所有操作都在用户机器上进行，不涉及云端，不共享数据。用户的文档、对话和搜索记录都保持私密。\n*   **智能网页浏览**：AgenticSeek 可以自主浏览互联网，包括搜索、阅读、提取信息和填写网页表单，全程无需手动操作。\n*   **自主编程助手**：能够编写、调试和运行多种编程语言（如Python、C、Go、Java等）的代码，无需人工监督。\n*   **智能代理选择**：用户提出需求后，系统能自动识别并选择最适合该任务的AI代理，如同拥有一个随时待命的专家团队。\n*   **复杂任务规划与执行**：从旅行规划到复杂的项目，它能将大型任务分解为多个步骤，并利用多个AI代理协同完成。\n*   **语音交互能力**：提供清晰、快速、未来感的语音和语音转文本功能，让用户可以像与科幻电影中的个人AI对话一样进行交流。\n\n## 项目状态与免责声明\n\n*   **积极开发中**：该项目目前处于活跃开发阶段。代码/Bash环境尚未完全Docker化，但即将实现（可查看`docker_deployment`分支）。\n*   **部署警告**：不建议在网络或生产环境中部署。\n*   **开源性质**：AgenticSeek最初是一个个人实验项目，没有预设路线图或期望，目前正寻求开源贡献者而非雇员。\n*   **资金支持**：目前仅有少量资金支持（每月1美元）。项目团队非常感谢社区的贡献、反馈和耐心。\n\n## 安装指南\n\n### 前置条件\n确保已安装Chrome Driver、Docker和Python 3.10。强烈建议使用Python 3.10以避免依赖错误。\n\n### 安装步骤\n\n1.  **克隆仓库并设置**：\n    ```bash\n    git clone https://github.com/Fosowl/agenticSeek.git\n    cd agenticSeek\n    mv .env.example .env\n    ```\n2.  **创建虚拟环境**：\n    ```bash\n    python3 -m venv agent_seek_env\n    source agent_seek_env/bin/activate # Windows: agent_seek_env\\Scripts\\activate\n    ```\n3.  **安装软件包**：\n    确保Python、Docker、Docker Compose和Google Chrome已安装。推荐Python 3.10.0。\n    *   **自动安装（推荐）**：\n        *   Linux/Macos: `./install.sh`\n        *   Windows: `./install.bat`\n    *   **手动安装**：\n        *   **注意**：确保安装的ChromeDriver版本与您的Chrome浏览器版本匹配。可通过`google-chrome --version`查看。\n        *   **Linux**：更新软件包列表，安装依赖（`alsa-utils`, `portaudio19-dev`, `python3-pyaudio`, `libgtk-3-dev`等），安装`chromium-chromedriver`，然后`pip3 install -r requirements.txt`。\n        *   **Macos**：更新brew，安装`chromedriver`和`portaudio`，升级`pip`和`wheel`，然后`pip3 install -r requirements.txt`。\n        *   **Windows**：安装`pyreadline3`，手动安装`portaudio`（例如通过vcpkg或预编译二进制文件），然后`pip install pyaudio`，手动下载并安装ChromeDriver并将其路径添加到系统PATH，最后`pip3 install -r requirements.txt`。\n\n## 本地运行大型语言模型 (LLM) 设置\n\n### 硬件要求\n至少需要一块能够运行Qwen/Deepseek 14B模型的GPU。详细模型/性能建议请参阅FAQ。\n\n### 设置步骤\n\n1.  **启动本地提供商**：例如使用Ollama：`ollama serve`。\n2.  **更新 `config.ini` 文件**：\n    *   将`is_local`设置为`True`。\n    *   设置`provider_name`为支持的提供商（如`ollama`, `lm-studio`, `openai`）。\n    *   设置`provider_model`为提供商支持的LLM模型（推荐Qwen或Deepseek）。\n    *   配置`provider_server_address`、`agent_name`、`recover_last_session`、`save_session`、`speak`、`listen`、`work_dir`、`jarvis_personality`、`languages`等参数。\n    *   浏览器配置：`headless_browser`和`stealth_mode`。\n    *   **注意**：如果使用LM-studio运行LLM，请勿将`provider_name`设置为`openai`，应设置为`lm-studio`。某些提供商（如lm-studio）要求服务器地址前加`http://`。\n\n### 支持的本地提供商\n*   **ollama**：轻松在本地运行LLM。\n*   **lm-studio**：使用LM Studio在本地运行LLM。\n*   **openai**：使用兼容OpenAI API的本地服务（如llama.cpp server）。\n\n## 通过API运行设置\n\n### 设置步骤\n\n1.  **更新 `config.ini` 文件**：\n    *   将`is_local`设置为`False`。\n    *   设置`provider_name`和`provider_model`。\n    *   `provider_server_address`在此模式下不重要。\n2.  **导出API密钥**：例如：`export TOGETHER_API_KEY=\"xxxxx\"`。\n\n### 支持的API提供商\n*   **openai**：取决于具体API（可能非私有）。\n*   **deepseek**：Deepseek API（非私有）。\n*   **huggingface**：Hugging-Face API（非私有）。\n*   **togetherAI**：Together AI API（非私有）。\n*   **google**：Google Gemini API（非私有）。\n\n### 使用建议\n*   不建议使用`gpt-4o`或其他闭源AI模型，它们在网页浏览和任务规划方面的性能较差。\n*   使用Gemini进行编程/Bash操作可能会失败，因为它似乎会忽略项目为Deepseek R1优化过的格式提示。\n\n## 启动服务与运行AgenticSeek\n\n1.  **激活Python环境**（如果需要）：`source agent_seek_env/bin/activate`。\n2.  **启动所需服务**：这将启动`docker-compose.yml`中定义的所有服务，包括`searxng`、`redis`和`frontend`。\n    *   Macos/Linux: `sudo ./start_services.sh`\n    *   Windows: `start ./start_services.cmd`\n3.  **运行AgenticSeek**：\n    *   **选项1：CLI界面**：运行`python3 cli.py`。建议在`config.ini`中将`headless_browser`设置为`False`。\n    *   **选项2：Web界面**：首先启动后端`python3 api.py`，然后访问`http://localhost:3000/`即可看到Web界面。\n\n## 使用方法\n\n*   确保服务已通过`./start_services.sh`启动。\n*   通过`python3 cli.py`（CLI模式）或`python3 api.py`并访问`localhost:3000`（Web界面）运行AgenticSeek。\n*   **语音转文本**：在`config.ini`中设置`listen = True`（仅限CLI模式）。语音转文本功能默认禁用，仅支持英文。当启用时，它会监听代理名称作为触发关键词。建议使用常见的英文名作为代理名称以获得最佳识别效果。当转录开始出现时，说出代理名称唤醒它，然后清晰地说出您的查询，并以确认短语（如“do it”, “go ahead”, “thanks”等）结束请求。\n*   **查询示例**：\n    *   “用Python制作一个贪吃蛇游戏！”\n    *   “在网上搜索法国雷恩最好的咖啡馆，并将其中三家及其地址保存到`rennes_cafes.txt`中。”\n    *   “编写一个Go程序来计算一个数的阶乘，将其保存为`factorial.go`到你的工作区。”\n    *   “搜索我的`summer_pictures`文件夹中所有JPG文件，用今天的日期重命名它们，并将重命名后的文件列表保存到`photos_list.txt`中。”\n    *   “在线搜索2024年流行的科幻电影，选择三部今晚观看。将列表保存到`movie_night.txt`中。”\n    *   “搜索网络上2025年最新的AI新闻文章，选择三篇，并编写一个Python脚本来抓取它们的标题和摘要。将脚本保存为`news_scraper.py`，摘要保存到`/home/projects/ai_news.txt`中。”\n    *   “周五，在网上搜索一个免费的股票价格API，使用`supersuper7434567@gmail.com`注册，然后编写一个Python脚本，使用该API获取特斯拉的每日价格，并将结果保存到`stock_prices.csv`中。”\n*   **注意**：表单填写功能仍在实验中，可能失败。\n*   **明确指令**：由于代理路由系统仍是早期原型，可能无法总是根据您的查询分配正确的代理。因此，您应该非常明确地说明您的意图以及AI应如何操作。例如，如果您想进行网页搜索，不要说：“你知道一些适合独自旅行的好国家吗？”而应问：“进行网页搜索，找出哪些是适合独自旅行的最佳国家。”\n\n## 在自有服务器上运行LLM设置\n\n如果您有一台强大的计算机或服务器，但希望从笔记本电脑使用它，可以选择在远程服务器上运行LLM。\n\n### 服务器端设置\n1.  在将运行AI模型的“服务器”上，获取IP地址。\n2.  克隆仓库并进入`server/`文件夹：\n    ```bash\n    git clone --depth 1 https://github.com/Fosowl/agenticSeek.git\n    cd agenticSeek/llm_server/\n    ```\n3.  安装服务器特定依赖：`pip3 install -r requirements.txt`。\n4.  运行服务器脚本：`python3 app.py --provider ollama --port 3333`（可选择`ollama`或`llamacpp`作为LLM服务）。\n\n### 个人电脑端设置\n更改`config.ini`文件：\n*   将`is_local`设置为`False`。\n*   将`provider_name`设置为`server`。\n*   将`provider_model`设置为您选择的模型（如`deepseek-r1:70b`）。\n*   将`provider_server_address`设置为运行模型的机器的IP地址和端口（如`x.x.x.x:3333`）。\n\n## 配置说明\n\n以下是`config.ini`文件中主要参数的详细解释：\n\n*   `is_local`：布尔值，`True`表示在本地运行代理，`False`表示使用远程提供商。\n*   `provider_name`：字符串，要使用的LLM提供商（可选值：`ollama`, `server`, `lm-studio`, `deepseek-api`）。\n*   `provider_model`：字符串，使用的模型名称，例如`deepseek-r1:32b`。\n*   `provider_server_address`：字符串，服务器地址，例如本地为`127.0.0.1:11434`。对于非本地API，可设置为任意值。\n*   `agent_name`：字符串，代理的名称，例如`Friday`。用作语音转文本的触发词。\n*   `recover_last_session`：布尔值，`True`表示从上次会话恢复，`False`则不恢复。\n*   `save_session`：布尔值，`True`表示保存当前会话数据，`False`则不保存。\n*   `speak`：布尔值，`True`启用语音输出，`False`禁用。\n*   `listen`：布尔值，`True`启用语音输入，`False`禁用（仅适用于CLI模式）。\n*   `work_dir`：字符串，AI可以访问的工作目录，例如`/Users/user/Documents/`。\n*   `jarvis_personality`：布尔值，`True`表示使用更像“JARVIS”的个性（实验性），`False`则不使用。这仅改变提示文件。\n*   `languages`：字符串列表，支持的语言列表，LLM路由器正常工作所需。避免添加过多或过于相似的语言。\n*   `headless_browser`：布尔值，`True`表示在无头模式下运行浏览器（无可见窗口），`False`则显示窗口。建议仅在Web界面中使用无头模式。\n*   `stealth_mode`：布尔值，`True`表示使用`undetected_selenium`以减少浏览器检测。",
      "shortSummary": "AgenticSeek是一个100%本地化、注重隐私的AI助手，作为Manus AI的替代方案。它能在用户设备上自主浏览网页、编写代码、规划任务，并支持语音交互。该项目完全在本地硬件上运行，无需云依赖，确保数据安全。它仍在积极开发中，提供详细的本地LLM和API配置选项，支持CLI和Web界面使用，旨在为用户提供一个私密且功能强大的个人AI代理。",
      "translated_title": "Fosowl/智能代理搜索",
      "images": [
        {
          "url": "https://github.com/Fosowl/agenticSeek/raw/main/media/agentic_seek_logo.png",
          "alt": "Agentic Seek Logo",
          "title": "",
          "position": 1
        },
        {
          "url": "https://camo.githubusercontent.com/1b201020fa2f92b255e76ee5f4b688f3863f8eb4c206174eaccfb75e752a8a53/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d57656273697465266d6573736167653d4167656e7469635365656b26636f6c6f723d626c7565267374796c653d666c61742d737175617265",
          "alt": "Visit AgenticSeek",
          "title": "",
          "position": 2
        },
        {
          "url": "https://camo.githubusercontent.com/b8aca6757b3afb9c067f24b6f7b08c350f1c500199efeaf3f094d943b930a40b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d47504c2d2d332e302d677265656e",
          "alt": "License",
          "title": "",
          "position": 3
        },
        {
          "url": "https://camo.githubusercontent.com/76464400d65162855e285f00e09548aa7607253fe2c10193469e53d436b15c4d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f446973636f72642d4a6f696e25323055732d3732383944413f6c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465",
          "alt": "Discord",
          "title": "",
          "position": 4
        },
        {
          "url": "https://camo.githubusercontent.com/bb69697f1cb8ca8ff8b0ee170fd1e26ee4e146138424b9562f3123e3a068a76c/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f68747470732f747769747465722e636f6d2f666f736f776c2e7376673f7374796c653d736f6369616c266c6162656c3d557064617465253230253430466f736f776c",
          "alt": "Twitter",
          "title": "",
          "position": 5
        },
        {
          "url": "https://camo.githubusercontent.com/201d0d6c81d53a77461c65d8eaf57d3ba1bcef2f5939cc95f27e4a701afc2a02/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f466f736f776c2f6167656e7469635365656b3f7374796c653d736f6369616c",
          "alt": "GitHub stars",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.com/Fosowl/agenticSeek/raw/main/media/chromedriver_readme.png",
          "alt": "alt text",
          "title": "",
          "position": 7
        },
        {
          "url": "https://camo.githubusercontent.com/ee51d06ba1b397256bb8935752bd4ca97a9afc48607a8b0121e8840eb85f25b9/68747470733a2f2f6170692e737461722d686973746f72792e636f6d2f7376673f7265706f733d466f736f776c2f6167656e7469635365656b26747970653d44617465",
          "alt": "Star History Chart",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/b6e71091a8f89a8cfc46a1b17573420f314e1ed76a902ea4d2ce5e32c4713be4/Fosowl/agenticSeek\" referrerpolicy=\"no-referrer\"><br>Fully Local Manus AI. No APIs, No $200 monthly bills. Enjoy an autonomous agent that thinks, browses the web, and code for the sole cost of electricity. 🔔 Official updates only via twitter @Martin993886460. Any other account is fake. <br><br>Language: Python <br>Stars: 16527 <br>Forks: 1530"
    },
    {
      "title": "全员AI/OpenHands (原标题: All-Hands-AI/OpenHands)",
      "link": "https://github.com/All-Hands-AI/OpenHands",
      "pubDate": "",
      "isoDate": "",
      "creator": "All-Hands-AI",
      "summary": "## OpenHands：少写代码，多做创造\n\n![Logo](https://github.com/All-Hands-AI/OpenHands/raw/main/docs/static/img/logo.png)\n\n### 引言\n\nOpenHands（前身为OpenDevin）是一个由AI驱动的软件开发代理平台，旨在帮助开发者实现“少写代码，多做创造”。OpenHands的AI代理能够执行人类开发者所能完成的任何任务，包括修改代码、运行命令、浏览网页、调用API，甚至从StackOverflow复制代码片段。\n\n### 核心功能与能力\n\n*   **全能型AI代理**：能够像人类开发者一样进行代码修改、命令执行、网页浏览、API调用等。\n*   **提高效率**：通过自动化开发任务，帮助用户减少编码工作量，提升创造力。\n\n### 如何开始使用\n\n1.  **OpenHands 云服务**：\n    *   最便捷的入门方式。\n    *   新用户可获得50美元的免费积分。\n2.  **本地运行**：\n    *   可通过Docker在本地系统上运行OpenHands。\n    *   提供了详细的Docker拉取和运行命令示例。\n    *   **推荐LLM提供商**：Anthropic的Claude Sonnet 4 (anthropic/claude-sonnet-4-20250514) 效果最佳，但也支持其他多种选项。\n    *   **访问地址**：本地运行后，可在 `http://localhost:3000` 访问应用程序。\n    *   **安全警告**：在公共网络上部署时，建议参考“强化Docker安装指南”以增强安全性。\n\n![App screenshot](https://github.com/All-Hands-AI/OpenHands/raw/main/docs/static/img/screenshot.png)\n\n3.  **其他运行方式**：\n    *   连接到本地文件系统。\n    *   以脚本化的无头模式运行。\n    *   通过友好的命令行界面（CLI）进行交互。\n    *   通过GitHub Action处理带标签的问题。\n    *   **重要提示**：OpenHands设计用于单用户本地工作站，不适用于多租户部署，因为它不提供内置的认证、隔离或可扩展性。如需多租户环境部署，请联系官方获取高级部署选项。\n\n### 设计合作伙伴计划\n\nOpenHands邀请企业用户加入其设计合作伙伴计划。参与者将获得商业功能的早期访问权，并有机会为产品路线图提供宝贵意见。\n\n### 文档\n\n![Ask DeepWiki](https://camo.githubusercontent.com/e7d4bb1a32530e373bb53fbe8eea825440ad27c7531d8f144d561acdd20c093a/68747470733a2f2f6465657077696b692e636f6d2f62616467652e737667)\n\nOpenHands提供全面的文档（docs.all-hands.dev），涵盖了如何使用不同的LLM提供商、故障排除资源以及高级配置选项。\n\n### 社区参与\n\nOpenHands是一个社区驱动的项目，欢迎所有人的贡献。主要的沟通和参与渠道包括：\n\n*   **Slack工作区**：讨论研究、架构和未来开发。\n*   **Discord服务器**：社区运营，用于一般讨论、问题和反馈。\n*   **GitHub Issues**：查看正在处理的问题或提交新想法。\n\n更多社区信息和贡献细节可在 `COMMUNITY.md` 和 `CONTRIBUTING.md` 文件中找到。\n\n### 项目进展\n\n![Star History Chart](https://camo.githubusercontent.com/9302342ad390c0bee60d4c5e085cf5fbc66dc6ff5dc95b9efaa4c167a5ea09c7/68747470733a2f2f6170692e737461722d686973746f72792e636f6d2f7376673f7265706f733d416c6c2d48616e64732d41492f4f70656e48616e647326747970653d44617465)\n\n项目路线图每月更新，可在维护者会议结束后查看。\n\n### 许可与致谢\n\nOpenHands项目采用MIT许可证分发。项目由众多贡献者共同构建，并基于其他开源项目，对此深表感谢。详细的开源项目列表和许可证信息可在 `CREDITS.md` 文件中找到。\n\n### 引用\n\n提供了关于OpenHands的学术引用信息，对应于arXiv上的一篇论文：《OpenHands: An Open Platform for AI Software Developers as Generalist Agents》。",
      "shortSummary": "OpenHands（前身为OpenDevin）是一个AI驱动的软件开发代理平台，旨在帮助开发者“少写代码，多做创造”。其AI代理能执行代码修改、命令运行、网页浏览、API调用等多种开发任务。用户可通过OpenHands云服务或本地Docker部署快速开始。项目提供详细文档和活跃社区支持，并采用MIT许可证。它主要面向单用户使用，不适用于多租户环境。",
      "translated_title": "全员AI/OpenHands",
      "images": [
        {
          "url": "https://github.com/All-Hands-AI/OpenHands/raw/main/docs/static/img/logo.png",
          "alt": "Logo",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.com/All-Hands-AI/OpenHands/raw/main/docs/static/img/screenshot.png",
          "alt": "App screenshot",
          "title": "",
          "position": 2
        },
        {
          "url": "https://camo.githubusercontent.com/e7d4bb1a32530e373bb53fbe8eea825440ad27c7531d8f144d561acdd20c093a/68747470733a2f2f6465657077696b692e636f6d2f62616467652e737667",
          "alt": "Ask DeepWiki",
          "title": "Autogenerated Documentation by DeepWiki",
          "position": 3
        },
        {
          "url": "https://camo.githubusercontent.com/9302342ad390c0bee60d4c5e085cf5fbc66dc6ff5dc95b9efaa4c167a5ea09c7/68747470733a2f2f6170692e737461722d686973746f72792e636f6d2f7376673f7265706f733d416c6c2d48616e64732d41492f4f70656e48616e647326747970653d44617465",
          "alt": "Star History Chart",
          "title": "",
          "position": 4
        },
        {
          "url": "https://opengraph.githubassets.com/04cf200000fbf52f1e351ebd9e346130bc4897f51becc6033620fe1472b74f85/All-Hands-AI/OpenHands",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/e19c1761a54e77c0160d288070ede94b03bc966305ec4c282250128d18b1ceff/All-Hands-AI/OpenHands\" referrerpolicy=\"no-referrer\"><br>🙌 OpenHands: Code Less, Make More <br><br>Language: Python <br>Stars: 56890 <br>Forks: 6396"
    },
    {
      "title": "microsoft/WSL",
      "link": "https://github.com/microsoft/WSL",
      "pubDate": "",
      "isoDate": "",
      "creator": "microsoft",
      "summary": "# Windows Subsystem for Linux (WSL) 存储库介绍\n\n![WSL logo](https://github.com/microsoft/WSL/raw/master/Images/Square44x44Logo.targetsize-256.png)\n\nWindows Subsystem for Linux (WSL) 是一个强大的工具，允许用户在 Windows 系统上直接运行未经修改的 Linux 命令行工具、实用程序和应用程序，而无需传统虚拟机或双启动设置的额外开销。\n\n## 主要功能与安装\n\n*   **核心功能**：WSL 旨在提供一个高效的环境，让 Linux 工具和应用能够无缝集成到 Windows 工作流中。\n*   **快速安装**：用户可以通过在 Windows 命令行中运行 `wsl --install` 命令来立即安装 WSL。\n*   **详细文档**：微软提供了全面的 WSL 文档页面，涵盖了最佳实践、WSL 概述以及更多设置和使用信息。\n\n## 相关开源存储库\n\nWSL 项目还维护着几个相关的开源存储库，以支持其生态系统：\n\n*   `microsoft/WSL2-Linux-Kernel`：这是 WSL 中附带的 Linux 内核的存储库。\n*   `microsoft/WSLg`：该存储库提供了在 WSL 中运行 Linux GUI 应用程序的支持。\n*   `microsoftdocs/wsl`：这是 WSL 官方文档的存储库，可在 aka.ms/wsldocs 访问。\n\n## 贡献与社区\n\n*   **欢迎贡献**：该项目欢迎各种类型的贡献，包括代码功能开发、错误修复、文档更正以及设计提案等。\n*   **贡献指南**：在开始贡献之前，建议阅读项目的《贡献者指南》。\n*   **开发者文档**：开发者可以通过阅读开发者文档，了解如何从源代码构建 WSL 及其架构细节。\n*   **行为准则**：本项目已采纳微软开源行为准则，以确保社区环境的积极和包容。\n\n## 商标、隐私与遥测\n\n*   **商标使用**：项目可能包含微软或其他第三方的商标或标志。微软商标的使用需遵循其商标和品牌指南，修改版本不得引起混淆或暗示微软赞助。第三方商标的使用则需遵循其各自政策。\n*   **隐私与遥测**：\n    *   **数据收集**：应用程序会记录基本的诊断数据（遥测），这些数据可能被微软用于提供服务和改进产品。\n    *   **遥测关闭**：用户可以根据存储库中的说明关闭遥测功能。\n    *   **用户数据责任**：如果软件中的某些功能允许您和微软从您的应用程序用户那里收集数据，您必须遵守适用法律，包括向用户提供适当的通知以及微软隐私声明的副本（链接：https://go.microsoft.com/fwlink/?LinkID=824704）。\n    *   **同意**：使用该软件即表示您同意这些数据收集和使用实践。",
      "shortSummary": "Windows Subsystem for Linux (WSL) 允许用户在 Windows 上直接运行 Linux 命令行工具和应用程序，无需传统虚拟机开销。用户可通过 `wsl --install` 快速安装。项目包含用于 Linux 内核和 GUI 应用支持的相关开源存储库。WSL 欢迎社区贡献，并遵循微软开源行为准则。软件会收集基本诊断数据（遥测），但用户可选择关闭，并需注意用户数据收集的隐私责任。",
      "translated_title": "microsoft/WSL",
      "images": [
        {
          "url": "https://github.com/microsoft/WSL/raw/master/Images/Square44x44Logo.targetsize-256.png",
          "alt": "WSL logo",
          "title": "",
          "position": 1
        },
        {
          "url": "https://opengraph.githubassets.com/32b35380a90b605475ac35886ce8cf832a6108fb600f8c8f30c942e9ee8a1f65/microsoft/WSL",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/bee6f1023fb0f69ee51cfa6e6fec747de9f2d28b41e1c43b694c6b2483b50a60/microsoft/WSL\" referrerpolicy=\"no-referrer\"><br>Windows Subsystem for Linux <br><br>Language: C++ <br>Stars: 27888 <br>Forks: 1323"
    },
    {
      "title": "MCP注册中心 (原标题: modelcontextprotocol/registry)",
      "link": "https://github.com/modelcontextprotocol/registry",
      "pubDate": "",
      "isoDate": "",
      "creator": "modelcontextprotocol",
      "summary": "## MCP注册中心概述\n\nMCP注册中心（Model Context Protocol Registry）是一个社区驱动的服务，旨在为模型上下文协议（MCP）服务器提供集中式的注册服务。\n\n### 项目简介\n\n*   **名称**：MCP注册中心\n*   **开发状态**：该项目目前处于早期开发阶段，以开放形式构建。\n*   **目标**：提供一个集中式存储库，用于MCP服务器条目，从而实现对各种MCP实现及其相关元数据、配置和功能的发现与管理。\n\n### 核心功能\n\nMCP注册中心提供以下主要功能：\n\n*   **RESTful API**：用于管理MCP注册条目，支持列表、获取、创建、更新和删除操作。\n*   **服务监控**：提供健康检查端点，便于服务状态监控。\n*   **环境配置**：支持多种环境配置。\n*   **优雅关机**：具备优雅处理服务关机的功能。\n*   **数据库支持**：支持MongoDB和内存数据库。\n*   **API文档**：提供全面的API文档，通过Swagger/OpenAPI进行交互式访问。\n*   **分页支持**：在列出注册条目时支持分页。\n\n### 快速入门\n\n**先决条件**：\n\n*   Go 1.18或更高版本\n*   MongoDB\n*   Docker（可选，但推荐用于开发）\n\n**使用Docker Compose运行**：\n\n这是启动注册中心最简单的方式，它将设置MCP注册服务，导入初始数据，并在本地Docker环境中运行MongoDB。\n\n1.  构建Docker镜像：`docker build -t registry .`\n2.  使用Docker Compose运行服务和MongoDB：`docker compose up`\n\n服务将在端口8080上暴露。\n\n**本地构建和运行**：\n\n如果不想使用Docker，可以直接使用Go构建和运行服务。\n\n1.  构建可执行文件：`go build ./cmd/registry`\n2.  确保MongoDB在本地运行。服务默认运行在`http://localhost:8080`。\n\n### 项目结构\n\n项目采用清晰的模块化结构：\n\n*   `api/`：OpenAPI规范\n*   `cmd/`：应用程序入口点\n*   `config/`：配置文件\n*   `internal/`：私有应用程序代码（包括HTTP服务器、请求处理、配置管理、数据模型和业务逻辑）\n*   `pkg/`：公共库\n*   `scripts/`：实用脚本\n*   `tools/`：命令行工具，包括`publisher/`（用于向注册中心发布MCP服务器的工具）\n\n### API文档与端点\n\n*   **API文档访问**：可以通过`/v0/swagger/index.html`访问交互式Swagger UI，提供所有端点的完整参考和测试功能。\n*   **主要API端点**：\n    *   `GET /v0/health`：返回服务的健康状态。\n    *   `GET /v0/servers`：列出MCP注册服务器条目，支持分页（`limit`和`cursor`查询参数）。\n    *   `GET /v0/servers/{id}`：根据唯一标识符检索特定MCP服务器条目的详细信息。\n    *   `POST /v0/publish`：向注册中心发布新的MCP服务器条目，需要通过Bearer令牌进行身份验证。\n    *   `GET /v0/ping`：一个简单的ping端点，返回环境配置信息。\n\n### 配置\n\n服务可以通过环境变量进行配置，例如：\n\n*   `MCP_REGISTRY_APP_VERSION`：应用程序版本\n*   `MCP_REGISTRY_COLLECTION_NAME`：MongoDB集合名称\n*   `MCP_REGISTRY_DATABASE_NAME`：MongoDB数据库名称\n*   `MCP_REGISTRY_DATABASE_URL`：MongoDB连接字符串\n*   `MCP_REGISTRY_GITHUB_CLIENT_ID` / `MCP_REGISTRY_GITHUB_CLIENT_SECRET`：GitHub App客户端凭据\n*   `MCP_REGISTRY_LOG_LEVEL`：日志级别\n*   `MCP_REGISTRY_SEED_FILE_PATH` / `MCP_REGISTRY_SEED_IMPORT`：种子数据导入路径和是否在首次运行时导入\n*   `MCP_REGISTRY_SERVER_ADDRESS`：服务器监听地址\n\n### 测试\n\n可以通过运行测试脚本`./scripts/test_endpoints.sh`来验证API端点，也可以指定要测试的特定端点。\n\n### 许可与贡献\n\n项目的许可和贡献指南分别在`LICENSE`和`CONTRIBUTING`文件中详细说明。",
      "shortSummary": "MCP注册中心是一个为模型上下文协议（MCP）服务器提供集中注册服务的项目。它允许发现和管理MCP实现及其元数据。该服务提供RESTful API，支持服务器条目的列表、获取、发布等操作。它支持MongoDB数据库，可通过Docker或本地Go环境运行，并提供全面的API文档。项目目前处于早期开发阶段，旨在简化MCP服务器的发现和管理。",
      "translated_title": "MCP注册中心",
      "images": [
        {
          "url": "https://opengraph.githubassets.com/47b10a4b4ffdb4e421be0b5558c3fc2ac753cdc0971e8ea828b5069336cf68aa/modelcontextprotocol/registry",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/3c33c035cd80692ddcb24831993f23cf1f8f2361b1a13475f0a3df2398e5ceeb/modelcontextprotocol/registry\" referrerpolicy=\"no-referrer\"><br>A community driven registry service for Model Context Protocol (MCP) servers. <br><br>Language: Go <br>Stars: 3769 <br>Forks: 292"
    },
    {
      "title": "微软/R&D-Agent (原标题: microsoft/RD-Agent)",
      "link": "https://github.com/microsoft/RD-Agent",
      "pubDate": "",
      "isoDate": "",
      "creator": "microsoft",
      "summary": "# 微软R&D-Agent：领先的机器学习工程代理\n\nR&D-Agent 是一个由微软开发的AI代理，旨在自动化工业研发过程中最关键和最有价值的方面，尤其专注于数据驱动的场景，以简化模型和数据的开发。其核心方法论包含两个关键组件：“R”（Research，提出新想法）和“D”（Development，实现这些想法）。\n\n## 性能表现\nR&D-Agent 在 MLE-bench 上表现卓越，该基准测试通过使用来自75个Kaggle竞赛的数据集，全面评估AI代理在真实世界机器学习工程任务中的性能。目前，R&D-Agent 是 MLE-bench 上表现最佳的机器学习工程代理。\n\n| 代理版本 | Low == Lite (%) | Medium (%) | High (%) | All (%) |\n| :----------------------- | :---------------- | :--------------- | :--------------- | :-------------- |\n| R&D-Agent o1-preview | 48.18 ± 2.49 | 8.95 ± 2.36 | 18.67 ± 2.98 | 22.4 ± 1.1 |\n| R&D-Agent o3(R)+GPT-4.1(D) | 51.52 ± 6.21 | 7.89 ± 3.33 | 16.67 ± 3.65 | 22.45 ± 2.45 |\n| AIDE o1-preview | 34.3 ± 2.4 | 8.8 ± 1.1 | 10.0 ± 1.9 | 16.9 ± 1.1 |\n\n*   **o3(R)+GPT-4.1(D) 版本**：旨在减少每次循环的平均时间，并通过无缝集成研究代理（o3）与开发代理（GPT-4.1）来利用成本效益高的后端大型语言模型（LLM）组合。\n*   **MLE-bench 复杂度分类**：\n    *   **Low==Lite**：经验丰富的ML工程师在2小时内（不含模型训练时间）能给出合理解决方案。\n    *   **Medium**：2到10小时。\n    *   **High**：超过10小时。\n\n## 最新动态与功能\n*   **技术报告发布**：提供了整体框架描述和在MLE-bench上的结果。\n*   **R&D-Agent-Quant 发布**：将R&D-Agent应用于量化交易。\n*   **LiteLLM 后端支持**：全面支持LiteLLM作为后端，可集成多个LLM提供商。\n*   **Kaggle 场景发布**：发布了Kaggle Agent，提供新功能。\n*   **社区支持**：已创建微信群和Discord聊天频道。\n*   **数据科学代理预览**：展示了正在开发中的数据科学代理的进展。\n\n## 核心理念与应用场景\nR&D-Agent 的目标是构建一个能够自动化数据驱动研发的代理，具体能力包括：\n*   **阅读真实世界材料**：从报告、论文等中提取关键公式、感兴趣的特征和模型描述。\n*   **实现提取的公式**：将提取的公式（如特征、因子和模型）转化为可运行的代码。\n*   **提出新想法**：基于当前知识和观察提出新想法，并通过学习反馈和知识来改进性能。\n\n该项目在数据驱动场景的两个关键领域——模型实现和数据构建中，主要扮演两种角色：**Copilot（副驾驶）**和**Agent（代理）**。\n\nR&D-Agent 的潜在应用场景广泛，包括：\n*   **自动化量化工厂**：自动进行量化交易。\n*   **数据挖掘代理**：迭代地提出数据和模型，并通过从数据中获取知识来实现它们。\n*   **研究副驾驶**：自动阅读研究论文/财务报告，并实现模型结构或构建数据集。\n*   **Kaggle 代理**：自动进行模型调优和特征工程，以在竞赛中取得更好成绩。\n\n## 快速开始\n用户可以通过以下步骤快速体验R&D-Agent：\n\n1.  **Docker 安装**：确保已安装Docker，并配置当前用户无需sudo即可运行Docker命令。\n2.  **创建 Conda 环境**：\n    *   `conda create -n rdagent python=3.10`\n    *   `conda activate rdagent`\n3.  **安装 R&D-Agent**：\n    *   `pip install rdagent`\n4.  **健康检查**：\n    *   `rdagent health_check`（检查Docker安装和UI端口占用情况）\n5.  **配置**：\n    *   在 `.env` 文件中配置API密钥和模型，支持OpenAI API、Azure OpenAI以及LiteLLM后端。需要支持 `ChatCompletion json_mode` 和 `embedding query` 功能。\n6.  **运行应用**：\n    *   提供多种预设的演示场景，例如：\n        *   量化交易（因子/模型演化）：`rdagent fin_factor` / `rdagent fin_model`\n        *   医疗预测模型演化：`rdagent med_model`\n        *   从财务报告中提取因子：`rdagent fin_factor_report`\n        *   模型研发副驾驶（论文/报告）：`rdagent general_model <Your paper URL>`\n        *   Kaggle 模型调优与特征工程：`rdagent kaggle --competition <your competition name>` (需配置Kaggle API和chromedriver)\n7.  **监控结果**：\n    *   通过运行 `rdagent ui --port 19899 --log_dir <your log folder>` 命令监控运行日志。\n\n## 包含的图片\n\n*   ![CI](https://github.com/microsoft/RD-Agent/actions/workflows/ci.yml/badge.svg)\n*   ![CodeQL](https://github.com/microsoft/RD-Agent/actions/workflows/github-code-scanning/codeql/badge.svg)\n*   ![Dependabot Updates](https://github.com/microsoft/RD-Agent/actions/workflows/dependabot/dependabot-updates/badge.svg)\n*   ![Lint PR Title](https://github.com/microsoft/RD-Agent/actions/workflows/pr.yml/badge.svg)\n*   ![Release.yml](https://github.com/microsoft/RD-Agent/actions/workflows/release.yml/badge.svg)\n*   ![Platform](https://camo.githubusercontent.com/ec95a9315e09a85e8157f8a3c009c6b4df0d69d69906dde1501790d7fd1afc9b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d4c696e75782d626c7565)\n*   ![PyPI](https://camo.githubusercontent.com/18c8cc7b413abe900055f5491fc41b9e75977756222be7cca167ea4d40eeaab2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f72646167656e74)\n*   ![PyPI - Python Version](https://camo.githubusercontent.com/5efa052408367f3814a15ad89856d21b871a26a723e253f1477e27396e6fc9be/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72646167656e74)\n*   ![Release](https://camo.githubusercontent.com/6db4d4d458fe3973d73e6b48f87c8e2473aa864a7c803937901a5f92fc3eb532/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f6d6963726f736f66742f52442d4167656e74)\n*   ![GitHub](https://camo.githubusercontent.com/bd37cece6cc43815d5f220d7706bf960c43dbd6b01f04cb697064ce2ec7c333f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6963726f736f66742f52442d4167656e74)\n*   ![pre-commit](https://camo.githubusercontent.com/0d057bf51eafb5183bd4dfd1e62deabe4d3cae00c54930c829ec8e6aa131ef0a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f7072652d2d636f6d6d69742d656e61626c65642d627269676874677265656e3f6c6f676f3d7072652d636f6d6d6974)\n*   ![Checked with mypy](https://camo.githubusercontent.com/94ee3fdd3e1d5ecd6d95a0f8258f37ac1e77f040ccd0a7ad64b6b6828445aa84/68747470733a2f2f7777772e6d7970792d6c616e672e6f72672f7374617469632f6d7970795f62616467652e737667)\n*   ![Ruff](https://camo.githubusercontent.com/051a04ae958f4a1a5d6444df4cdc520305eef93d5028e6d4c7cd16efa3136cd4/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f61737472616c2d73682f727566662f6d61696e2f6173736574732f62616467652f76322e6a736f6e)\n*   ![Chat](https://camo.githubusercontent.com/428a1f7a91d7df544fdd76c7d40e53a305bb0bf5a38b596db008cbde9e13f763/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636861742d646973636f72642d626c7565)\n*   ![Documentation Status](https://camo.githubusercontent.com/0e218b08d82fad8cde8bfd54b0b0041ccd3651052d4079403b66145ba3a3333b/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f72646167656e742f62616467652f3f76657273696f6e3d6c6174657374)\n*   ![Readthedocs Preview](https://github.com/microsoft/RD-Agent/actions/workflows/readthedocs-preview.yml/badge.svg)\n*   ![arXiv](https://camo.githubusercontent.com/62532e102ce240754e97d5de6aa91173f1dac74919baf213096421120f3e7fa3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f61725869762d323530352e31343733382d3030666630302e737667)\n*   ![Our focused scenario](https://github.com/microsoft/RD-Agent/raw/main/docs/_static/scen.png)\n*   ![Watch the demo](https://github.com/microsoft/RD-Agent/raw/main/docs/_static/demo.png)",
      "shortSummary": "微软的R&D-Agent是一个领先的AI代理，专注于自动化机器学习工程任务。它在MLE-bench基准测试中表现最佳，利用“研究”（提出想法）和“开发”（实现想法）双重机制，自动化数据驱动的研发流程。R&D-Agent可应用于量化交易、数据挖掘、研究辅助和Kaggle竞赛等场景，旨在通过阅读材料、实现代码和迭代优化来提升研发效率。",
      "translated_title": "微软/R&D-Agent",
      "images": [
        {
          "url": "https://github.com/microsoft/RD-Agent/actions/workflows/ci.yml/badge.svg",
          "alt": "CI",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.com/microsoft/RD-Agent/actions/workflows/github-code-scanning/codeql/badge.svg",
          "alt": "CodeQL",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.com/microsoft/RD-Agent/actions/workflows/dependabot/dependabot-updates/badge.svg",
          "alt": "Dependabot Updates",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.com/microsoft/RD-Agent/actions/workflows/pr.yml/badge.svg",
          "alt": "Lint PR Title",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.com/microsoft/RD-Agent/actions/workflows/release.yml/badge.svg",
          "alt": "Release.yml",
          "title": "",
          "position": 5
        },
        {
          "url": "https://camo.githubusercontent.com/ec95a9315e09a85e8157f8a3c009c6b4df0d69d69906dde1501790d7fd1afc9b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d4c696e75782d626c7565",
          "alt": "Platform",
          "title": "",
          "position": 6
        },
        {
          "url": "https://camo.githubusercontent.com/18c8cc7b413abe900055f5491fc41b9e75977756222be7cca167ea4d40eeaab2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f72646167656e74",
          "alt": "PyPI",
          "title": "",
          "position": 7
        },
        {
          "url": "https://camo.githubusercontent.com/5efa052408367f3814a15ad89856d21b871a26a723e253f1477e27396e6fc9be/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72646167656e74",
          "alt": "PyPI - Python Version",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/b983b2fcd115669564c7f8dadc1f44da67dfd0b6a1cf1264c9f46886657286e9/microsoft/RD-Agent\" referrerpolicy=\"no-referrer\"><br>Research and development (R&amp;D) is crucial for the enhancement of industrial productivity, especially in the AI era, where the core aspects of R&amp;D are mainly focused on data and models. We are committed to automating these high-value generic R&amp;D processes through R&amp;D-Agent, which lets AI drive data-driven AI. 🔗https://aka.ms/RD-Agent-Tech-Report <br><br>Language: Python <br>Stars: 7543 <br>Forks: 782"
    },
    {
      "title": "Anthropic/Claude 代码 (原标题: anthropics/claude-code)",
      "link": "https://github.com/anthropics/claude-code",
      "pubDate": "",
      "isoDate": "",
      "creator": "anthropics",
      "summary": "# Anthropic Claude 代码\n\nClaude Code 是 Anthropic 推出的一款智能代理编码工具，它在终端中运行，能够理解代码库，并通过自然语言命令帮助开发者更快地完成编码工作。\n\n## 主要功能\n*   **代码编辑与修复**：在整个代码库中编辑文件和修复错误。\n*   **代码理解**：回答关于代码架构和逻辑的问题。\n*   **任务执行与调试**：执行并修复测试、linting 和其他命令。\n*   **Git 工作流管理**：搜索 Git 历史记录、解决合并冲突、创建提交和拉取请求 (PRs)。\n\n## 快速开始\n1.  **Node.js 和 npm 配置**：建议为用户配置 NPM 前缀（相关说明可查阅官方文档）。\n2.  **安装**：\n    *   推荐以非特权用户身份安装，以维护系统安全和稳定性。\n    *   执行命令：`npm install -g @anthropic-ai/claude-code`\n3.  **运行**：\n    *   导航到您的项目目录。\n    *   运行 `claude` 命令。\n4.  **认证**：完成与您的 Claude Max 或 Anthropic Console 账户的一次性 OAuth 过程。\n\n## 报告 Bug\n在测试期间，Anthropic 欢迎用户反馈：\n*   在 Claude Code 内部使用 `/bug` 命令直接报告问题。\n*   在 GitHub 上提交 issue。\n\n## 数据收集、使用和保留\n当您使用 Claude Code 时，Anthropic 会收集反馈数据，包括：\n*   **使用数据**：例如代码接受或拒绝情况。\n*   **相关对话数据**。\n*   **通过 `/bug` 命令提交的用户反馈**。\n\n### 数据使用方式\n*   **产品改进**：收集到的反馈可能用于改进 Anthropic 的产品和服务。\n*   **重要声明**：Anthropic **不会**使用来自 Claude Code 的反馈数据来训练生成模型。\n*   **数据保留**：用户反馈记录（transcripts）仅存储 30 天。\n*   **调试与功能改进**：如果您选择发送关于 Claude Code 的反馈（例如使用记录），Anthropic 可能会使用这些反馈来调试相关问题并改进 Claude Code 的功能（例如，降低未来发生类似错误的风险）。\n\n### 隐私保护措施\nAnthropic 实施了多项数据保护措施，包括：\n*   对敏感信息设置有限的保留期限。\n*   限制对用户会话数据的访问。\n*   明确规定禁止使用反馈进行模型训练。\n*   完整详情请查阅 Anthropic 的《商业服务条款》和《隐私政策》。\n\n### 相关图片\n*   Node.js 版本徽章：![Node.js Version](https://camo.githubusercontent.com/42dd0d4d66d954a88749cfbcf0b9ddcb7675d2f7bd8072675e99e6da8abde5c0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6f64652e6a732d31382532422d627269676874677265656e3f7374796c653d666c61742d737175617265)\n*   npm 版本徽章：![npm Version](https://camo.githubusercontent.com/961ca37273ecd043d77954d3cf7d9fb9a2da2d5cf043ba6dca3609debae0ff6e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40616e7468726f7069632d61692f636c617564652d636f6665.svg3f7374796c653d666c61742d737175617265)",
      "shortSummary": "Claude Code 是 Anthropic 推出的一款终端智能编码工具，通过自然语言命令帮助开发者加速编码、理解代码库并管理 Git 工作流。其核心功能包括文件编辑、bug 修复、代码问答、测试执行及 Git 操作。该工具会收集使用数据和反馈以改进产品，但明确承诺不会将这些数据用于训练生成模型，并采取多项隐私保护措施。",
      "translated_title": "Anthropic/Claude 代码",
      "images": [
        {
          "url": "https://camo.githubusercontent.com/42dd0d4d66d954a88749cfbcf0b9ddcb7675d2f7bd8072675e99e6da8abde5c0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4e6f64652e6a732d31382532422d627269676874677265656e3f7374796c653d666c61742d737175617265",
          "alt": "",
          "title": "",
          "position": 1
        },
        {
          "url": "https://camo.githubusercontent.com/961ca37273ecd043d77954d3cf7d9fb9a2da2d5cf043ba6dca3609debae0ff6e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40616e7468726f7069632d61692f636c617564652d636f64652e7376673f7374796c653d666c61742d737175617265",
          "alt": "npm",
          "title": "",
          "position": 2
        },
        {
          "url": "https://opengraph.githubassets.com/a05a7ebe36f64275bffc07d396359d4c8592b32209cc9db31c4485afb20112fd/anthropics/claude-code",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/48443e417373444c3fa09c0b46af78d7d04e897d4c621b16c04f4815fb9d8f70/anthropics/claude-code\" referrerpolicy=\"no-referrer\"><br>Claude Code is an agentic coding tool that lives in your terminal, understands your codebase, and helps you code faster by executing routine tasks, explaining complex code, and handling git workflows - all through natural language commands. <br><br>Language: PowerShell <br>Stars: 25180 <br>Forks: 1383"
    },
    {
      "title": "mlabonne/LLM课程 (原标题: mlabonne/llm-course)",
      "link": "https://github.com/mlabonne/llm-course",
      "pubDate": "",
      "isoDate": "",
      "creator": "mlabonne",
      "summary": "# mlabonne/LLM课程概述\n\n![LLM Engineer's Handbook Cover](https://i.imgur.com/7iNjEq2.png)\n\nmlabonne/LLM课程是一个全面的学习资源，旨在教授如何构建、优化和部署大型语言模型（LLM）应用。该课程分为三个主要部分，并提供丰富的实践笔记本和学习资源。\n\n## 课程结构\n\n该LLM课程分为以下三个主要部分：\n\n*   **🧩 LLM基础 (可选)**：涵盖数学、Python和神经网络等基础知识，为深入学习LLM奠定基础。\n*   **🧑‍🔬 LLM科学家**：专注于使用最新技术构建性能最佳的LLM。\n*   **👷 LLM工程师**：侧重于创建基于LLM的应用程序并进行部署。\n\n## 相关资源\n\n*   **《LLM工程师手册》**：基于本课程，作者与Paul Iuzstin合著了《LLM工程师手册》。这是一本实践性强、内容详细的图书，涵盖了LLM应用程序从设计到部署的端到端流程。课程本身免费，但鼓励购买书籍以支持作者的工作。\n*   **LLM助手**：为了提供课程的交互式版本，作者创建了一个LLM助手，可在HuggingChat或ChatGPT上提供个性化的问答和知识测试。\n\n## 📝 笔记本列表\n\n课程提供了大量关于LLM的Jupyter Notebooks和文章，涵盖了从工具到微调、量化等多个方面。\n\n### 工具\n\n这些工具笔记本旨在简化LLM的开发和操作：\n\n*   **🧐 LLM AutoEval**：使用RunPod自动评估LLM。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **🥱 LazyMergekit**：一键使用MergeKit轻松合并模型。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **🦎 LazyAxolotl**：一键在云端使用Axolotl微调模型。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **⚡ AutoQuant**：一键将LLM量化为GGUF、GPTQ、EXL2、AWQ和HQQ格式。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **🌳 Model Family Tree**：可视化合并模型的家族树。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **🚀 ZeroSpace**：使用免费的ZeroGPU自动创建Gradio聊天界面。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n\n### 微调 (Fine-tuning)\n\n一系列关于LLM微调的实践指南：\n\n*   **使用Unsloth微调Llama 3.1**：在Google Colab中进行超高效的监督式微调。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **使用ORPO微调Llama 3**：通过ORPO进行更经济、更快速的单阶段微调。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **使用DPO微调Mistral-7b**：通过DPO提升监督式微调模型的性能。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **使用QLoRA微调Mistral-7b**：在免费的Google Colab层级中使用TRL监督式微调Mistral-7b。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **使用Axolotl微调CodeLlama**：端到端的最先进微调工具指南。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **使用QLoRA微调Llama 2**：在Google Colab中监督式微调Llama 2的分步指南。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n\n### 量化 (Quantization)\n\n关于LLM量化以优化性能和资源使用的指南：\n\n*   **量化简介**：使用8位量化进行大型语言模型优化。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **使用GPTQ进行4位量化**：量化自己的开源LLM以在消费级硬件上运行。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **使用GGUF和llama.cpp进行量化**：使用llama.cpp量化Llama 2模型并将GGUF版本上传到HF Hub。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **ExLlamaV2: 运行LLM最快的库**：量化并运行EXL2模型并将其上传到HF Hub。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n\n### 其他\n\n涵盖LLM相关高级主题的笔记本：\n\n*   **使用MergeKit合并LLM**：轻松创建自己的模型，无需GPU！ ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **使用MergeKit创建MoEs**：将多个专家模型组合成一个“FrankenMoE”。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **使用abliteration解除任何LLM的审查**：无需重新训练的微调。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **使用知识图谱改进ChatGPT**：使用知识图谱增强ChatGPT的回答。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n*   **大型语言模型中的解码策略**：从束搜索到核采样的文本生成指南。 ![Open In Colab](https://github.com/mlabonne/llm-course/raw/main/img/colab.svg)\n\n## 🧩 LLM基础 (可选)\n\n本节介绍机器学习所需的数学、Python和神经网络等基本知识。\n\n![LLM Fundamentals Roadmap](https://github.com/mlabonne/llm-course/raw/main/img/roadmap_fundamentals.png)\n\n1.  **机器学习数学基础**：\n    *   **线性代数**：向量、矩阵、行列式、特征值和特征向量、向量空间、线性变换。\n    *   **微积分**：导数、积分、极限、级数、多元微积分和梯度概念。\n    *   **概率与统计**：概率论、随机变量、概率分布、期望、方差、协方差、相关性、假设检验、置信区间、最大似然估计和贝叶斯推断。\n    *   **推荐资源**：3Blue1Brown、StatQuest with Josh Starmer、AP Statistics Intuition by Ms Aerin、Immersive Linear Algebra、Khan Academy。\n2.  **机器学习Python基础**：\n    *   **Python基础**：语法、数据类型、错误处理、面向对象编程。\n    *   **数据科学库**：NumPy、Pandas、Matplotlib、Seaborn。\n    *   **数据预处理**：特征缩放、归一化、缺失数据处理、异常值检测、分类数据编码、数据拆分。\n    *   **机器学习库**：Scikit-learn（线性回归、逻辑回归、决策树、随机森林、K-NN、K-means聚类）、降维技术（PCA、t-SNE）。\n    *   **推荐资源**：Real Python、freeCodeCamp、Python Data Science Handbook、Udacity。\n3.  **神经网络**：\n    *   **基础**：神经网络结构（层、权重、偏置、激活函数）。\n    *   **训练与优化**：反向传播、损失函数（MSE、交叉熵）、优化算法（梯度下降、SGD、RMSprop、Adam）。\n    **过拟合**：理解过拟合及正则化技术（dropout、L1/L2正则化、提前停止、数据增强）。\n    *   **实现多层感知机 (MLP)**：使用PyTorch构建MLP。\n    *   **推荐资源**：3Blue1Brown、freeCodeCamp、Fast.ai、Patrick Loeber。\n4.  **自然语言处理 (NLP)**：\n    *   **文本预处理**：分词、词干提取、词形还原、停用词移除。\n    *   **特征提取技术**：词袋模型 (BoW)、TF-IDF、n-gram。\n    *   **词嵌入**：Word2Vec、GloVe、FastText。\n    *   **循环神经网络 (RNNs)**：RNN、LSTM、GRU。\n    *   **推荐资源**：Lena Voita、RealPython、Kaggle、Jay Alammar、Jake Tae、colah's blog。\n\n## 🧑‍🔬 LLM科学家\n\n本节课程侧重于学习如何使用最新技术构建最佳的LLM。\n\n![LLM Scientist Roadmap](https://github.com/mlabonne/llm-course/raw/main/img/roadmap_scientist.png)\n\n1.  **LLM架构**：\n    *   **架构概述**：从编码器-解码器Transformer到仅解码器架构（如GPT）的演变。\n    *   **分词 (Tokenization)**：文本如何转换为LLM可处理的数值表示。\n    *   **注意力机制**：自注意力及其变体，理解其如何处理长距离依赖并保持上下文。\n    *   **采样技术**：文本生成方法及其权衡（贪婪搜索、束搜索、温度采样、核采样）。\n    *   **推荐参考**：3Blue1Brown、Brendan Bycroft、Andrej Karpathy、Lilian Weng、Maxime Labonne。\n2.  **预训练模型**：\n    *   预训练是一个计算密集且昂贵的过程，但理解其原理很重要。\n    *   **数据准备**：大规模数据集的整理、清洗、去重和分词。\n    *   **分布式训练**：结合数据并行、流水线并行和张量并行等策略。",
      "shortSummary": "mlabonne/LLM课程是一个免费的综合性学习资源，分为“LLM基础”、“LLM科学家”和“LLM工程师”三部分。它提供了大量实践性Jupyter Notebooks，涵盖LLM评估、模型合并、微调（如Llama 3.1、Mistral-7b）、量化及其他高级主题。课程旨在帮助学习者掌握从LLM构建到部署的端到端技能。此外，课程还配套有《LLM工程师手册》和交互式LLM助手，以提供更深入的学习和支持。",
      "translated_title": "mlabonne/LLM课程",
      "images": [
        {
          "url": "https://camo.githubusercontent.com/fa800f7ce2c0ede3a223fa24b71ef3b6d86ecec5d2b57eee8425f6bcc06bdf89/68747470733a2f2f692e696d6775722e636f6d2f37694e6a4571322e706e67",
          "alt": "LLM Engineer's Handbook Cover",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.com/mlabonne/llm-course/raw/main/img/colab.svg",
          "alt": "Open In Colab",
          "title": "",
          "position": 2
        },
        {
          "url": "https://opengraph.githubassets.com/27ee79ee3f85550f241872741f12249b527438c7af9edf610a7fd6a1cf1a8968/mlabonne/llm-course",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/5de8547e526ae9207cd77f5771ec2111ea52bb0c6608a839492e6c84a5ade8b8/mlabonne/llm-course\" referrerpolicy=\"no-referrer\"><br>Course to get into Large Language Models (LLMs) with roadmaps and Colab notebooks. <br><br>Language: Jupyter Notebook <br>Stars: 53433 <br>Forks: 5678"
    },
    {
      "title": "duixcom/Duix.mobile",
      "link": "https://github.com/duixcom/Duix.mobile",
      "pubDate": "",
      "isoDate": "",
      "creator": "duixcom",
      "summary": "DUIX-Mobile 是一个基于移动端的、由 AI 驱动的数字人 SDK，用于实时交互（Android/iOS）。\n\n**主要特点：**\n\n*   **类人 AI：** 模仿人类的面部表情、语调和同理心。\n*   **超快响应：** 实时交互低于 1.5 秒，实现流畅对话。\n*   **经济高效的部署：** 低资源消耗，可在移动设备、智能屏幕等设备上快速设置。\n*   **轻量级网络设计：** 片上处理最大限度地减少了连接需求，非常适合金融、政府和法律服务。\n*   **通用适应性：** 使用模块化、可扩展的架构为任何行业定制数字人和场景。\n\n**文档：**\n\n*   Android 开发者：DUIX-Mobile SDK: [Android]\n*   IOS 开发者：DUIX-Mobile SDK: [iOS]\n\n**模型下载：**\n\n提供公共测试模型，方便下载和集成。\n\n*   女性模型：\n    ![Hazel](https://github.com/GuijiAI/duix.ai/raw/main/res/Hazel.jpg)\n    ![Luna](https://github.com/GuijiAI/duix.ai/raw/main/res/Luna.jpg)\n    ![Ivy](https://github.com/GuijiAI/duix.ai/raw/main/res/Ivy.jpg)\n    ![Aurora](https://github.com/GuijiAI/duix.ai/raw/main/res/Aurora.jpg)\n\n*   男性模型：\n    ![William](https://github.com/GuijiAI/duix.ai/raw/main/res/William.jpg)\n    ![Andrew](https://github.com/GuijiAI/duix.ai/raw/main/res/andrew.jpg)\n    ![Michael](https://github.com/GuijiAI/duix.ai/raw/main/res/Michael.jpg)\n    ![Eric](https://github.com/GuijiAI/duix.ai/raw/main/res/Eric.jpg)\n\n**使用案例：**\n\n该模型支持跨 Web、移动设备、Android 智能显示器和其他平台的各种应用程序。\n\n*   商业案例演示\n    ![Digital Lawyer](https://github.com/GuijiAI/duix.ai/raw/main/res/540p/lvshi/lvshi-bg.jpg)\n    ![Digital Doctor](https://github.com/GuijiAI/duix.ai/raw/main/res/540p/yisheng/yisheng-bg.jpg)\n    ![Virtual Companion](https://github.com/GuijiAI/duix.ai/raw/main/res/540p/peiban/peiban-bg.jpg)\n    ![Speaking Tutor](https://github.com/GuijiAI/duix.ai/raw/main/res/540p/laoshi/laoshi-bg.jpg)\n*   低端终端屏幕案例\n    ![God of Wealth](https://github.com/GuijiAI/duix.ai/raw/main/res/270p/caishen/caishen-bg.jpg)\n    ![Guanyin Bodhisattva](https://github.com/GuijiAI/duix.ai/raw/main/res/270p/guanyin/guanyin-bg.jpg)\n    ![Su Shi](https://github.com/GuijiAI/duix.ai/raw/main/res/270p/sushi/sushi-bg.jpg)\n    ![Virtual Girlfriend](https://github.com/GuijiAI/duix.ai/raw/main/res/270p/nvyou/nvyou-bg.jpg)\n\n**常见问题解答：**\n\n提供关于创建自定义数字形象、定价、更新、API、手势控制等常见问题的解答。\n\n**联系方式：**\n\n如有任何问题，请提出 issue 或通过 james@duix.com 联系。",
      "shortSummary": "DUIX-Mobile 是一个移动端 AI 驱动的数字人 SDK，支持实时交互。它具有类人 AI、超快响应、经济高效的部署和轻量级网络设计等特点，适用于各种行业。该 SDK 提供 Android 和 iOS 平台的文档，并提供公共测试模型下载。模型支持 Web、移动设备和智能显示器等多种应用场景。常见问题解答部分涵盖了创建自定义数字形象、定价和 API 等问题。如有疑问，可通过 issue 或邮件联系。",
      "translated_title": "duixcom/Duix.mobile",
      "images": [
        {
          "url": "https://github.com/duixcom/Duix.mobile/raw/main/res/logo_en.png",
          "alt": "",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.com/duixcom/Duix.mobile/raw/main/res/duix_home.png",
          "alt": "图片1",
          "title": "",
          "position": 2
        },
        {
          "url": "https://github.com/duixcom/Duix.mobile/raw/main/res/duix_doc.png",
          "alt": "图片2",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.com/duixcom/Duix.mobile/raw/main/res/duix_conversation.png",
          "alt": "图片3",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.com/duixcom/Duix.mobile/raw/main/res/duix_more.png",
          "alt": "图片4",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.com/GuijiAI/duix.ai/raw/main/res/Hazel.jpg",
          "alt": "",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.com/GuijiAI/duix.ai/raw/main/res/Luna.jpg",
          "alt": "",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.com/GuijiAI/duix.ai/raw/main/res/Ivy.jpg",
          "alt": "",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/2e464b4ed61d927a5904c6ab76924174f777eb0911a5bec420b37fd4283297dd/duixcom/Duix.mobile\" referrerpolicy=\"no-referrer\"><br>null <br><br>Language: C++ <br>Stars: 6813 <br>Forks: 975"
    },
    {
      "title": "AI对冲基金 (原标题: virattt/ai-hedge-fund)",
      "link": "https://github.com/virattt/ai-hedge-fund",
      "pubDate": "",
      "isoDate": "",
      "creator": "virattt",
      "summary": "# AI对冲基金概念验证项目\n\n本项目是一个AI驱动的对冲基金的概念验证，旨在探索人工智能在交易决策中的应用。该项目仅用于教育和研究目的，不适用于实际交易或投资，且系统仅模拟交易决策，不进行实际交易。\n\n## 系统架构：多智能体协作\n\n该系统由多个智能体协同工作，分为投资理念智能体和功能性智能体。\n\n### 投资理念智能体（模拟著名投资者）\n\n*   **Aswath Damodaran 智能体**：估值领域的权威，专注于故事、数据和严谨的估值。\n*   **Ben Graham 智能体**：价值投资之父，只购买具有安全边际的隐藏瑰宝。\n*   **Bill Ackman 智能体**：激进投资者，采取大胆立场并推动变革。\n*   **Cathie Wood 智能体**：成长投资女王，坚信创新和颠覆的力量。\n*   **Charlie Munger 智能体**：沃伦·巴菲特的合伙人，只以合理价格购买优秀企业。\n*   **Michael Burry 智能体**：电影《大空头》中的逆向投资者，寻找深度价值。\n*   **Peter Lynch 智能体**：实用投资者，在日常业务中寻找“十倍股”。\n*   **Phil Fisher 智能体**：细致的成长投资者，运用深入的“耳语”研究。\n*   **Stanley Druckenmiller 智能体**：宏观投资传奇，寻找具有增长潜力的非对称机会。\n*   **Warren Buffett 智能体**：奥马哈的先知，寻找价格公允的优秀公司。\n\n### 功能性智能体\n\n*   **估值智能体**：计算股票的内在价值并生成交易信号。\n*   **情绪智能体**：分析市场情绪并生成交易信号。\n*   **基本面智能体**：分析基本面数据并生成交易信号。\n*   **技术面智能体**：分析技术指标并生成交易信号。\n*   **风险管理器**：计算风险指标并设置头寸限制。\n*   **投资组合管理器**：做出最终交易决策并生成订单。\n\n## 系统截图\n\n*   **系统运行界面**\n    ![Screenshot 2025-03-22 at 6 19 07 PM](https://private-user-images.githubusercontent.com/901795/425765974-cbae3dcf-b571-490d-b0ad-3f0f035ac0d4.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDg0OTEzMTAsIm5iZiI6MTc0ODQ5MTAxMCwicGF0aCI6Ii85MDE3OTUvNDI1NzY1OTc0LWNiYWUzZGNmLWJmNzEtNDkwZC1iMGFkLTNmMGYwMzVhYzBkNC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNTI5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDUyOVQwMzU2NTBaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT05YTJkYTM1YTQ1OTA3NWVlMzRlMWUwMzc0NTdlYWQ2NGMyZTBlZDg0OGZmNmIxZDc3MjY2YzA1ZmY4YzU4Mjg4JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.Lb2VtMB4U0_S0dGP7JpZMgAM8ShCR-gvSmp85sCvwPg)\n*   **Twitter 关注按钮**\n    ![Twitter Follow](https://camo.githubusercontent.com/f99294920342324adc542cb046a01c7b4ff376a4719817f920af5bce71d24f65/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f766972617474743f7374796c653d736f6369616c)\n*   **运行对冲基金示例输出**\n    ![Screenshot 2025-01-06 at 5 50 17 PM](https://private-user-images.githubusercontent.com/901795/400576829-e8ca04bf-9989-4a7d-a8b4-34e04666663b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImkeyIjoia2V5NSIsImV4cCI6MTc0ODQ5MTMxMCwibmJmIjoxNzQ4NDkxMDEwLCJwYXRoIjoiLzkwMTc5NS80MDA1NzY4MjktZThjYTA0YmYtOTk4OS00YTdkLWE4YjQtMzRlMDQ2NjY2NjNiLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFE0WkElMkYyMDI1MDUyOSUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTA1MjlUMDM1NjUwWiZYLUFtYnotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWM0M2E2NTMyODA1MDdhMzA1ZGMxYWE1ZmVjMTgwM2QyNmU4MzNlNGU5ZWQ4YjgzY2FmOWNmMGNkZDg5OGU4OTImWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.uU8DQ0QsZX26q7AcT6pQsE48dJW17DgC8DcXfD2FdVA)\n*   **运行回测器示例输出**\n    ![Screenshot 2025-01-06 at 5 47 52 PM](https://private-user-images.githubusercontent.com/901795/400576351-00e794ea-8628-44e6-9a84-8f8a31ad3b47.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDg0OTEzMTAsIm5iZiI6MTc0ODQ5MTAxMCwicGF0aCI6Ii85MDE3OTUvNDAwNTc2MzUxLTAwZTc5NGVhLTg2MjgtNDRlNi05YTg0LThmOGEzMWFkM2I0Ny5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNTI5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDUyOVQwMzU2NTBaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zZWE4MmFhNzEzMmEwOWJhY2QwZWRiMDEzYTk0NDM4ODFkNjZlZWU5NDA1MWEwZDhhOTI2ZTMyMzUxNTlmYWUyJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.nn-LltscpcvM257qUtnwzIk-b0OrAf6qa-9HB9CJuPc)\n\n## 免责声明\n\n本项目仅用于教育和研究目的，不构成任何投资建议，也不提供任何投资保证。项目创建者不承担任何财务损失的责任。在做出任何投资决策之前，请务必咨询专业的财务顾问。请注意，过往表现不预示未来结果。使用本软件即表示您同意仅将其用于学习目的。\n\n## 安装与使用指南\n\n### 安装方式\n\n1.  **使用 Poetry**\n    *   克隆仓库：`git clone https://github.com/virattt/ai-hedge-fund.git`\n    *   进入目录：`cd ai-hedge-fund`\n    *   安装 Poetry (如果未安装)：`curl -sSL https://install.python-poetry.org | python3 -`\n    *   安装依赖：`poetry install`\n    *   设置环境变量：复制 `.env.example` 到 `.env`，并填入您的API密钥。\n2.  **使用 Docker**\n    *   确保系统已安装 Docker。\n    *   克隆仓库：`git clone https://github.com/virattt/ai-hedge-fund.git`\n    *   进入目录：`cd ai-hedge-fund`\n    *   设置环境变量：复制 `.env.example` 到 `.env`，并填入您的API密钥。\n    *   构建 Docker 镜像：`./run.sh build` (Linux/Mac) 或 `run.bat build` (Windows)。\n\n### API 密钥要求\n\n*   运行对冲基金需要至少一个LLM提供商的API密钥，例如 `OPENAI_API_KEY`, `GROQ_API_KEY`, `ANTHROPIC_API_KEY`, 或 `DEEPSEEK_API_KEY`。\n*   对于 AAPL, GOOGL, MSFT, NVDA, TSLA 的财务数据是免费的。查询其他股票数据需要设置 `FINANCIAL_DATASETS_API_KEY`。\n\n### 运行对冲基金\n\n*   **使用 Poetry：** `poetry run python src/main.py --ticker AAPL,MSFT,NVDA`\n*   **使用 Docker (Linux/Mac)：** `./run.sh --ticker AAPL,MSFT,NVDA main`\n*   **使用 Docker (Windows)：** `run.bat --ticker AAPL,MSFT,NVDA main`\n*   **可选参数：**\n    *   `--ollama`：使用本地LLM运行。\n    *   `--show-reasoning`：在控制台打印每个智能体的推理过程。\n    *   `--start-date YYYY-MM-DD --end-date YYYY-MM-DD`：指定决策的时间段。\n\n### 运行回测器\n\n*   **使用 Poetry：** `poetry run python src/backtester.py --ticker AAPL,MSFT,NVDA`\n*   **使用 Docker (Linux/Mac)：** `./run.sh --ticker AAPL,MSFT,NVDA backtest`\n*   **使用 Docker (Windows)：** `run.bat --ticker AAPL,MSFT,NVDA backtest`\n*   **可选参数：**\n    *   `--start-date YYYY-MM-DD --end-date YYYY-MM-DD`：指定回测的时间段。\n    *   `--ollama`：使用本地LLM运行回测。\n\n## 项目结构\n\n项目目录 `ai-hedge-fund/` 包含：\n*   `src/agents/`：智能体定义和工作流程，包括各种投资理念智能体（如 `bill_ackman.py`, `warren_buffett.py`）和功能性智能体（如 `fundamentals.py`, `portfolio_manager.py`）。\n*   `src/tools/`：智能体工具，如 `api.py`。\n*   `src/backtester.py`：回测工具。\n*   `src/main.py`：主入口点。\n\n## 贡献与许可\n\n*   **贡献**：欢迎通过 Fork 仓库、创建功能分支、提交更改并提交拉取请求来贡献。请保持拉取请求小而集中。\n*   **功能请求**：如有功能请求，请提交一个 issue 并标记为 `enhancement`。\n*   **许可**：本项目采用 MIT 许可证。",
      "shortSummary": "AI对冲基金是一个概念验证项目，旨在探索AI在交易决策中的应用。该系统通过模拟多位著名投资者的策略（如巴菲特、格雷厄姆）和功能性智能体（估值、情绪、基本面、技术面、风险管理、投资组合管理）协同工作。项目仅用于教育和研究，不进行实际交易，也不提供投资建议。用户可通过Poetry或Docker进行安装和运行，并支持本地LLM或指定回测日期。",
      "translated_title": "AI对冲基金",
      "images": [
        {
          "url": "https://private-user-images.githubusercontent.com/901795/425765974-cbae3dcf-b571-490d-b0ad-3f0f035ac0d4.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDg0OTEzMTAsIm5iZiI6MTc0ODQ5MTAxMCwicGF0aCI6Ii85MDE3OTUvNDI1NzY1OTc0LWNiYWUzZGNmLWI1NzEtNDkwZC1iMGFkLTNmMGYwMzVhYzBkNC5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNTI5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDUyOVQwMzU2NTBaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT05YTJkYTM1YTQ1OTA3NWVlMzRlMWUwMzc0NTdlYWQ2NGMyZTBlZDg0OGZmNmIxZDc3MjY2YzA1ZmY4YzU4Mjg4JlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.Lb2VtMB4U0_S0dGP7JpZMgAM8ShCR-gvSmp85sCvwPg",
          "alt": "Screenshot 2025-03-22 at 6 19 07 PM",
          "title": "",
          "position": 1
        },
        {
          "url": "https://camo.githubusercontent.com/f99294920342324adc542cb046a01c7b4ff376a4719817f920af5bce71d24f65/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f766972617474743f7374796c653d736f6369616c",
          "alt": "Twitter Follow",
          "title": "",
          "position": 2
        },
        {
          "url": "https://private-user-images.githubusercontent.com/901795/400576829-e8ca04bf-9989-4a7d-a8b4-34e04666663b.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDg0OTEzMTAsIm5iZiI6MTc0ODQ5MTAxMCwicGF0aCI6Ii85MDE3OTUvNDAwNTc2ODI5LWU4Y2EwNGJmLTk5ODktNGE3ZC1hOGI0LTM0ZTA0NjY2NjYzYi5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNTI5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDUyOVQwMzU2NTBaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1jNDNhNjUzMjgwNTA3YTMwNWRjMWFhNWZlYzE4MDNkMjZlODMzZTRlOWVkOGI4M2NhZjljZjBjZGQ4OThlODkyJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.uU8DQ0QsZX26q7AcT6pQsE48dJW17DgC8DcXfD2FdVA",
          "alt": "Screenshot 2025-01-06 at 5 50 17 PM",
          "title": "",
          "position": 3
        },
        {
          "url": "https://private-user-images.githubusercontent.com/901795/400576351-00e794ea-8628-44e6-9a84-8f8a31ad3b47.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDg0OTEzMTAsIm5iZiI6MTc0ODQ5MTAxMCwicGF0aCI6Ii85MDE3OTUvNDAwNTc2MzUxLTAwZTc5NGVhLTg2MjgtNDRlNi05YTg0LThmOGEzMWFkM2I0Ny5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNTI5JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDUyOVQwMzU2NTBaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT0zZWE4MmFhNzEzMmEwOWJhY2QwZWRiMDEzYTk0NDM4ODFkNjZlZWU5NDA1MWEwZDhhOTI2ZTMyMzUxNTlmYWUyJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.nn-LltscpcvM257qUtnwzIk-b0OrAf6qa-9HB9CJuPc",
          "alt": "Screenshot 2025-01-06 at 5 47 52 PM",
          "title": "",
          "position": 4
        },
        {
          "url": "https://opengraph.githubassets.com/906515d7d6c60aaaf62101a5820fceede9eb7c0eb10063f11aaf40582a44abca/virattt/ai-hedge-fund",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/c4723591ffa90154f61dce3513a72ed2177ea18df2dcefd5950bad2e2ed5cbea/virattt/ai-hedge-fund\" referrerpolicy=\"no-referrer\"><br>An AI Hedge Fund Team <br><br>Language: Python <br>Stars: 33658 <br>Forks: 5812"
    },
    {
      "title": "bilibili/Index-AniSora (原标题: bilibili/Index-anisora)",
      "link": "https://github.com/bilibili/Index-anisora",
      "pubDate": "",
      "isoDate": "",
      "creator": "bilibili",
      "summary": "# Index-AniSora：终极开源动漫视频生成模型\n\n![Index-AniSora 图标](https://github.com/bilibili/Index-anisora/raw/main/assets/index_icon.png)\n\nIndex-AniSora 是哔哩哔哩（Bilibili）向动漫世界献上的一份礼物，旨在成为功能最强大的开源动漫视频生成模型。它支持一键生成多种动漫风格的视频片段，包括剧集、中国原创动画、漫画改编、VTuber 内容、动漫PV、鬼畜动画等。\n\n该项目基于哔哩哔哩被 IJCAI'25 接收的论文《AniSora: Exploring the Frontiers of Animation Video Generation in the Sora Era》。\n\n## 最新进展\n\n*   **2025/05/12**：所有构建内容已开源。\n*   **2025/05/10**：论文已被 IJCAI'25 接收，最终版本已更新。\n*   **2024/12/19**：论文已提交至 arXiv，项目及评估基准已发布。如需访问基准、AniSoraV2.0 权重或基准上所有由 AniSoraV1 和 AniSoraV2 生成的视频，需填写表格并以 PDF 格式发送至指定邮箱（jiangyudong@bilibili.com / yangsiqian@bilibili.com / xubaohan@bilibili.com），并手写签名及所属公司/学术机构名称。\n\n## 项目指南\n\n### AniSoraV1.0\n\n*   **基础模型**：基于 CogVideoX-5B 基础模型训练。\n*   **代码发布**：完整训练和推理代码已发布（位于 `anisoraV1_infer` 和 `anisoraV1_train_npu` 文件夹）。\n*   **核心功能**：\n    *   视频控制的局部区域引导。\n    *   时间引导（首帧/尾帧引导、关键帧插值、多帧引导）。\n*   **部署与应用**：可在 RTX 4090 上进行经济高效的部署，覆盖 80% 的应用场景。\n\n### AniSoraV2.0\n\n*   **基础模型**：由增强型 Wan2.1-14B 基础模型驱动，提供卓越稳定性。\n*   **推理优化**：通过蒸馏加速推理，在不牺牲质量的前提下实现更快、更低的成本。\n*   **代码发布**：完整训练和推理代码已发布（位于 `anisoraV2_gpu` 和 `anisoraV2_npu` 文件夹）。\n*   **硬件支持**：原生支持华为昇腾 910B NPU（完全在国内芯片上训练）。\n*   **应用范围**：高质量视频片段生成，覆盖 90% 的应用场景。\n\n### 生态系统工具\n\n*   **数据处理管线 (`data_pipeline`)**：端到端数据集管线，用于快速扩展训练数据，包含动画数据清洗管线。\n*   **动漫优化基准系统 (`reward`)**：\n    *   专为动漫视频生成设计的评估模型和评分算法。\n    *   包含适用于强化学习和基准测试的奖励模型。\n    *   为动画生成量身定制的评估框架。\n    *   符合 ACG 审美标准的标准测试数据集。\n    *   **人类偏好对齐**：基准数据集包含 948 个动画视频片段，按不同动作进行标注。文本提示最初由 Qwen-VL2 生成，后经手动校正以确保文本与视频对齐。\n*   **AniSoraV1.0_RL (`anisora_rl`)**：首个用于动漫视频生成的 RLHF (Reinforcement Learning from Human Feedback) 框架，RL 优化后的 AniSoraV1.0，以增强动漫风格输出。方法论详见预印本论文《Aligning Anime Video Generation with Human Feedback》。\n\n## 待办事项\n\n*   AniSora 数据集：高质量训练集开放申请。\n*   AniSora 基准：更新最新 SOTA 模型性能，提供更多视频演示。\n\n## 摘要（论文）\n\n尽管 Sora、Kling 和 CogVideoX 等先进视频生成模型在生成自然视频方面取得了成功，但它们在处理动画视频时效果不佳，原因在于动画独特的艺术风格、违反物理定律的夸张动作。此外，评估动画视频生成也极具挑战性。\n\n本文提出了一个名为 AniSora 的综合系统，专为动画视频生成设计，包括数据处理管线、可控生成模型和评估数据集。该生成模型在超过 1000 万高质量数据的支持下，整合了时空掩码模块，以实现关键动画制作功能，如图像到视频生成、帧插值和局部图像引导动画。项目还收集了一个包含 948 个不同动画视频的评估基准。在 VBench 和人类双盲测试中的评估结果表明，AniSora 在角色和动作一致性方面表现出色，达到了动画视频生成的最新水平。\n\n## 方法概述\n\nIndex-AniSora 的整体框架如下图所示：\n\n![Index-AniSora 框架图](https://github.com/bilibili/Index-anisora/raw/main/assets/framework.png)\n\n**主要特点**：\n\n*   开发了一个全面的视频处理系统，显著增强了视频生成的前处理能力。\n*   提出了一个统一的动画视频生成框架，包含时空掩码模块，支持图像到视频生成、帧插值和局部图像引导动画等任务。\n*   发布了一个专门用于评估动画视频生成的基准数据集。\n\n## 演示\n\n### 图像生成视频（不同艺术风格）\n\n*   **提示**：图中人物坐在一辆向前行驶的汽车中，向后挥手，头发随风左右摆动。\n    ![初始图片](https://github.com/bilibili/Index-anisora/raw/main/assets/000000(225).png) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/000000(225).gif)\n*   **提示**：场景中，两个身穿红色婚服的人物手持红绳，渐行渐远。\n    ![初始图片](https://github.com/bilibili/Index-anisora/raw/main/assets/000000(223).png) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/000000(223).gif)\n*   **提示**：黄发人物伸手触摸跪着人物的头部，跪着人物的身体随着喘息声起伏。\n    ![初始图片](https://github.com/bilibili/Index-anisora/raw/main/assets/000000(232).png) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/000000(232).gif)\n*   **提示**：画面中，一个人高速向前冲刺，其动作因速度显得略微模糊。\n    ![初始图片](https://github.com/bilibili/Index-anisora/raw/main/assets/image_1.jpg) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/image_1_vid.gif)\n*   **提示**：画面中，角色抬起手臂，气体流清晰可见地沿着其表面流动。\n    ![初始图片](https://github.com/bilibili/Index-anisora/raw/main/assets/image_2.jpg) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/image_2_vid.gif)\n*   **提示**：老人凝视着宝石，右手巧妙地调整着放大镜，嘴唇微动——仿佛它掌握着解开某种古老知识或秘密的关键。\n    ![初始图片](https://github.com/bilibili/Index-anisora/raw/main/assets/image_3.jpg) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/image_3_vid.gif)\n*   **提示**：左边的男人紧抿双唇，脸上刻满了愤怒和决心。他表情的每一条纹路都散发着深刻的沮丧和坚定不移的信念。与此同时，另一个男人的下巴张开——仿佛准备爆发出一声呐喊或激情的宣言。\n    ![初始图片](https://github.com/bilibili/Index-anisora/raw/main/assets/image_4.jpg) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/image_4_vid.gif)\n*   **提示**：场景描绘了一块爆炸的岩石，在刺眼的光芒中爆发，破碎的碎片向四面八方飞散。\n    ![初始图片](https://github.com/bilibili/Index-anisora/raw/main/assets/image_5.jpg) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/image_5_vid.gif)\n\n### 时间控制\n\n*   **提示**：在这段视频中，我们看到了动画电影《美女与野兽》中贝儿和野兽的场景。贝儿，长着金色的头发，站在一个有大窗户的房间里，看着窗外并对着它说话。她穿着一件紫色连衣裙，上身是紫色的……\n    ![首帧](https://github.com/bilibili/Index-anisora/raw/main/assets/cartoon_films_ren_wu_shuo_hua_34_firstmidlast_first.png) ![中帧](https://github.com/bilibili/Index-anisora/raw/main/assets/cartoon_films_ren_wu_shuo_hua_34_firstmidlast_mid.png) ![尾帧](https://github.com/bilibili/Index-anisora/raw/main/assets/cartoon_films_ren_wu_shuo_hua_34_firstmidlast_last.png) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/cartoon_films_ren_wu_shuo_hua_34_firstmidlast.gif)\n*   **提示**：在这段视频中，可以看到一位金发年轻女子在夜晚从车门后向外看。汽车停在星空下，一轮满月照亮了场景。从她的面部表情和握住车门的方式来看，这位女子似乎处于担忧状态。\n    ![首帧](https://github.com/bilibili/Index-anisora/raw/main/assets/motion_comics_tui_la_5_firstlast_first.png) ![尾帧](https://github.com/bilibili/Index-anisora/raw/main/assets/motion_comics_tui_la_5_firstlast_last.jpeg) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/motion_comics_tui_la_5_firstlast.gif)\n*   **提示**：一只卡通猫是这段视频的中心人物，它似乎处于淘气或好奇的状态。猫的眼睛闭着，嘴巴张开，暗示着一个惊喜或期待的时刻……\n    ![尾帧](https://github.com/bilibili/Index-anisora/raw/main/assets/motion_comics_zhi_dong_xi_2_last.jpeg) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/motion_comics_zhi_dong_xi_2_last.gif)\n\n### 空间控制\n\n*   **提示**：在这段充满活力的动画电影《海底总动员》水下场景中，马林和尼莫，两条小丑鱼，在一大块紫色珊瑚附近交谈……\n    ![首帧](https://github.com/bilibili/Index-anisora/raw/main/assets/132.png) ![运动掩码](https://github.com/bilibili/Index-anisora/raw/main/assets/132_mask.png) ![生成视频（含运动掩码可视化）](https://github.com/bilibili/Index-anisora/raw/main/assets/132.gif)\n*   **提示**：同上\n    ![运动掩码](https://github.com/bilibili/Index-anisora/raw/main/assets/133_mask.png) ![生成视频](https://github.com/bilibili/Index-anisora/raw/main/assets/133.gif)\n\n## 评估结果\n\n文章提供了在 VBench 和 AniSora-Benchmark 上的详细评估结果表格，将 AniSora 与 Opensora、Vidu、CogVideoX、MiniMax 等模型进行了比较。AniSora 在多项指标上表现出色，尤其在人类评估和一致性方面达到领先水平。\n\n## 基准数据集\n\n基准数据集包含 948 个收集并标注了不同动作的动画视频片段，每个标签包含 10-30 个视频片段。相应的文本提示最初由 Qwen-VL2 生成，随后经过手动校正以确保文本与视频的对齐。数据集的访问需与哔哩哔哩达成协议。\n\n## 致谢\n\n感谢 CogVideoX、Wan2.1、FasterCache 和 OSS 的宝贵工作。\n\n## 引用\n\n如果您认为我们的工作有帮助，请引用我们的论文：\n\n```\n@article{jiang2024anisora,\n  title={AniSora: Exploring the Frontiers of Animation Video Generation in the Sora Era},\n  author={Yudong Jiang, Baohan Xu, Siqian Yang, Mingyu Yin, Jing Liu, Chao Xu, Siqi Wang, Yidi Wu, Bingwen Zhu, Xinwen Zhang, Xingyu Zheng,Jixuan Xu, Yue Zhang, Jinlong Hou and Huyang Sun},\n  journal={arXiv preprint arXiv:2412.10255},\n  year={2024}\n}\n```",
      "shortSummary": "Index-AniSora是哔哩哔哩推出的开源动漫视频生成模型，旨在实现一键生成多样化动漫风格视频。该项目基于IJCAI'25接收的AniSora论文，提供AniSoraV1.0和V2.0两个版本，后者支持华为昇腾NPU。系统包含数据管线、动漫优化基准和RLHF框架，解决了现有模型在动画生成上的不足。评估结果显示，AniSora在角色和动作一致性方面表现卓越，达到了动画视频生成的最新水平。",
      "translated_title": "bilibili/Index-AniSora",
      "images": [
        {
          "url": "https://github.com/bilibili/Index-anisora/raw/main/assets/index_icon.png",
          "alt": "",
          "title": "",
          "position": 1
        },
        {
          "url": "https://camo.githubusercontent.com/4def0406a82254a737c79ee1a58f19a5e9c3150bdef587182d49a4d676d7fbe2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f41725869762d323431322e31303235352d726564",
          "alt": "",
          "title": "",
          "position": 2
        },
        {
          "url": "https://camo.githubusercontent.com/ec9a6d5f90335bbf164921bf9470911793599d41a083cbf95f1bfcccb5c2484b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f41725869762d323530342e31303034342d726564",
          "alt": "",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.com/bilibili/Index-anisora/raw/main/assets/wechat.png",
          "alt": "",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.com/bilibili/Index-anisora/raw/main/assets/framework.png",
          "alt": "",
          "title": "",
          "position": 5
        },
        {
          "url": "https://github.com/bilibili/Index-anisora/raw/main/assets/000000(225).png",
          "alt": "",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.com/bilibili/Index-anisora/raw/main/assets/000000(225).gif",
          "alt": "Demo",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.com/bilibili/Index-anisora/raw/main/assets/000000(223).png",
          "alt": "",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/9046d7386ae54167a1fed0171a4aaeed09f11fd1f6e605b8daa5d745ac7daacb/bilibili/Index-anisora\" referrerpolicy=\"no-referrer\"><br>null <br><br>Language: Python <br>Stars: 1201 <br>Forks: 51"
    },
    {
      "title": "Appwrite/Appwrite (原标题: appwrite/appwrite)",
      "link": "https://github.com/appwrite/appwrite",
      "pubDate": "",
      "isoDate": "",
      "creator": "appwrite",
      "summary": "# Appwrite 简介\n\nAppwrite 是一个开源的后端平台，专为 Web、移动和 Flutter 应用程序开发而设计。它以一套 Docker 微服务的形式提供端到端后端服务，旨在抽象从零开始构建现代后端 API 的复杂性和重复性，帮助开发者更快地构建安全的应用。Appwrite 强调开发者体验，并支持多种编程语言。\n\n![Appwrite banner, with logo and text saying ](https://github.com/appwrite/appwrite/raw/main/public/images/banner.png)\n*Appwrite 宣传横幅*\n\nAppwrite 被定位为 Firebase 的 100% 开源替代品。\n![Appwrite - 100% open source alternative for Firebase | Product Hunt](https://camo.githubusercontent.com/af681e489bb53340e9ae1e505069d97baea1b82a397ada464498b3e1a513cb32/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f746f702d706f73742d62616467652e7376673f706f73745f69643d333630333135267468656d653d6c6967687426706572696f643d6461696c79)\n*Product Hunt 徽章，显示 Appwrite 是 Firebase 的开源替代品*\n\n![Appwrite project dashboard showing various Appwrite features](https://github.com/appwrite/appwrite/raw/main/public/images/github.png)\n*Appwrite 项目仪表盘，展示各项功能*\n\n## 核心功能 (产品)\n\nAppwrite 提供一系列服务，方便开发者集成到其应用中：\n\n*   **用户认证与管理 (Account & Users)**：管理当前用户认证、会话、设备、登录方式和安全日志。对于后端集成，可管理所有项目用户。\n*   **团队 (Teams)**：将用户分组到团队中，管理团队成员资格、邀请和用户角色。\n*   **数据库 (Databases)**：管理数据库、集合和文档。支持文档的读取、创建、更新、删除以及使用高级过滤器查询文档列表。\n*   **存储 (Storage)**：管理存储文件，支持文件的读取、创建、删除和预览。文件预览可根据应用需求进行操作。所有文件都经过 ClamAV 扫描，并以安全加密的方式存储。\n*   **云函数 (Functions)**：在安全、隔离的环境中执行自定义代码，可根据任何 Appwrite 系统事件手动或通过 CRON 计划触发。\n*   **消息 (Messaging)**：通过 Appwrite 消息服务向用户发送推送通知、电子邮件和短信。\n*   **实时事件 (Realtime)**：监听 Appwrite 服务的实时事件，包括用户、存储、函数、数据库等。\n*   **本地化 (Locale)**：跟踪用户位置并管理应用的本地化数据。\n*   **头像 (Avatars)**：管理用户头像、国家/地区旗帜、浏览器图标和信用卡符号。可从链接或纯文本字符串生成二维码。\n\n## 快速开始\n\n### Appwrite Cloud\n\n最简单的入门方式是注册 Appwrite Cloud。目前 Appwrite Cloud 处于公开测试阶段，可完全免费使用，无需提供信用卡信息。\n\n### 自托管\n\nAppwrite 设计为在容器化环境中运行。您可以在本地使用 Docker Compose 或其他容器编排工具（如 Kubernetes、Docker Swarm 或 Rancher）运行 Appwrite 服务器。\n\n*   **安装要求**：确保机器上已安装 Docker。\n*   **安装命令示例**：\n    *   **Unix**: `docker run -it --rm --volume /var/run/docker.sock:/var/run/docker.sock --volume \"$(pwd)\"/appwrite:/usr/src/code/appwrite:rw --entrypoint=\"install\" appwrite/appwrite:1.7.3`\n    *   **Windows CMD**: `docker run -it --rm ^ --volume //var/run/docker.sock:/var/run/docker.sock ^ --volume \"%cd%\"/appwrite:/usr/src/code/appwrite:rw ^ --entrypoint=\"install\" ^ appwrite/appwrite:1.7.3`\n    *   **PowerShell**: `docker run -it --rm ` --volume /var/run/docker.sock:/var/run/docker.sock ` --volume ${pwd}/appwrite:/usr/src/code/appwrite:rw ` --entrypoint=\"install\" ` appwrite/appwrite:1.7.3`\n*   **访问控制台**：Docker 安装完成后，通过 `http://localhost` 访问 Appwrite 控制台。\n*   **升级**：从旧版本升级时，应使用 Appwrite 迁移工具。\n*   **一键部署**：除了本地运行，还可通过预配置的一键部署方案快速启动 Appwrite，无需在本地安装 Docker。\n\n### 平台集成\n\n通过创建新项目、选择平台并集成其 SDK，即可轻松开始使用 Appwrite。提供了针对各种平台的快速入门教程：\n\n*   **Web 应用**：Web、Next.js、React、Vue.js、Nuxt、SvelteKit、Refine、Angular。\n*   **移动和原生应用**：React Native、Flutter、Apple、Android。\n*   **服务端**：Node.js、Python、.NET、Dart、Ruby、Deno、PHP、Kotlin、Swift。\n\n## SDKs (开发工具包)\n\nAppwrite 提供了多种官方维护的客户端和服务端 SDK，以及社区贡献的 SDK：\n\n*   **客户端 SDKs (Appwrite 团队维护)**：\n    *   Web\n    *   Flutter\n    *   Apple\n    *   Android\n    *   React Native (Beta)\n*   **服务端 SDKs (Appwrite 团队维护)**：\n    *   NodeJS\n    *   PHP\n    *   Dart\n    *   Deno\n    *   Ruby\n    *   Python\n    *   Kotlin\n    *   Swift\n    *   .NET (Beta)\n*   **社区维护 SDKs**：\n    *   Appcelerator Titanium (由 Michael Gangolf 维护)\n    *   Godot Engine (由 fenix-hub @GodotNuts 维护)\n\n## 架构\n\nAppwrite 采用微服务架构，旨在实现轻松扩展和职责委派。它支持 REST、WebSocket 和 GraphQL 等多种 API，允许开发者利用现有知识和首选协议与资源进行交互。\n\n![Appwrite Architecture showing how Appwrite is built and the services and tools it uses](https://github.com/appwrite/appwrite/raw/main/docs/specs/overview.drawio.svg)\n*Appwrite 架构图*\n\nAppwrite 的 API 层通过利用内存缓存和将繁重任务委托给后台工作者来确保极快的速度。后台工作者还允许通过消息队列处理负载，从而精确控制计算容量和成本。\n\n## 社区与贡献\n\nAppwrite 拥有一个不断壮大的全球社区。\n\n*   **活动**：可参与 5 月 19 日的 Init kick off event，了解 Appwrite 创始人兼 CEO Eldad Fux 展望的未来。\n*   **参与方式**：\n    *   关注官方博客。\n    *   在 X (Twitter)、LinkedIn、Dev Community 上关注。\n    *   加入 Discord 服务器获取帮助、交流想法和讨论。\n    *   欢迎贡献代码，所有代码贡献都需通过拉取请求并经核心开发者批准。\n*   **安全**：如遇安全问题，请发送邮件至 `security@appwrite.io`，而非在 GitHub 上公开提出。\n\n## 许可证\n\nAppwrite 项目采用 BSD 3-Clause 许可证。",
      "shortSummary": "Appwrite是一个开源的后端平台，以Docker微服务形式提供，旨在简化Web、移动和Flutter应用的后端开发。它提供用户认证、数据库、存储、云函数、消息、实时事件等核心服务。用户可通过Appwrite Cloud或自托管（支持Docker）快速开始。Appwrite采用微服务架构，支持多种SDK和API，提升开发效率和应用安全性，并拥有活跃的开源社区。",
      "translated_title": "Appwrite/Appwrite",
      "images": [
        {
          "url": "https://github.com/appwrite/appwrite/raw/main/public/images/banner.png",
          "alt": "Appwrite banner, with logo and text saying ",
          "title": "",
          "position": 1
        },
        {
          "url": "https://camo.githubusercontent.com/7998eebcac68b3bf03406f767e63f2bfd53602055710fc7992fcbe53be858f82/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d5765277265266d6573736167653d486972696e6726636f6c6f723d626c7565267374796c653d666c61742d737175617265",
          "alt": "We're Hiring label",
          "title": "",
          "position": 2
        },
        {
          "url": "https://camo.githubusercontent.com/8f64260db76689fdeaa49873bb206084e9ab4315bac5987981fd4de0bcc68755/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f6c6162656c3d6861636b746f62657266657374266d6573736167653d726561647926636f6c6f723d313931313230267374796c653d666c61742d737175617265",
          "alt": "Hacktoberfest label",
          "title": "",
          "position": 3
        },
        {
          "url": "https://camo.githubusercontent.com/b8c0390d9a9a77bd0d7847609f823ea8d87f88f0480a38d2ff5a154e04fce7b9/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3536343136303733303834353135313234343f6c6162656c3d646973636f7264267374796c653d666c61742d737175617265",
          "alt": "Discord label",
          "title": "",
          "position": 4
        },
        {
          "url": "https://camo.githubusercontent.com/578da1e49d0a4be2db0a1effbc5075df81ea47acc1cdf6e5dd20efe3bc031013/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f616374696f6e732f776f726b666c6f772f7374617475732f61707077726974652f61707077726974652f74657374732e796d6c3f6272616e63683d6d6173746572266c6162656c3d7465737473267374796c653d666c61742d737175617265",
          "alt": "Build Status label",
          "title": "",
          "position": 5
        },
        {
          "url": "https://camo.githubusercontent.com/c98e86eb6fc99f0f89267d1e8ab4ae8ff5b0306ba8f0b06d7196bf4d75b3a469/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f61707077726974653f636f6c6f723d303061636565266c6162656c3d74776974746572267374796c653d666c61742d737175617265",
          "alt": "X Account label",
          "title": "",
          "position": 6
        },
        {
          "url": "https://camo.githubusercontent.com/af681e489bb53340e9ae1e505069d97baea1b82a397ada464498b3e1a513cb32/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f746f702d706f73742d62616467652e7376673f706f73745f69643d333630333135267468656d653d6c6967687426706572696f643d6461696c79",
          "alt": "Appwrite - 100% open source alternative for Firebase | Product Hunt",
          "title": "",
          "position": 7
        },
        {
          "url": "https://github.com/appwrite/appwrite/raw/main/public/images/github.png",
          "alt": "Appwrite project dashboard showing various Appwrite features",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/67984fcce5a9d6a5e29a65524161ede5de48d39862e772e6a7cba79a0c76491a/appwrite/appwrite\" referrerpolicy=\"no-referrer\"><br>Build like a team of hundreds_ <br><br>Language: TypeScript <br>Stars: 50486 <br>Forks: 4415"
    },
    {
      "title": "微软/Qlib (原标题: microsoft/qlib)",
      "link": "https://github.com/microsoft/qlib",
      "pubDate": "",
      "isoDate": "",
      "creator": "microsoft",
      "summary": "## Qlib 简介\n\nQlib 是微软开源的、面向 AI 的量化投资平台，旨在利用人工智能技术在量化投资领域实现潜力、赋能研究并创造价值，涵盖从理念探索到生产实施的全过程。它支持多种机器学习建模范式，包括监督学习、市场动态建模和强化学习。\n\nQlib 整合了越来越多的前沿量化研究成果和论文，以协同解决量化投资中的关键挑战。例如，它利用监督学习从丰富异构的金融数据中挖掘复杂的非线性模式，通过自适应概念漂移技术对金融市场的动态性质进行建模，并使用强化学习来模拟连续投资决策，协助投资者优化其交易策略。\n\n该平台包含完整的数据处理、模型训练和回测机器学习管道，并覆盖量化投资的整个链条：Alpha 挖掘、风险建模、投资组合优化和订单执行。更多详情可参考论文《Qlib: An AI-oriented Quantitative Investment Platform》。\n\n![Qlib Logo](https://github.com/microsoft/qlib/raw/main/docs/_static/img/logo/1.png)\n\n### 项目状态概览\n\n*   ![Python Versions](https://camo.githubusercontent.com/8e2506847d605f059fdccee7f3ceb585a2bc812609f59848478f66fec378fc0c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079716c69622e7376673f6c6f676o3d707974686f6e266c6f676f436f6c6f723d7768697465)\n*   ![Platform](https://camo.githubusercontent.com/17a703642b6cbf23c2a06cc865046080122aab901adcf2a1a7abe9b584e7bf7e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d6c696e757825323025374325323077696e646f77732532302537432532306d61636f732d6c6967687467726579)\n*   ![PypI Versions](https://camo.githubusercontent.com/c4cae6d7ab5738fbd331681f29f4f6e9e36e46e78b3acde305f8ef61f221e6cc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079716c6962)\n*   ![Upload Python Package](https://github.com/microsoft/qlib/workflows/Upload%20Python%20Package/badge.svg)\n*   ![Github Actions Test Status](https://github.com/microsoft/qlib/workflows/Test/badge.svg?branch=main)\n*   ![Documentation Status](https://camo.githubusercontent.com/a37897f7f3b4b8cc1bbf01a9b51790ea4a65c6885eaaa44ddc633deabcd04fbb/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f716c69622f62616467652f3f76657273696f6e3d6c6174657374)\n*   ![License](https://camo.githubusercontent.com/ea489b0041f4e29fdbf4f102d4a83388f503f983cfd18f1c5168d6173616004e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7079716c6962)\n*   ![Join the chat at https://gitter.im/Microsoft/qlib](https://camo.githubusercontent.com/0de87e760f6692b272dc4ffaf7cee7988015c443f4f68a8cfb9b4b964cd7e9e5/68747470733a2f2f6261646765732e6769747465722e696d2f4d6963726f736f66742f716c69622e737667)\n\n## 最新发布与特性\n\n### RD-Agent\n\nQlib 近期发布了 RD-Agent，这是一个基于大型语言模型（LLM）的自主进化代理，专为工业数据驱动的研发设计。它是一个强大的工具，支持量化投资研发中的自动化因子挖掘和模型优化。\n\n*   **功能**: 支持自动化因子挖掘和模型优化。\n*   **演示**: 提供英文和中文的场景、量化因子挖掘和量化模型优化演示视频。\n*   **论文**: 《R&D-Agent-Quant: A Multi-Agent Framework for Data-Centric Factors and Model Joint Optimization》。\n*   **代码**: `https://github.com/microsoft/RD-Agent/`。\n\n![RD_Agent](https://github.com/microsoft/qlib/raw/main/docs/_static/img/rdagent_logo.png)\n\n### 其他重要发布\n\n*   **LLM驱动的自动量化工厂**: 于2024年8月8日在 RD-Agent 中发布。\n*   **KRNN 和 Sandwich 模型**: 于2023年5月26日发布。\n*   **Qlib v0.9.0**: 于2022年12月9日发布。![octocat emoji](https://github.githubassets.com/images/icons/emoji/octocat.png)\n*   **强化学习框架**: 于2022年11月10日发布。\n*   **HIST 和 IGMTF 模型**: 于2022年4月10日发布。\n*   **Qlib Notebook 教程**: 于2022年4月7日发布。\n*   **Ibovespa 指数数据**: 于2022年4月6日发布。\n*   **时间点数据库**: 于2022年3月10日发布。\n*   **Arctic Provider 后端与订单簿数据示例**: 于2022年1月17日发布。\n*   **元学习框架与 DDG-DA**: 于2022年1月10日发布。\n*   **基于规划的投资组合优化**: 于2021年12月28日发布。\n*   **Qlib v0.8.0**: 于2021年12月8日发布。![octocat emoji](https://github.githubassets.com/images/icons/emoji/octocat.png)\n*   **ADD 模型**: 于2021年11月22日发布。\n*   **ADARNN 模型**: 于2021年11月14日发布。\n*   **TCN 模型**: 于2021年11月4日发布。\n*   **嵌套决策框架**: 于2021年10月1日发布。\n*   **时序路由适配器 (TRA)**: 于2021年7月30日发布。\n*   **Transformer & Localformer**: 于2021年7月22日发布。\n*   **Qlib v0.7.0**: 于2021年7月12日发布。![octocat emoji](https://github.githubassets.com/images/icons/emoji/octocat.png)\n*   **TCTS 模型**: 于2021年7月1日发布。\n*   **在线服务与自动模型滚动**: 于2021年5月17日发布。\n*   **DoubleEnsemble 模型**: 于2021年3月2日发布。\n*   **高频数据处理示例**: 于2021年2月5日发布。\n*   **高频交易示例**: 部分代码于2021年1月28日发布。\n*   **高频数据 (1分钟)**: 于2021年1月27日发布。\n*   **Tabnet 模型**: 于2021年1月22日发布。\n\n## Qlib 框架结构\n\nQlib 的高层框架设计如下。其组件被设计为松耦合模块，每个组件都可以独立使用。Qlib 为量化研究提供了强大的基础设施。\n\n![Qlib 框架抽象图](https://github.com/microsoft/qlib/raw/main/docs/_static/img/framework-abstract.jpg)\n\n*   **数据**: 数据是重要的组成部分。\n*   **学习框架**: 设计了强大的学习框架，支持多种学习范式（如强化学习、监督学习）和不同层面的模式（如市场动态建模）。\n*   **交易策略**: 通过对市场建模，交易策略将生成交易决策，这些决策将被执行。多层级或粒度的交易策略和执行器可以嵌套在一起进行优化和运行。\n*   **分析与服务**: 最后，将提供全面的分析，并且模型可以低成本地在线提供服务。\n\n## 快速入门指南\n\nQlib 旨在让用户轻松构建完整的量化研究工作流并尝试其想法。即使使用公开数据和简单模型，机器学习技术在实际量化投资中也能表现出色。\n\n### 安装\n\n*   **支持的 Python 版本**: Qlib 支持 Python 3.8、3.9、3.10、3.11 和 3.12。\n*   **环境管理**: 建议使用 Conda 管理 Python 环境，以避免潜在的头文件缺失问题。\n*   **通过 pip 安装**: 运行 `pip install pyqlib` 可安装最新稳定版。\n*   **从源代码安装**: 用户可以克隆仓库并运行 `pip install .` 来安装最新的开发版本。在此之前，需要安装 `numpy` 和 `cython`。\n*   **Mac M1 提示**: Mac M1 用户在构建 LightGBM 时可能遇到问题，可通过 `brew install libomp` 解决。\n\n### 数据准备\n\n*   **数据源状态**: 官方数据集因数据安全政策暂时禁用。用户可尝试社区贡献的数据源，例如通过 `wget` 下载 `qlib_bin.tar.gz`。\n*   **获取数据**: 提供脚本用于获取日线 (`1d`) 和1分钟 (`1min`) 数据，可从 Qlib 模块或源代码运行。\n*   **数据质量**: 数据来源于 Yahoo Finance，可能不完美，建议用户准备自己的高质量数据集。\n*   **数据更新**: 支持日频数据的自动更新（通过 Linux crontab）和手动更新。请注意，无法基于 Qlib 提供的离线数据进行增量更新，建议使用 Yahoo 收集器从头下载并增量更新。\n*   **数据健康检查**: 提供脚本 `scripts/check_data_health.py` 用于检查数据健康状况。\n\n### Docker 镜像\n\nQlib 提供预构建的 Docker 镜像，方便用户快速部署和运行。\n\n*   **拉取镜像**: `docker pull pyqlib/qlib_image_stable:stable`。\n*   **运行容器**: `docker run -it --name <容器名称> -v <本地挂载目录>:/app qlib_image_stable`。\n*   **容器操作**: 提供退出、重启、停止和删除容器的命令。",
      "shortSummary": "微软Qlib是一个开源的、AI驱动的量化投资平台，旨在利用AI技术赋能量化研究，涵盖从数据处理、模型训练到回测的全ML流程，以及Alpha挖掘、风险建模、投资组合优化和订单执行等量化投资链条。平台支持监督学习、市场动态建模和强化学习等多种范式。最新特性包括基于LLM的RD-Agent，用于自动化因子挖掘和模型优化。Qlib提供模块化框架、便捷的安装与数据准备指南，并支持Docker部署，帮助用户快速构建和验证量化投资策略。",
      "translated_title": "微软/Qlib",
      "images": [
        {
          "url": "https://camo.githubusercontent.com/8e2506847d605f059fdccee7f3ceb585a2bc812609f59848478f66fec378fc0c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079716c69622e7376673f6c6f676f3d707974686f6e266c6f676f436f6c6f723d7768697465",
          "alt": "Python Versions",
          "title": "",
          "position": 1
        },
        {
          "url": "https://camo.githubusercontent.com/17a703642b6cbf23c2a06cc865046080122aab901adcf2a1a7abe9b584e7bf7e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d6c696e757825323025374325323077696e646f77732532302537432532306d61636f732d6c6967687467726579",
          "alt": "Platform",
          "title": "",
          "position": 2
        },
        {
          "url": "https://camo.githubusercontent.com/c4cae6d7ab5738fbd331681f29f4f6e9e36e46e78b3acde305f8ef61f221e6cc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079716c6962",
          "alt": "PypI Versions",
          "title": "",
          "position": 3
        },
        {
          "url": "https://github.com/microsoft/qlib/workflows/Upload%20Python%20Package/badge.svg",
          "alt": "Upload Python Package",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.com/microsoft/qlib/workflows/Test/badge.svg?branch=main",
          "alt": "Github Actions Test Status",
          "title": "",
          "position": 5
        },
        {
          "url": "https://camo.githubusercontent.com/a37897f7f3b4b8cc1bbf01a9b51790ea4a65c6885eaaa44ddc633deabcd04fbb/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f716c69622f62616467652f3f76657273696f6e3d6c6174657374",
          "alt": "Documentation Status",
          "title": "",
          "position": 6
        },
        {
          "url": "https://camo.githubusercontent.com/ea489b0041f4e29fdbf4f102d4a83388f503f983cfd18f1c5168d6173616004e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7079716c6962",
          "alt": "License",
          "title": "",
          "position": 7
        },
        {
          "url": "https://camo.githubusercontent.com/0de87e760f6692b272dc4ffaf7cee7988015c443f4f68a8cfb9b4b964cd7e9e5/68747470733a2f2f6261646765732e6769747465722e696d2f4d6963726f736f66742f716c69622e737667",
          "alt": "Join the chat at https://gitter.im/Microsoft/qlib",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/21cd7ecb83e9de6b2ac7069f04ddec48f8be109a39e15326a3644b6fff1296be/microsoft/qlib\" referrerpolicy=\"no-referrer\"><br>Qlib is an AI-oriented Quant investment platform that aims to use AI tech to empower Quant Research, from exploring ideas to implementing productions. Qlib supports diverse ML modeling paradigms, including supervised learning, market dynamics modeling, and RL, and is now equipped with https://github.com/microsoft/RD-Agent to automate R&amp;D process. <br><br>Language: Python <br>Stars: 29870 <br>Forks: 4616"
    },
    {
      "title": "MindsDB/MindsDB (原标题: mindsdb/mindsdb)",
      "link": "https://github.com/mindsdb/mindsdb",
      "pubDate": "",
      "isoDate": "",
      "creator": "mindsdb",
      "summary": "# MindsDB：跨大规模数据源获取高精度答案的AI平台\n\nMindsDB 是一个强大的平台，旨在帮助人类、AI、代理和应用程序从分散和大规模的数据源中获取高精度的答案。它内置了一个 MCP（Model Context Protocol）服务器，使得 MCP 应用程序能够连接、统一并响应来自各种联邦数据的查询，这些数据可能分布在数据库、数据仓库和 SaaS 应用程序中。\n\n![MindsDB 核心功能示意图](https://private-user-images.githubusercontent.com/5898506/447962350-a796276a-2d3e-4aa2-9a52-25bf44cf32e7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDg1OTc3NjMsIm5iZiI6MTc0ODU5NzQ2MywicGF0aCI6Ii81ODk4NTA2LzQ0Nzk2MjM1MC1hNzk2Mjc2YS0yZDNlLTRhYTItOWE1Mi0yNWJmNDRjZjMyZTcucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDUzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTA1MzBUMDkzMTAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODFhMTYzZWJiNDY4YWY2YjkxNjhiMzYyMGQ4MzI0YzQ4NWI4MGRlYWUxN2Q2YzViYjcyOWI4ZDMyMmU1MWVhMyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.wZK_pijGUwW21G4Hl7ElXPK0dHs3G5h9zBSIOAcDEk8)\n\n## MindsDB 演示\n\nMindsDB 提供了一个在线演示平台，用户可以通过它体验 MindsDB 在回答结构化和非结构化数据问题方面的强大能力，无论数据分散在 SaaS 应用程序、数据库还是数据仓库中。\n\n## 安装 MindsDB 服务器\n\nMindsDB 是一个开源服务器，可以部署在任何地方，从个人笔记本电脑到云端，并且支持高度定制化。有多种安装方式：\n\n*   **使用 Docker Desktop：** 最快且推荐的入门方式。\n*   **使用 Docker：** 提供更多灵活性，便于进一步定制服务器。\n*   **使用 PyPI：** 适合希望为 MindsDB 贡献代码的用户。\n\n## 核心理念：连接、统一、响应\n\nMindsDB 的架构围绕三个基本能力构建：\n\n### 1. 连接您的数据 (Connect Your Data)\n\nMindsDB 可以连接到数百种企业数据源，这些集成是其所有其他能力的基础，使其能够访问数据无论其位于何处。\n\n### 2. 统一您的数据 (Unify Your Data)\n\n一旦连接，这些数据源可以使用完整的 SQL 方言进行查询，就好像它们是单个数据库的一部分。MindsDB 的联邦查询引擎会翻译 SQL 查询并在适当的连接数据源上执行。为了在处理大量数据源时更好地准备和统一数据，MindsDB SQL 提供了虚拟表：\n\n*   **VIEWS (视图)：** 通过在不同源之间创建统一视图来简化数据访问，无需 ETL 过程。\n*   **KNOWLEDGE BASES (知识库)：** 索引和组织非结构化数据，实现高效检索。\n*   **ML MODELS (机器学习模型)：** 应用 AI/ML 转换，从数据中获取洞察。\n\n数据的统一过程可以通过 **JOBS (任务)** 自动化，用于调度同步和转换任务，实现实时处理。\n\n### 3. 从您的数据中响应 (Respond From Your Data)\n\nMindsDB 提供多种方式从统一的数据中获取答案：\n\n*   **AGENTS (代理)：** 配置内置代理，专门用于回答连接和统一数据上的问题。\n*   **MCP (Model Context Protocol)：** 通过 MCP 连接到 MindsDB，实现无缝交互。\n\n## 贡献与支持\n\n### 贡献\n\nMindsDB 欢迎社区贡献。用户可以遵循开发安装指南，查阅贡献指南，并通过提出新问题来分享想法。项目遵守贡献者行为准则，并提供社区奖励和计划。\n\n### 支持\n\n如果发现错误，请在 GitHub 上提交问题。社区支持途径包括：\n\n*   在 Slack 社区提问。\n*   加入 GitHub Discussions。\n*   在 Stack Overflow 上使用 MindsDB 标签发帖。\n\n商业支持可联系 MindsDB 团队。\n\n## 当前贡献者\n\n![MindsDB 当前贡献者](https://camo.githubusercontent.com/85dfd872f1f1143399cea60809adcbe4a2111128a28d957d3c34da58c4a882a4/68747470733a2f2f636f6e7472696275746f72732d696d672e7765622e6170702f696d6167653f7265706f3d6d696e647364622f6d696e64736462)\n\n## 获取更新\n\n加入 Slack 社区以获取最新动态。",
      "shortSummary": "MindsDB是一个开源AI平台，旨在帮助用户从分散的大规模数据源中获取高精度答案。其核心理念是“连接、统一、响应”：连接数百种数据源，通过SQL方言和虚拟表（视图、知识库、ML模型）统一异构数据，并利用内置代理或MCP协议从数据中智能响应。MindsDB服务器可灵活部署，并提供丰富的社区支持和贡献途径。",
      "translated_title": "MindsDB/MindsDB",
      "images": [
        {
          "url": "https://private-user-images.githubusercontent.com/5898506/447962350-a796276a-2d3e-4aa2-9a52-25bf44cf32e7.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDg1OTc3NjMsIm5iZiI6MTc0ODU5NzQ2MywicGF0aCI6Ii81ODk4NTA2LzQ0Nzk2MjM1MC1hNzk2Mjc2YS0yZDNlLTRhYTItOWE1Mi0yNWJmNDRjZjMyZTcucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI1MDUzMCUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNTA1MzBUMDkzMTAzWiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ODFhMTYzZWJiNDY4YWY2YjkxNjhiMzYyMGQ4MzI0YzQ4NWI4MGRlYWUxN2Q2YzViYjcyOWI4ZDMyMmU1MWVhMyZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QifQ.wZK_pijGUwW21G4Hl7ElXPK0dHs3G5h9zBSIOAcDEk8",
          "alt": "image",
          "title": "",
          "position": 1
        },
        {
          "url": "https://camo.githubusercontent.com/85dfd872f1f1143399cea60809adcbe4a2111128a28d957d3c34da58c4a882a4/68747470733a2f2f636f6e7472696275746f72732d696d672e7765622e6170702f696d6167653f7265706f3d6d696e647364622f6d696e64736462",
          "alt": "",
          "title": "",
          "position": 2
        },
        {
          "url": "https://opengraph.githubassets.com/adcc5c396972197822d230778dd04dab0316aac9483356e28ad3a985f68284e8/mindsdb/mindsdb",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/a97575532c70aeb27e1fd6d30bcd829dcbee80a0d816ab234593a341be9ccb44/mindsdb/mindsdb\" referrerpolicy=\"no-referrer\"><br>AI's query engine - Platform for building AI that can answer questions over large scale federated data. - The only MCP Server you'll ever need <br><br>Language: Python <br>Stars: 31487 <br>Forks: 5227"
    },
    {
      "title": "Anthropic/课程 (原标题: anthropics/courses)",
      "link": "https://github.com/anthropics/courses",
      "pubDate": "",
      "isoDate": "",
      "creator": "anthropics",
      "summary": "Anthropic 提供了一系列教育课程，旨在帮助用户学习如何有效使用其API和Claude模型。这些课程托管在一个GitHub仓库中，目前包含五个主要课程，建议按照以下顺序完成：\n\n*   **Anthropic API 基础**：本课程教授使用Claude SDK的基本要素，包括获取API密钥、处理模型参数、编写多模态提示以及流式响应等。\n*   **提示工程交互式教程**：这是一个全面的分步指南，详细介绍了关键的提示工程技术。该教程还提供了一个AWS Workshop版本。\n*   **真实世界提示**：学习如何将提示工程技术融入复杂的实际应用场景中。本课程也提供了一个Google Vertex版本。\n*   **提示评估**：教授如何编写生产级别的提示评估，以衡量提示的质量和效果。\n*   **工具使用**：涵盖了在Claude工作流中成功实现工具使用所需的所有知识。\n\n**重要提示**：为了帮助学生控制API成本，这些课程通常优先使用Anthropic成本最低的模型——Claude 3 Haiku。然而，学生可以根据个人偏好自由选择使用其他Claude模型。",
      "shortSummary": "Anthropic提供了一个包含五个教育课程的GitHub仓库，旨在教授用户如何有效使用其API和Claude模型。课程内容涵盖API基础、提示工程、真实世界提示应用、提示评估以及工具使用。为降低学生API成本，课程推荐使用Claude 3 Haiku模型。",
      "translated_title": "Anthropic/课程",
      "images": [
        {
          "url": "https://opengraph.githubassets.com/c84f4ca27802e514c5068a43aac5b13b4969b228d06fb34daed07268feeeaa21/anthropics/courses",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/9b31d703f2887984aede1d1ed70b4fc232ca4e47570ba8844f79919349590b6d/anthropics/courses\" referrerpolicy=\"no-referrer\"><br>Anthropic's educational courses <br><br>Language: Jupyter Notebook <br>Stars: 15091 <br>Forks: 1283"
    },
    {
      "title": "wg-easy/wg-easy：WireGuard 简易管理工具 (原标题: wg-easy/wg-easy)",
      "link": "https://github.com/wg-easy/wg-easy",
      "pubDate": "",
      "isoDate": "",
      "creator": "wg-easy",
      "summary": "## wg-easy/wg-easy：WireGuard 简易管理工具\n\n![Build & Publish latest Image](https://github.com/wg-easy/wg-easy/actions/workflows/deploy.yml/badge.svg?branch=production) ![Lint](https://github.com/wg-easy/wg-easy/actions/workflows/lint.yml/badge.svg?branch=master) ![GitHub Stars](https://camo.githubusercontent.com/36591fc101198b6b8fb5101471ca039f89037d616ed1ddeccada77ab70e7322f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f77672d656173792f77672d65617379) ![License](https://camo.githubusercontent.com/ba0f1ee22ed06bac1111a2189497d7c0ae4cfc8b73df63bd70eb2f6ab488b538/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f77672d656173792f77672d65617379) ![GitHub Release](https://camo.githubusercontent.com/2cea6f76fede5e3f5482fcfb179f4d40aebd6ba6bae06dad0b1fe5110e010e4d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f77672d656173792f77672d65617379) ![Image Pulls](https://camo.githubusercontent.com/45db7971c280eac1fe9e185b778f3abb7cad09d446669a29bc779e310906f0ba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f696d6167655f70756c6c732d31324d2b2d626c7565)\n\nwg-easy 是在任何 Linux 主机上安装和管理 WireGuard 的最简便方法，它提供了一个集 WireGuard 服务和 Web 用户界面于一体的解决方案。\n\n![wg-easy 截图](https://github.com/wg-easy/wg-easy/raw/master/assets/screenshot.png)\n\n### 主要特性\n\n*   **一体化解决方案**：集成了 WireGuard 服务和直观的 Web 用户界面。\n*   **易用性**：安装简单，操作方便。\n*   **客户端管理**：\n    *   列出、创建、编辑、删除、启用和禁用客户端。\n    *   显示客户端的 QR 码，方便移动设备配置。\n    *   下载客户端的配置文件。\n*   **统计与监控**：\n    *   显示已连接客户端的统计信息。\n    *   为每个连接的客户端提供发送/接收 (Tx/Rx) 流量图表。\n*   **用户体验**：\n    *   支持 Gravatar 头像。\n    *   自动亮/暗模式。\n    *   多语言支持。\n*   **高级功能**：\n    *   一次性链接。\n    *   客户端过期设置。\n    *   支持 Prometheus 指标。\n    *   支持 IPv6。\n    *   支持 CIDR。\n    *   支持双因素认证 (2FA)。\n\n### 快速入门与安装\n\nwg-easy 提供了详细的安装指南，以下是快速启动步骤：\n\n1.  **安装 Docker**：如果尚未安装 Docker，可以通过运行以下命令进行安装：\n    ```bash\n    curl -sSL https://get.docker.com | sh\n    exit\n    ```\n    然后重新登录。\n2.  **运行 WireGuard Easy**：最简单的方式是使用 Docker Compose。下载 `docker-compose.yml` 文件并执行 `sudo docker compose up -d`。\n\n**安全访问**：\n*   建议设置反向代理以从互联网安全访问 Web UI。\n*   不推荐将 `INSECURE` 环境变量设置为 `true`，这仅用于测试目的。\n\n**迁移**：项目提供了从旧版本迁移到新版本的详细指南。\n\n**集成**：支持与 Caddy、Traefik、Podman 和 AdGuard Home 等服务集成。\n\n### 开发与贡献\n\n*   **开发环境要求**：Docker、Node LTS 和启用 corepack 的 Visual Studio Code。\n*   **开发服务器**：通过 `docker pnpm dev` 启动。\n*   **自动导入更新**：在 `src` 目录下运行 `pnpm install`。\n*   **测试 CLI**：通过 `docker pnpm cli:dev` 启动。\n\n### 许可与声明\n\n*   **许可协议**：本项目采用 AGPL-3.0-only 许可。\n*   **免责声明**：本项目不隶属于、不关联、不授权、不认可 Jason A. Donenfeld、ZX2C4 或 Edge Security。\"WireGuard\" 和 \"WireGuard\" 标志是 Jason A. Donenfeld 的注册商标。",
      "shortSummary": "wg-easy 是一个在 Linux 上简便安装和管理 WireGuard 的工具，提供集成的 Web 用户界面。它支持客户端的创建、管理、配置下载、QR 码显示，并提供连接统计和流量图表。此外，还具备多语言、IPv6、2FA、Prometheus 指标等高级功能。安装主要通过 Docker Compose 完成，建议配置反向代理以确保安全访问。项目采用 AGPL-3.0-only 许可，并声明与 WireGuard 官方无关联。",
      "translated_title": "wg-easy/wg-easy：WireGuard 简易管理工具",
      "images": [
        {
          "url": "https://github.com/wg-easy/wg-easy/actions/workflows/deploy.yml/badge.svg?branch=production",
          "alt": "Build & Publish latest Image",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.com/wg-easy/wg-easy/actions/workflows/lint.yml/badge.svg?branch=master",
          "alt": "Lint",
          "title": "",
          "position": 2
        },
        {
          "url": "https://camo.githubusercontent.com/36591fc101198b6b8fb5101471ca039f89037d616ed1ddeccada77ab70e7322f/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f77672d656173792f77672d65617379",
          "alt": "GitHub Stars",
          "title": "",
          "position": 3
        },
        {
          "url": "https://camo.githubusercontent.com/ba0f1ee22ed06bac1111a2189497d7c0ae4cfc8b73df63bd70eb2f6ab488b538/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f77672d656173792f77672d65617379",
          "alt": "License",
          "title": "",
          "position": 4
        },
        {
          "url": "https://camo.githubusercontent.com/2cea6f76fede5e3f5482fcfb179f4d40aebd6ba6bae06dad0b1fe5110e010e4d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f77672d656173792f77672d65617379",
          "alt": "GitHub Release",
          "title": "",
          "position": 5
        },
        {
          "url": "https://camo.githubusercontent.com/45db7971c280eac1fe9e185b778f3abb7cad09d446669a29bc779e310906f0ba/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f696d6167655f70756c6c732d31324d2b2d626c7565",
          "alt": "Image Pulls",
          "title": "",
          "position": 6
        },
        {
          "url": "https://github.com/wg-easy/wg-easy/raw/master/assets/screenshot.png",
          "alt": "",
          "title": "",
          "position": 7
        },
        {
          "url": "https://repository-images.githubusercontent.com/369764441/2b696180-bbea-11eb-9607-694f6d05aa82",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://repository-images.githubusercontent.com/369764441/2b696180-bbea-11eb-9607-694f6d05aa82\" referrerpolicy=\"no-referrer\"><br>The easiest way to run WireGuard VPN + Web-based Admin UI. <br><br>Language: TypeScript <br>Stars: 19609 <br>Forks: 1850"
    },
    {
      "title": "SeleniumBase/SeleniumBase (原标题: seleniumbase/SeleniumBase)",
      "link": "https://github.com/seleniumbase/SeleniumBase",
      "pubDate": "",
      "isoDate": "",
      "creator": "seleniumbase",
      "summary": "# SeleniumBase：一体化浏览器自动化框架\n\nSeleniumBase 是一个专业的浏览器自动化工具包，旨在简化网页测试、网络爬虫、数据抓取和隐身操作。它适用于测试网站、绕过验证码、提高生产力、完成任务以及扩展业务。\n\n## 主要功能与应用场景\n\n*   **一体化框架**：集网页爬取、测试、抓取和隐身模式于一身。\n*   **业务赋能**：帮助用户绕过验证码，提高工作效率，完成自动化任务，并助力业务扩展。\n*   **丰富的示例**：提供超过200个示例脚本，供用户学习和参考。\n*   **隐身模式（UC Mode / CDP Mode）**：专门用于绕过Cloudflare等网站的挑战页面。\n*   **多脚本支持**：大部分脚本可直接通过Python运行，部分脚本利用pytest（SeleniumBase自带的Python单元测试框架）进行测试发现、收集和运行。\n\n## SeleniumBase 与原生 Selenium 的区别\n\nSeleniumBase 在原生 Selenium 的基础上进行了多项改进和增强，使其更易用、更可靠：\n\n*   **框架结构**：\n    *   SeleniumBase 整合了 pytest、pynose 和 behave 等测试运行器，提供有组织的结构、测试发现、执行、状态管理（通过、失败、跳过）以及命令行选项来修改默认设置（如浏览器选择）。\n    *   原生 Selenium 需要用户自行配置命令行选项解析器。\n*   **驱动管理**：\n    *   SeleniumBase 的驱动管理器能更好地控制驱动程序的自动下载，并可指定版本。\n    *   默认情况下，SeleniumBase 会自动下载与浏览器主版本匹配的驱动。\n*   **选择器识别**：\n    *   SeleniumBase 自动识别 CSS 选择器和 XPath，用户无需在命令中明确指定选择器类型。\n*   **方法封装**：\n    *   SeleniumBase 的方法通常在一个调用中执行多项操作。例如，`self.type(selector, text)` 会等待元素可见、可交互、清除文本字段、输入新文本，并可选地按回车/提交。\n    *   原生 Selenium 需要多次方法调用才能完成相同操作。\n*   **超时处理**：\n    *   SeleniumBase 默认设置了超时值，提高了代码的可靠性。\n    *   原生 Selenium 方法默认情况下可能会立即失败。\n    *   SeleniumBase 允许用户轻松更改方法的显式超时值，而原生 Selenium 需要更多代码。\n*   **错误输出与报告**：\n    *   SeleniumBase 在测试失败时提供清晰的错误输出。\n    *   原生 Selenium 的错误信息可能非常混乱。\n    *   SeleniumBase 提供生成仪表板和测试报告的选项，并自动保存失败测试的截图。原生 Selenium 不具备这些开箱即用的功能。\n*   **GUI 工具**：\n    *   包含桌面 GUI 应用程序，如用于 pytest 的 SeleniumBase Commander 和用于 behave 的 SeleniumBase Behave GUI。\n*   **录制与管理**：\n    *   包含 Recorder / Test Generator，用于从手动浏览器操作生成测试。\n    *   提供测试用例管理软件（\"CasePlans\"），用于组织测试和步骤描述。\n*   **数据应用**：\n    *   包含用于构建数据应用的工具（\"ChartMaker\"），可从 Python 生成 JavaScript。\n\n## 编写测试的方式\n\nSeleniumBase 支持多种编写测试脚本的方式：\n\n1.  **使用 `BaseCase` 类继承**：\n    *   适用于 pytest 或 pynose。\n    *   通过继承 `BaseCase` 类来定义测试方法。\n2.  **使用 `SB` 上下文管理器**：\n    *   纯 Python 脚本，无需额外的测试框架。\n    *   通过 `with SB() as sb:` 结构来管理浏览器会话。\n3.  **使用 `Driver` 管理器**：\n    *   纯 Python 脚本，提供了改进版的原生 Selenium 驱动。\n    *   直接实例化 `Driver()` 对象进行操作。\n\n## 安装与使用\n\n### 1. 环境准备\n*   确保 Python 和 Git 已添加到系统 PATH 中。\n*   推荐使用 Python 虚拟环境。\n![支持的Python版本](https://camo.githubusercontent.com/373039a03ea86da270b9f5bd0859435bfa1c4dfbe662a57832db147200610d30/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73656c656e69756d626173652e7376673f636f6c6f723d464143453432)\n\n### 2. 安装 SeleniumBase\n可以通过 PyPI 或 GitHub 安装：\n*   **从 PyPI 安装**：`pip install seleniumbase` (可使用 `--upgrade` 或 `-U` 升级)。\n*   **从 GitHub 克隆安装**：\n    1.  `git clone https://github.com/seleniumbase/SeleniumBase.git`\n    2.  `cd SeleniumBase/`\n    3.  `pip install -e .`\n*   **验证安装**：在命令行输入 `seleniumbase` 或 `sbase`。\n\n### 3. 自动下载 WebDriver\nSeleniumBase 会根据需要自动下载 WebDriver，例如 chromedriver。\n\n## 命令行接口 (CLI)\nSeleniumBase 提供丰富的命令行工具，通过 `seleniumbase [COMMAND] [PARAMETERS]` 或 `sbase [COMMAND] [PARAMETERS]` 调用，例如：`get / install [DRIVER_NAME]`、`methods`、`gui / commander`、`mkrec / codegen`、`translate`、`grid-hub / grid-node` 等。\n\n## 示例展示\n文章提供了多个示例，展示了 SeleniumBase 的强大功能：\n*   **Google 搜索**：演示基本的网页交互和截图功能。\n    ![SeleniumBase Google Search Test](https://camo.githubusercontent.com/53fac6132e4906e4a6613c37f518620d46598ab9a2da96c60b23d4a822ef45e8/68747470733a2f2f73656c656e69756d626173652e6769746875622e696f2f63646e2f6769662f676f6f676c655f7365617263682e676966)\n*   **绕过 Cloudflare 挑战**：展示了其隐身模式的强大能力。\n    ![SeleniumBase Cloudflare Bypass](https://camo.githubusercontent.com/af9fe69b6153dc87346345c05f06bf8f556445f42c163655192ab2f9faa33c22/68747470733a2f2f73656c656e69756d626173652e6769746875622e696f2f6f746865722f63665f7365632e6a7067)\n    ![SeleniumBase GitLab Bypass](https://camo.githubusercontent.com/32908a58f869ad522d54557a26c4023f1893426020eb277ff09a49317f5d8551/68747470733a2f2f73656c656e69756d626173652e6769746875622e696f2f6f746865722f6769746c61625f6279706173732e706e67)\n*   **电商网站测试**：演示了在电商网站上的用户流程测试。\n    ![SeleniumBase E-commerce Test](https://camo.githubusercontent.com/5eb2703c5b4aba54b712283f98b8a4d36d7cd048b90a57113858f3ad645bd1b5/68747470733a2f2f73656c656e69756d626173652e6769746875622e696f2f63646e2f6769662f666173745f737761675f322e676966)\n*   **咖啡购物车验证**：展示了 `--demo` 模式下测试的慢速执行和高亮显示。\n    ![SeleniumBase Coffee Cart Test](https://camo.githubusercontent.com/419d44f405ea40943e250d8b5d4ae5fbcc65eeb2d0b386482b0c9517e1e/68747470733a2f2f73656c656e69756d626173652e6769746875622e696f2f63646e2f6769662f636f666665655f636172742e676966)\n*   **多操作演示**：涵盖了多种交互操作，如输入、点击、选择、拖放等。\n    ![SeleniumBase Multi-action Example](https://camo.githubusercontent.com/9cde8e845dfac16b71f0655e61fa252757fd1a3ccd4ebd29938b860e768aa650/68747470733a2f2f73656c656e69756d626173652e6769746875622e696f2f63646e2f6769662f64656d6f5f706167655f352e676966)",
      "shortSummary": "SeleniumBase 是一款一体化的 Python 浏览器自动化框架，专为网页测试、爬取、抓取和隐身操作设计。它通过简化 API、自动驱动管理、内置报告和 GUI 工具等功能，显著提升了自动化脚本的可靠性和开发效率。相比原生 Selenium，SeleniumBase 提供了更简洁的代码、更清晰的错误输出和更全面的功能，是进行专业级网页自动化任务的理想选择。",
      "translated_title": "SeleniumBase/SeleniumBase",
      "images": [
        {
          "url": "https://camo.githubusercontent.com/a937add1692c5cf6d7620e08e635dd7481d039e3346e477811ff31fdb7b1abed/68747470733a2f2f73656c656e69756d626173652e6769746875622e696f2f63646e2f696d672f73757065725f6c6f676f5f7362332e706e67",
          "alt": "SeleniumBase",
          "title": "SeleniumBase",
          "position": 1
        },
        {
          "url": "https://camo.githubusercontent.com/0bba35cda084703908770b97c90d29f2dc34c0952daa444e21fe3586b0a10a07/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73656c656e69756d626173652e7376673f636f6c6f723d333339394545",
          "alt": "PyPI version",
          "title": "",
          "position": 2
        },
        {
          "url": "https://camo.githubusercontent.com/a10f90fdfb86ac7314209b763f00ec922e1ac2677c2aee14b1090827b57dd84d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f73656c656e69756d626173652f53656c656e69756d426173652e7376673f636f6c6f723d323241414545",
          "alt": "GitHub version",
          "title": "",
          "position": 3
        },
        {
          "url": "https://camo.githubusercontent.com/eeaebfc137693c874c74c82e9f49b9b6c68e79c94303fa91c4f7aa344615cfa2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d73656c656e69756d626173652e696f2d3131424241412e737667",
          "alt": "SeleniumBase Docs",
          "title": "",
          "position": 4
        },
        {
          "url": "https://github.com/seleniumbase/SeleniumBase/workflows/CI%20build/badge.svg",
          "alt": "SeleniumBase GitHub Actions",
          "title": "",
          "position": 5
        },
        {
          "url": "https://camo.githubusercontent.com/ff7f33bd372fa6d16ab38e711c0fcdcd751d5612bf18a114bf8a7aaceb40cb72/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3732373932373632373833303030313733343f636f6c6f723d373238394441266c6162656c3d446973636f7264266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465",
          "alt": "",
          "title": "",
          "position": 6
        },
        {
          "url": "https://camo.githubusercontent.com/53fac6132e4906e4a6613c37f518620d46598ab9a2da96c60b23d4a822ef45e8/68747470733a2f2f73656c656e69756d626173652e6769746875622e696f2f63646e2f6769662f676f6f676c655f7365617263682e676966",
          "alt": "SeleniumBase Test",
          "title": "SeleniumBase Test",
          "position": 7
        },
        {
          "url": "https://camo.githubusercontent.com/af9fe69b6153dc87346345c05f06bf8f556445f42c163655192ab2f9faa33c22/68747470733a2f2f73656c656e69756d626173652e6769746875622e696f2f6f746865722f63665f7365632e6a7067",
          "alt": "",
          "title": "SeleniumBase",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://repository-images.githubusercontent.com/17420614/88f045f8-d20b-4d5e-9e71-fa03242f5654\" referrerpolicy=\"no-referrer\"><br>Python APIs for web automation, testing, and bypassing bot-detection. <br><br>Language: Python <br>Stars: 10965 <br>Forks: 1354"
    },
    {
      "title": "gofiber/fiber",
      "link": "https://github.com/gofiber/fiber",
      "pubDate": "",
      "isoDate": "",
      "creator": "gofiber",
      "summary": "# Fiber：基于Fasthttp的高性能Go语言Web框架\n\nFiber是一个受Express启发的Go语言Web框架，构建于Fasthttp之上，Fasthttp是Go语言中最快的HTTP引擎。Fiber的设计旨在简化快速开发，同时兼顾零内存分配和卓越性能。\n\n## Fiber v3 版本注意事项\n**重要提示：** Fiber v3 目前处于测试阶段，仍在积极开发中。虽然它提供了令人兴奋的新功能，但请注意，它可能尚未稳定，不适合生产环境使用。对于关键任务应用，建议继续使用最新的稳定版本（v2.x）。如果您选择使用 v3，请做好遇到潜在错误和重大变更的准备。务必查阅官方文档和发布说明以获取更新，并谨慎操作。\n\n## 安装指南\nFiber 要求 Go 版本 1.24 或更高。\n1.  创建并进入项目目录。\n2.  通过 `go mod init github.com/your/repo` 初始化 Go 模块。\n3.  使用 `go get -u github.com/gofiber/fiber/v3` 安装 Fiber。\n\n## 快速入门\n使用 Fiber 启动一个简单的 Web 服务器非常容易。以下是一个基本示例，展示了如何初始化 Fiber 应用、设置路由并启动服务器，使其在根路径 `/` 响应 \"Hello, World 👋!\"：\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"github.com/gofiber/fiber/v3\"\n)\n\nfunc main() {\n\tapp := fiber.New() // 初始化 Fiber 应用\n\tapp.Get(\"/\", func(c fiber.Ctx) error { // 定义根路径的 GET 方法路由\n\t\treturn c.SendString(\"Hello, World 👋!\") // 发送字符串响应\n\t})\n\tlog.Fatal(app.Listen(\":3000\")) // 在端口 3000 启动服务器\n}\n```\n运行此程序后，访问 `http://localhost:3000` 即可看到消息。\n\n## 零内存分配\nFiber 针对高性能进行了优化，这意味着从 `fiber.Ctx` 返回的值默认情况下不是不可变的，并且会在请求之间重复使用。通常，您只能在处理程序内部使用上下文值，并且不得保留任何引用。一旦处理程序返回，从上下文中获取的任何值都将在未来的请求中重复使用。\n\n## 性能基准测试\n这些测试由 TechEmpower 执行。更多结果请访问 Fiber 的 Wiki。\n\n*   **纯文本性能：**\n    ![图片 1](https://raw.githubusercontent.com/gofiber/docs/master/static/img/plaintext.png)\n\n*   **JSON 性能：**\n    ![图片 2](https://raw.githubusercontent.com/gofiber/docs/master/static/img/json.png)\n\n## 主要特性\n*   强大的路由功能\n*   静态文件服务\n*   极致性能\n*   低内存占用\n*   API 端点支持\n*   中间件与 `Next` 支持\n*   快速服务器端编程\n*   模板引擎支持\n*   WebSocket 支持\n*   Socket.io 支持\n*   Server-Sent Events (SSE)\n*   限流器 (Rate Limiter)\n*   以及更多功能\n\n## 设计理念\nFiber 的创建旨在帮助从 Node.js 转向 Go 的新 Gopher 们，让他们能够快速进入 Go 的世界。它秉持极简主义和 UNIX 哲学，并受到互联网上最流行的 Web 框架 Express 的启发。Fiber 结合了 Express 的易用性和 Go 的原生性能。如果您曾使用 Node.js (Express 或类似框架) 开发过 Web 应用，那么 Fiber 的许多方法和原则都会让您感到熟悉。\n\n## 局限性\n*   由于 Fiber 使用了 `unsafe` 包，它可能不总是与最新的 Go 版本兼容。Fiber v3 已在 Go 1.24 或更高版本上测试通过。\n*   Fiber 不兼容 `net/http` 接口。这意味着您无法直接使用 `gqlgen`、`go-swagger` 或任何属于 `net/http` 生态系统的项目。\n\n## 示例概览\n文章提供了多种代码示例，涵盖了 Fiber 的核心功能和常见用法：\n\n*   **基础路由：** 演示了如何定义不同模式的 GET 路由，包括通配符、参数和可选参数。\n*   **路由命名：** 展示了如何为路由命名并通过名称获取路由信息。\n*   **静态文件服务：** 配置 Fiber 从指定目录提供静态文件，或为所有未匹配路由提供单个文件。\n*   **中间件与 Next：** 演示了如何使用全局中间件和特定路径中间件，以及 `c.Next()` 的用法。\n*   **视图引擎：** 配置和使用模板引擎（例如 Pug）来渲染 HTML 页面。\n*   **路由分组：** 将路由组织成带有共享中间件的组，方便管理和应用特定逻辑。\n*   **常用中间件：**\n    *   **Logger (日志记录器)：** 记录 HTTP 请求和响应信息。\n    *   **CORS (跨域资源共享)：** 启用跨域请求支持。\n    *   **自定义 404 响应：** 处理未找到的路由并返回自定义的 404 状态。\n    *   **JSON 响应：** 返回结构体或 `fiber.Map` 类型的 JSON 数据。\n    *   **WebSocket 升级：** 实现 WebSocket 连接，支持双向通信。\n    *   **Server-Sent Events (SSE)：** 实现服务器推送事件，用于单向实时通信。\n    *   **Recover (恢复)：** 优雅地从程序崩溃中恢复，防止应用停止。\n    *   **Trusted Proxy (信任代理)：** 配置信任的代理服务器，以正确获取客户端 IP。\n\n## 内置中间件\nFiber 框架内部包含了一系列实用的中间件，例如：\n*   `adaptor`：`net/http` 处理程序与 Fiber 请求处理程序之间的转换器。\n*   `basicauth`：提供 HTTP 基本认证。\n*   `cache`：拦截并缓存 HTTP 响应。\n*   `compress`：支持 deflate、gzip、brotli 和 zstd 的压缩中间件。\n*   `cors`：启用跨域资源共享。\n*   `csrf`：防止 CSRF 攻击。\n*   `etag`：提高缓存效率，节省带宽。\n*   `favicon`：忽略或从内存中提供 favicon。\n*   `healthcheck`：用于健康检查的 Liveness 和 Readiness 探针。\n*   `helmet`：通过设置各种 HTTP 头来帮助保护应用程序。\n*   `idempotency`：允许幂等 API 请求。\n*   `keyauth`：支持基于密钥的认证。\n*   `limiter`：添加限流支持。\n*   `logger`：HTTP 请求/响应日志记录器。\n*   `pprof`：提供运行时性能分析数据。\n*   `proxy`：允许将请求代理到多个服务器。\n*   `recover`：从堆栈链中的任何 panic 中恢复。\n*   `redirect`：重定向中间件。\n*   `requestid`：添加请求 ID。",
      "shortSummary": "Fiber 是一个受 Express 启发的 Go 语言 Web 框架，基于高性能的 Fasthttp 构建，旨在实现快速开发、零内存分配和卓越性能。Fiber v3 处于测试阶段，建议生产环境使用 v2.x。它提供强大的路由、静态文件服务、中间件、模板引擎和 WebSocket 支持等丰富功能。其设计理念是为 Node.js/Express 开发者提供平滑的 Go 学习曲线。主要限制是不兼容 Go 的 `net/http` 接口。",
      "translated_title": "gofiber/fiber",
      "images": [
        {
          "url": "https://raw.githubusercontent.com/gofiber/docs/master/static/img/plaintext.png",
          "alt": "",
          "title": "",
          "position": 1
        },
        {
          "url": "https://raw.githubusercontent.com/gofiber/docs/master/static/img/json.png",
          "alt": "",
          "title": "",
          "position": 2
        },
        {
          "url": "https://avatars.githubusercontent.com/u/204341?s=25",
          "alt": "",
          "title": "",
          "position": 3
        },
        {
          "url": "https://avatars.githubusercontent.com/u/63164982?s=25",
          "alt": "",
          "title": "",
          "position": 4
        },
        {
          "url": "https://avatars.githubusercontent.com/u/56607882?s=25",
          "alt": "thomasvvugt",
          "title": "",
          "position": 5
        },
        {
          "url": "https://avatars.githubusercontent.com/u/27820675?s=25",
          "alt": "",
          "title": "",
          "position": 6
        },
        {
          "url": "https://avatars.githubusercontent.com/u/1094221?s=25",
          "alt": "",
          "title": "",
          "position": 7
        },
        {
          "url": "https://avatars.githubusercontent.com/u/194590?s=25",
          "alt": "",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://repository-images.githubusercontent.com/234231371/00fd8700-5430-11ea-820b-15fd85b2472c\" referrerpolicy=\"no-referrer\"><br>⚡️ Express inspired web framework written in Go <br><br>Language: Go <br>Stars: 36751 <br>Forks: 1795"
    },
    {
      "title": "快手VGI/LivePortrait (原标题: KwaiVGI/LivePortrait)",
      "link": "https://github.com/KwaiVGI/LivePortrait",
      "pubDate": "",
      "isoDate": "",
      "creator": "KwaiVGI",
      "summary": "# LivePortrait：高效肖像动画解决方案\n\nLivePortrait 是一个基于 PyTorch 的项目，旨在实现高效的肖像动画，并提供拼接和重定向控制功能。该项目由快手科技、中国科学技术大学和复旦大学共同开发。\n\n## 最新进展与更新亮点\n\nLivePortrait 在过去一年中取得了显著进展，成为主流视频平台（如快手、抖音、剪映、微信视频号）以及众多初创公司和创作者广泛采用的肖像动画解决方案。\n\n*   **2025年6月1日**：LivePortrait已成为高效肖像动画（包括人类、猫狗）解决方案，被主要视频平台、初创公司和创作者采用。\n*   **2025年1月1日**：更新了包含更多数据的动物模型新版本。\n*   **2024年10月18日**：更新了 transformers 和 gradio 库版本，以避免安全漏洞。\n*   **2024年8月29日**：更新了 Windows 一键安装程序，并支持自动更新。\n*   **2024年8月19日**：支持图像驱动模式和区域控制。\n*   **2024年8月6日**：在 Gradio 界面中支持精确肖像编辑。\n*   **2024年8月5日**：发布了 Windows 版人类模式和动物模式的一键安装程序。\n*   **2024年8月2日**：发布了动物模型版本及其他更新和改进。\n*   **2024年7月25日**：Windows 用户可从 HuggingFace 下载软件包。\n*   **2024年7月24日**：在 Gradio 界面中支持源肖像的姿态编辑，并降低了默认检测阈值以提高召回率。\n*   **2024年7月19日**：支持肖像视频编辑（v2v）。\n*   **2024年7月17日**：支持搭载 Apple Silicon 的 macOS 系统。\n*   **2024年7月10日**：支持音频和视频拼接、驱动视频自动裁剪以及模板制作以保护隐私。\n*   **2024年7月9日**：发布了 HuggingFace Space。\n*   **2024年7月4日**：发布了推理代码和模型的初始版本，并发布了主页和技术报告（arXiv）。\n\n## 快速入门\n\n### 1. 克隆代码并准备环境\n\n用户需克隆 LivePortrait 仓库，并使用 conda 创建 Python 3.10 环境。\n\n*   **Linux 或 Windows 用户**：需确保 PyTorch 版本与 CUDA 版本兼容。文章提供了 CUDA 11.1、11.8、12.1 对应的 PyTorch 安装命令。建议 Windows 用户考虑降级 CUDA 到 11.8 以获得稳定性。\n*   **macOS (Apple Silicon) 用户**：X-Pose 依赖不支持 macOS，因此可跳过其安装。人类模式正常工作，但动物模式不受支持。\n\n### 2. 下载预训练权重\n\n预训练权重可通过 HuggingFace、hf-mirror 下载，或从 Google Drive/百度云下载并解压到 `pretrained_weights` 目录。\n\n### 3. 推理\n\n#### 人类模式 (Fast hands-on)\n\n*   **Linux 和 Windows 用户**：运行 `python inference.py`。\n*   **macOS (Apple Silicon) 用户**：运行 `PYTORCH_ENABLE_MPS_FALLBACK=1 python inference.py` (速度可能比 RTX 4090 慢20倍)。\n*   成功运行后，将生成一个名为 `animations/s6--d0_concat.mp4` 的输出视频文件，包含驱动视频、输入图像/视频和生成结果。\n    ![推理示例](https://github.com/KwaiVGI/LivePortrait/raw/main/assets/docs/inference.gif)\n*   可通过 `-s` 和 `-d` 参数指定输入源（图像或视频）和驱动视频。\n\n#### 动物模式 (Fast hands-on)\n\n*   **仅在 Linux 和 Windows 搭载 NVIDIA GPU 的系统上测试。**\n*   需要首先构建 MultiScaleDeformableAttention 操作。\n*   运行 `python inference_animals.py`。\n*   成功运行后，将生成一个名为 `animations/s39--wink_concat.mp4` 的输出视频文件。\n    ![动物推理示例](https://github.com/KwaiVGI/LivePortrait/raw/main/assets/docs/inference-animals.gif)\n\n#### 驱动视频自动裁剪\n\n*   建议用户将自己的驱动视频裁剪为 1:1 宽高比（如 512x512），或启用 `--flag_crop_driving_video` 选项进行自动裁剪。\n*   驱动视频应聚焦头部区域，肩部移动最小化，且第一帧应为正面中性表情。\n*   如果自动裁剪效果不佳，可调整 `--scale_crop_driving_video` 和 `--vy_ratio_crop_driving_video` 选项。\n\n#### 运动模板制作\n\n*   可使用自动生成的 `.pkl` 运动模板文件来加速推理并保护隐私。\n\n### 4. Gradio 界面\n\nLivePortrait 提供了 Gradio 界面以提供更好的用户体验。\n![Gradio Stars](https://camo.githubusercontent.com/0aad2cc35d9b929ec7344ece3bbe7884c9618b501d29c029fffc324932e3f50d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f67726164696f2d6170702f676974687562)\n*   **人类模式**：运行 `python app.py`。\n*   **动物模式**：运行 `python app_animals.py` (仅在 Linux 搭载 NVIDIA GPU 的系统上测试)。\n*   支持 `--server_port`, `--share`, `--server_name` 参数。\n*   提供 `--flag_do_torch_compile` 加速选项，首次推理会触发优化过程（约一分钟），后续推理速度可提升 20-30%（Windows 和 macOS 不支持）。\n*   也可在 HuggingFace Space 上直接体验。\n\n### 5. 推理速度评估\n\n提供了 `speed.py` 脚本用于评估每个模块的推理速度。\n\n## 社区资源\n\nLivePortrait 拥有活跃的社区，贡献了丰富的项目和教程，包括：\n\n*   **社区开发项目**：如 ditto-talkinghead (实时音频驱动说话人头)、FasterLivePortrait (TensorRT 加速版)、AdvancedLivePortrait-WebUI (专用 Gradio WebUI)、FacePoke (鼠标控制实时头部变换应用)、FaceFusion (集成 LivePortrait 作为表情修复器和面部编辑器)、sd-webui-live-portrait (Stable Diffusion WebUI 扩展)、ComfyUI-LivePortraitKJ/AdvancedLivePortrait/comfyui-liveportrait (ComfyUI 节点)。\n*   **Playgrounds 和 HuggingFace Spaces**：提供在线体验平台。\n*   **视频教程**：涵盖 LivePortrait 工作流、视频到视频、Google Colab 教程、论文解读等。\n\n## 伦理考量\n\n肖像动画技术存在社会风险，特别是被滥用于创建深度伪造的潜力。项目强调遵循伦理准则和负责任的使用实践。目前，合成结果中包含视觉伪影，有助于检测深度伪造。项目不承担因使用生成结果而产生的任何法律责任。\n\n## 引用\n\n如果项目对您的工作有帮助，请引用其 arXiv 论文：\n`@article{guo2024liveportrait, title = {LivePortrait: Efficient Portrait Animation with Stitching and Retargeting Control}, author = {Guo, Jianzhu and Zhang, Dingyun and Liu, Xiaoqiang and Zhong, Zhizhou and Zhang, Yuan and Wan, Pengfei and Zhang, Di}, journal = {arXiv preprint arXiv:2407.03168}, year = {2024} }`\n\n## 联系方式\n\n郭建珠 (Jianzhu Guo); guojianzhu1994@gmail.com\n\n## Star 历史\n![Star History Chart](https://camo.githubusercontent.com/397af1ec47a19930b97590d4de22bf8b949e352dd7e18abd7c858c35cefd726d/68747470733a2f2f6170692e737461722d686973746f72792e636f6d2f7376673f7265706f3d4b7761695647492f4c697665506f72747261697426747970653d54696d656c696e65)",
      "shortSummary": "LivePortrait 是一个高效的 PyTorch 肖像动画解决方案，由快手科技等机构开发。它支持人类和动物（猫狗）的图像/视频驱动动画，提供拼接和重定向控制。该项目已广泛应用于主流视频平台，并提供易于使用的 Gradio 界面和 Windows 一键安装程序。用户可进行姿态编辑、区域控制和视频编辑，并利用运动模板加速推理。LivePortrait 强调负责任的伦理使用，并拥有活跃的社区支持。",
      "translated_title": "快手VGI/LivePortrait",
      "images": [
        {
          "url": "https://github.com/KwaiVGI/LivePortrait/raw/main/assets/docs/inference.gif",
          "alt": "image",
          "title": "",
          "position": 1
        },
        {
          "url": "https://github.com/KwaiVGI/LivePortrait/raw/main/assets/docs/inference-animals.gif",
          "alt": "image",
          "title": "",
          "position": 2
        },
        {
          "url": "https://camo.githubusercontent.com/0aad2cc35d9b929ec7344ece3bbe7884c9618b501d29c029fffc324932e3f50d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f67726164696f2d6170702f67726164696f",
          "alt": "",
          "title": "",
          "position": 3
        },
        {
          "url": "https://camo.githubusercontent.com/397af1ec47a19930b97590d4de22bf8b949e352dd7e18abd7c858c35cefd726d/68747470733a2f2f6170692e737461722d686973746f72792e636f6d2f7376673f7265706f733d4b7761695647492f4c697665506f72747261697426747970653d54696d656c696e65",
          "alt": "Star History Chart",
          "title": "",
          "position": 4
        },
        {
          "url": "https://opengraph.githubassets.com/36d4ef1ca360354629867460fd2323f9a84f10454aef332f1854acf673eb7a2a/KwaiVGI/LivePortrait",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/36d4ef1ca360354629867460fd2323f9a84f10454aef332f1854acf673eb7a2a/KwaiVGI/LivePortrait\" referrerpolicy=\"no-referrer\"><br>Bring portraits to life! <br><br>Language: Python <br>Stars: 15825 <br>Forks: 1652"
    },
    {
      "title": "GitHub Actions 运行器镜像 (原标题: actions/runner-images)",
      "link": "https://github.com/actions/runner-images",
      "pubDate": "",
      "isoDate": "",
      "creator": "actions",
      "summary": "# GitHub Actions 运行器镜像：全面指南\n\n本文档详细介绍了用于 GitHub Actions 和 Azure Pipelines 的 GitHub 托管运行器 VM 镜像的源代码库。\n\n## 关于此存储库\n该存储库包含用于创建 GitHub 托管运行器（用于 Actions）和 Microsoft 托管代理（用于 Azure Pipelines）的 VM 镜像的源代码。用户可以根据提供的说明从该存储库的源代码构建 VM 机器。\n\n## 可用镜像\n以下是当前可用的镜像及其标签、包含的软件和最新镜像版本的发布状态：\n\n*   **Ubuntu 24.04**\n    *   **YAML 标签:** `ubuntu-latest` 或 `ubuntu-24.04`\n    *   **包含软件:** `ubuntu-24.04`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/2f0c8b37537f79dea3fb6258feb7190c8eeeb4cf3d0ea1b8a59db1dace83b2aa/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253244253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532467562756e747532342e6a736f6e)\n*   **Ubuntu 22.04**\n    *   **YAML 标签:** `ubuntu-22.04`\n    *   **包含软件:** `ubuntu-22.04`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/17c4b801d12abbda2afa0eab7a3c5c1ae80aebd5878e74f212e3620b588b82a2/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253244253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532467562756e747532322e6a736f6e)\n*   **macOS 15**\n    *   **YAML 标签:** `macos-15-large`\n    *   **包含软件:** `macOS-15`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/7ffa4e7e8e7bca96f77da12069630232a48a275fb51f3cd0bc60c0c2a9b764d4/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d61636f732d31352e6a736f6e)\n*   **macOS 15 Arm64**\n    *   **YAML 标签:** `macos-15` 或 `macos-15-xlarge`\n    *   **包含软件:** `macOS-15-arm64`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/e844f7748540b756dbdb5f5c358acf9ed13290f05986f412c608f07d44e1da6c/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d636f732d31352d61726d36342e6a736f6e)\n*   **macOS 14**\n    *   **YAML 标签:** `macos-latest-large` 或 `macos-14-large`\n    *   **包含软件:** `macOS-14`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/b593790c4eb6a2aed75318a1ffa0fab4982c2c55c38ecd0c1f779c57af86f9b3/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d636f732d31342e6a736f6e)\n*   **macOS 14 Arm64**\n    *   **YAML 标签:** `macos-latest`, `macos-14`, `macos-latest-xlarge` 或 `macos-14-xlarge`\n    *   **包含软件:** `macOS-14-arm64`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/2fa0e0e7e0ff3517a023a31522a80101f179a92adea61140cb6ada6967c230f0/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253244253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d636f732d31342d61726d36342e6a736f6e)\n*   **macOS 13**\n    *   **YAML 标签:** `macos-13` 或 `macos-13-large`\n    *   **包含软件:** `macOS-13`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/ea5f2c595ad06e1009d0f65558333f4e902cda49f170ecea90bc1640f8840904/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253244253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d636f732d31332e6a736f6e)\n*   **macOS 13 Arm64**\n    *   **YAML 标签:** `macos-13-xlarge`\n    *   **包含软件:** `macOS-13-arm64`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/3aa838c95e4c70dc032bec44e2d4cbfa96668db2afe11e7b695da20ab8e44c90/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253244253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d636f732d31332d61726d36342e6a736f6e)\n*   **Windows Server 2025**\n    *   **YAML 标签:** `windows-2025`\n    *   **包含软件:** `windows-2025`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/cfd1206937693626cfc43e1ea267191212c40eaefdb18502d1790412933f69ca/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d253246737562697230303731253246333835653339313838663432383038373862616461393932353065393964623725324672617725324677696e32352e6a736f6e)\n*   **Windows Server 2022**\n    *   **YAML 标签:** `windows-latest` 或 `windows-2022`\n    *   **包含软件:** `windows-2022`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/4b818d3e9cae4e2747386cff10a0959c86c570ad465c1ecd98972deba91b6175/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253244253246676973742e67697468756275736572636f6e74656e742e636f6d253246737562697230303731253246333835653339313838663432383038373862616461393932353065393964623725324672617725324677696e32322e6a736f6e)\n*   **Windows Server 2019**\n    *   **YAML 标签:** `windows-2019`\n    *   **包含软件:** `windows-2019`\n    *   **发布状态:** ![Endpoint Badge](https://camo.githubusercontent.com/1a1a2d445968262885966c3377391dcda7dc70c40f5fd637f91f85620bee52c4/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253244253246676973742e67697468756275736572636f6e74656e742e636f6d253246737562697230303731253246333835653339313838663432383038373862616461393932353065393964623725324672617725324677696e31392e6a736f6e)\n\n### 标签方案\n`-latest` 标签通常指向最新的通用可用 (GA) 操作系统镜像版本。在将 `-latest` 标签迁移到新的操作系统版本之前，会提前发布公告并提供充足的准备时间。\n\n## 镜像定义\n*   **Beta (测试版):** 用于收集用户反馈，目标是识别和修复潜在问题。每周更新。在 Beta 镜像上运行的工作流不享受 Actions 的客户 SLA。鼓励用户通过创建 Issue 提供反馈。\n*   **GA (通用可用):** 经过 Beta 阶段并被认为可供普遍使用的镜像。每周更新。成为 GA 镜像需满足：经过 Beta 阶段、主要软件有兼容版本、Beta 期间报告的主要 Bug 已解决。GA 镜像受客户 SLA 保护。GA 镜像最终会根据支持最新两个 OS 版本的准则被弃用。\n\n### 最新版本迁移过程\nGitHub Actions 和 Azure DevOps 使用 `-latest` YAML 标签（如 `ubuntu-latest`）。这些标签指向最新的稳定操作系统版本。`-latest` 迁移过程是渐进式的，通常持续 1-2 个月，以允许用户调整其工作流。为避免意外迁移，用户应在 YAML 文件中指定具体的操作系统版本（如 `macos-14`）。\n\n## 镜像发布\n用户可以通过以下方式跟踪镜像变化：\n*   查看存储库的最新发布。\n*   订阅存储库的发布通知（包括预发布）。\n*   通过 `awaiting-deployment` 标签跟踪即将进行的更改。\n*   高影响更改（如破坏性更改、GA 或镜像弃用）会提前在 GitHub Changelog 博客和 Twitter 上发布。\n*   **更新频率:** 运行器镜像上的软件通常每周更新。\n\n## 软件和镜像支持\n### 支持策略\n*   工具和版本通常在其弃用或达到生命周期结束 6 个月后被移除。\n*   最多同时支持 2 个 GA 镜像和 1 个 Beta 镜像。\n*   一旦新的操作系统镜像标签发布到 GA，就会开始弃用最旧镜像标签的过程。\n*   镜像通常包含最新版本的软件包，但 Ubuntu LTS 除外，主要依赖 Canonical 提供的仓库。\n*   流行工具可以并行安装多个版本，策略如下：\n    *   **Docker 镜像:** 不超过 3 个最新的 LTS OS/工具版本。\n    *   **Java:** 所有 LTS 版本。\n    *   **Node.js:** 3 个最新的 LTS 版本。\n    *   **Go:** 3 个最新的次要版本。\n    *   **Python, Ruby, PyPy:** 5 个最流行的主要.次要版本。\n    *   **.NET Core:** 2 个最新的 LTS 版本和 1 个最新版本，每个功能版本只安装最新补丁。\n    *   **GCC, GNU Fortran, Clang, GNU C++:** 3 个最新的主要版本。\n    *   **Android NDK:** 1 个最新的非 LTS 版本，2 个最新的 LTS 版本。\n    *   **Xcode:** 每个 macOS 版本只支持一个主要版本，所有支持的主要版本的次要版本都可用。Beta 和 RC 版本“按原样”提供，仅在最新的 macOS 镜像中。新补丁版本发布时，旧补丁版本将被替换。\n\n### 包管理器使用\n在镜像生成过程中使用第三方包管理器安装软件。第三方仓库每年重新评估其有用性和安全性。\n*   **Ubuntu (APT):** Docker, Eclipse-Temurin (Adoptium), Erlang, Firefox, git-lfs, git, Google Cloud CLI, Heroku, HHvm, MongoDB, Mono, MS Edge, PostgreSQL, R, pipx, ansible-core, yamllint。\n*   **Windows (Chocolatey):** 未安装第三方仓库。\n*   **macOS (Homebrew):** aws-cli v2, azure/bicep, mongodb/brew, pipx, yamllint。\n\n### 镜像弃用策略\n一旦新的 GA 操作系统版本发布，最旧的镜像标签将开始弃用过程。\n1.  **公告:** 发布弃用日期。\n2.  **计划性中断 (Brownouts):** 临近日期时，GitHub 会开始对镜像进行计划性中断。\n3.  **最终弃用:** 镜像将被弃用，不再可用。\n\n### 预安装策略\n决定预安装工具的指导原则：\n*   **流行度:** 广泛使用的工具和生态系统优先。\n*   **最新技术:** 最新版本的工具优先。\n*   **弃用:** 生命周期结束的工具和版本不会被添加。\n*   **许可:** 允许 MIT, Apache 或 GNU 许可。\n*   **镜像时间与空间:** 评估预安装工具节省的时间和占用的空间。\n*   **支持:** 如果工具需要支持多个版本，将考虑维护成本。\n\n### 默认版本更新策略\n通常，新版本安装到镜像后，会在部署前 2 周宣布默认版本更新。对于潜在危险的更新，时间线可能延长至 1 个月。\n\n## 如何与存储库互动\n*   **Issues (问题):** 提交 Bug 报告或请求添加/更新工具，请使用相应的模板。\n*   **Discussions (讨论):** 分享关于镜像配置、已安装软件或新想法，请在相应类别中创建新主题。\n*   **一般问题:** 关于使用运行器镜像或编写 Actions 工作流的一般问题，请在 GitHub Actions 社区论坛提出请求。\n\n## 常见问题 (FAQs)\n*   **GitHub Actions 和 Azure DevOps 可用镜像:** 镜像可用性相同，但弃用策略可能不同。\n*   **如何查找构建中使用的镜像版本:** 通常，镜像部署需要 2-3 天，主分支文档仅在部署完成后更新。要查找特定构建中使用的镜像和软件版本，请查看“Set up job (GitHub Actions)”或“Initialize job (Azure DevOps)”步骤日志。\n    ![actions-runner-image](https://private-user-images.githubusercontent.com/88318005/266008702-922a8bf5-3e4d-4265-9527-b3b51e6bf9c8.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDg4NTcxNDQsIm5iZiI6MTc0ODg1Njg0NCwicGF0aCI6Ii84ODMxODAwNS8yNjYwMDg3MDItOTIyYThiZjUtM2U0ZC00MjY1LTk1MjctYjNiNTFlNmJmOWM4LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA2MDIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNjAyVDA5MzQwNFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTFiM2MyZWMyZGUyOTU1NTQyMDljYWQ2OWFjNGU0ZTljYzFlYTVhN2ZlNTczNzRkNWFiYjgzN2FlNWRiOGZjNTYmWC1BbXJ6LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.DPNIljhR3x2G3E39VYH4zYZzwRMyJ_er7mp4efWLqXc)\n*   **其他 Linux 发行版:** 不计划提供，建议使用 Docker 或自托管运行器。\n*   **macOS 源代码贡献:** 源代码可用，但目前不接受 PR，因为 CI 尚不支持外部贡献。\n*   **工具安装决定:** 遵循预安装策略，有些工具安装最新版本，有些固定特定版本。\n*   **请求预安装新工具:** 创建 Issue 并获得批准。",
      "shortSummary": "此存储库包含用于 GitHub Actions 和 Azure Pipelines 的托管运行器 VM 镜像的源代码。它提供了多种操作系统镜像（如 Ubuntu、macOS、Windows Server），并详细说明了镜像的 Beta/GA 定义、`-latest` 标签的迁移过程、软件支持策略、工具预安装规则及镜像弃用流程。用户可通过 Issues 或 Discussions 报告问题、请求工具或分享想法，并能查询构建中使用的镜像版本。",
      "translated_title": "GitHub Actions 运行器镜像",
      "images": [
        {
          "url": "https://camo.githubusercontent.com/2f0c8b37537f79dea3fb6258feb7190c8eeeb4cf3d0ea1b8a59db1dace83b2aa/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532467562756e747532342e6a736f6e",
          "alt": "Endpoint Badge",
          "title": "",
          "position": 1
        },
        {
          "url": "https://camo.githubusercontent.com/17c4b801d12abbda2afa0eab7a3c5c1ae80aebd5878e74f212e3620b588b82a2/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532467562756e747532322e6a736f6e",
          "alt": "Endpoint Badge",
          "title": "",
          "position": 2
        },
        {
          "url": "https://camo.githubusercontent.com/7ffa4e7e8e7bca96f77da12069630232a48a275fb51f3cd0bc60c0c2a9b764d4/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d61636f732d31352e6a736f6e",
          "alt": "Endpoint Badge",
          "title": "",
          "position": 3
        },
        {
          "url": "https://camo.githubusercontent.com/e844f7748540b756dbdb5f5c358acf9ed13290f05986f412c608f07d44e1da6c/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d61636f732d31352d61726d36342e6a736f6e",
          "alt": "Endpoint Badge",
          "title": "",
          "position": 4
        },
        {
          "url": "https://camo.githubusercontent.com/b593790c4eb6a2aed75318a1ffa0fab4982c2c55c38ecd0c1f779c57af86f9b3/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d61636f732d31342e6a736f6e",
          "alt": "Endpoint Badge",
          "title": "",
          "position": 5
        },
        {
          "url": "https://camo.githubusercontent.com/2fa0e0e7e0ff3517a023a31522a80101f179a92adea61140cb6ada6967c230f0/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d61636f732d31342d61726d36342e6a736f6e",
          "alt": "Endpoint Badge",
          "title": "",
          "position": 6
        },
        {
          "url": "https://camo.githubusercontent.com/ea5f2c595ad06e1009d0f65558333f4e902cda49f170ecea90bc1640f8840904/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d61636f732d31332e6a736f6e",
          "alt": "Endpoint Badge",
          "title": "",
          "position": 7
        },
        {
          "url": "https://camo.githubusercontent.com/3aa838c95e4c70dc032bec44e2d4cbfa96668db2afe11e7b695da20ab8e44c90/68747470733a2f2f696d672e736869656c64732e696f2f656e64706f696e743f75726c3d6874747073253341253246253246676973742e67697468756275736572636f6e74656e742e636f6d25324673756269723030373125324633383565333931383866343238303837386261646139393235306539396462372532467261772532466d61636f732d31332d61726d36342e6a736f6e",
          "alt": "Endpoint Badge",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/b31019f8e4bfbfb1f2d23a68e3b7a0213b9273cd4c862ac2a638016ae78e543f/actions/runner-images\" referrerpolicy=\"no-referrer\"><br>GitHub Actions runner images <br><br>Language: PowerShell <br>Stars: 11580 <br>Forks: 3408"
    },
    {
      "title": "simonw/llm：一个用于与大型语言模型交互的工具 (原标题: simonw/llm)",
      "link": "https://github.com/simonw/llm",
      "pubDate": "",
      "isoDate": "",
      "creator": "simonw",
      "summary": "### 项目概述\n\n`simonw/llm` 是一个功能强大的命令行工具 (CLI) 和 Python 库，旨在简化与各种大型语言模型 (LLM) 的交互。\n\n*   **核心功能**：允许用户与包括 OpenAI、Anthropic 的 Claude、Google 的 Gemini、Meta 的 Llama 在内的数十种大型语言模型进行通信。\n*   **交互方式**：支持两种主要的交互模式：\n    *   通过远程 API 访问云端模型。\n    *   在用户本地机器上安装并运行的模型。\n*   **本地模型支持**：用户可以安装插件来访问在其本地设备上运行的模型，特别提到了对 Ollama 的支持。\n\n### 主要功能与命令行操作\n\n`simonw/llm` 提供了一个直观的命令行界面，用于与 LLM 进行聊天和管理提示。以下是一些关键的命令行指令：\n\n*   **会话控制**：\n    *   键入 `'exit'` 或 `'quit'`：用于结束当前的聊天会话。\n*   **多行输入**：\n    *   键入 `'!multi'`：进入多行输入模式，允许用户输入更长的提示。\n    *   键入 `'!end'`：在多行输入模式下，用于结束输入并提交提示。\n*   **提示编辑**：\n    *   键入 `'!edit'`：打开用户的默认文本编辑器，以便更方便地修改和完善当前的提示。\n*   **片段插入**：\n    *   键入 `'!fragment <my_fragment> [<another_fragment> ...]'`：用于插入一个或多个预定义的文本片段到当前提示中，这对于重复使用的短语或信息非常有用。\n\n### 交互示例\n\n该工具支持与模型进行自然语言对话，例如与 `gpt-4.1` 模型的聊天示例：\n\n*   **用户输入**：`Tell me a joke about a pelican`\n*   **模型响应**：`Why don't pelicans like to tip waiters? Because they always have a big bill!`",
      "shortSummary": "`simonw/llm` 是一个命令行工具和 Python 库，用于与多种大型语言模型（如OpenAI、Claude、Gemini、Llama等）进行交互。它支持通过远程API和本地运行的模型，并可通过插件访问本地设备上的模型（如Ollama）。该工具提供聊天功能和多种命令行指令，包括退出、多行输入、编辑提示和插入片段，简化了LLM的使用和管理。",
      "translated_title": "simonw/llm：一个用于与大型语言模型交互的工具",
      "images": [
        {
          "url": "https://opengraph.githubassets.com/9c1e623642fb56fea4258cb351418cd8f2e8563f224e94a7556f019cd3a8815d/simonw/llm",
          "alt": "",
          "title": "",
          "position": 1
        }
      ],
      "contentSource": "完整文章",
      "content": "<img src=\"https://opengraph.githubassets.com/9c1e623642fb56fea4258cb351418cd8f2e8563f224e94a7556f019cd3a8815d/simonw/llm\" referrerpolicy=\"no-referrer\"><br>Access large language models from the command-line <br><br>Language: Python <br>Stars: 8207 <br>Forks: 487"
    }
  ],
  "lastUpdated": "2025-09-12T09:28:00.812Z"
}