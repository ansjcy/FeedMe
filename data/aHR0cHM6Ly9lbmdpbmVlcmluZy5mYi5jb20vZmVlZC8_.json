{
  "sourceUrl": "https://engineering.fb.com/feed/",
  "title": "Engineering at Meta",
  "description": "Engineering at Meta Blog",
  "link": "https://engineering.fb.com/",
  "items": [
    {
      "title": "深入了解Meta在移动端从C到Rust的转型 (原标题: An inside look at Meta’s transition from C to Rust on mobile)",
      "link": "https://engineering.fb.com/2025/07/01/developer-tools/an-inside-look-at-metas-transition-from-c-to-rust-on-mobile/",
      "pubDate": "Tue, 01 Jul 2025 16:00:23 +0000",
      "isoDate": "2025-07-01T16:00:23.000Z",
      "creator": "",
      "summary": "# Meta在移动端从C到Rust的转型：深入解析\n\nMeta正在进行一项雄心勃勃的项目，旨在将其核心移动消息库中的C语言代码重写为Rust。这项工作在最新的Meta技术播客中得到了深入探讨。\n\n## 项目背景与目标\n*   **现代化大规模系统：** Meta致力于对其庞大的系统进行现代化改造，特别是那些包含数十年历史C代码的核心消息库。\n*   **核心技术转型：** 项目的核心是将这些旧的C代码库迁移到Rust语言。\n*   **影响范围广泛：** 这一中央消息库被Messenger、Facebook、Instagram以及Meta的AR/VR平台共享，因此此次转型将对Meta的多个核心产品产生深远影响。\n\n## 播客嘉宾与讨论要点\n*   **主持人：** Pascal Hartig。\n*   **项目工程师：** Elaine和Buping，两位负责此大胆重写项目的软件工程师。\n*   **讨论内容包括：**\n    *   如何在没有Rust背景的情况下承担如此大规模的项目。\n    *   他们正在采用的具体方法和策略。\n    *   将“开发者幸福感”作为优化目标的重要性及其含义。\n\n## Meta技术播客\n*   **内容：** 该播客由Meta推出，旨在展示Meta工程师在各个层面的工作，从底层框架到最终用户功能。\n*   **收听方式：** 听众可以在Spotify、Apple Podcasts、Pocket Casts等播客平台下载或收听该集。\n*   **反馈与职业机会：** 听众可以通过Instagram、Threads或X向Meta发送反馈，并访问Meta职业页面了解更多职业机会。",
      "shortSummary": "Meta正在进行一项雄心勃勃的项目，旨在将其核心移动消息库中数十年历史的C语言代码重写为Rust。这项工作在最新的Meta技术播客中得到了深入探讨，两位负责该项目的工程师分享了他们如何在没有Rust背景的情况下应对这一大规模转型，以及他们如何优化“开发者幸福感”。此举旨在现代化系统，并影响Messenger、Facebook、Instagram以及Meta的AR/VR等多个核心平台。",
      "translated_title": "深入了解Meta在移动端从C到Rust的转型",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Have you ever worked is legacy code? Are you curious what it takes to modernize systems at a massive scale? Pascal Hartig is joined on the latest Meta Tech Podcast by Elaine and Buping, two software engineers working on a bold project to rewrite the decades-old C code in one of Meta’s core messaging libraries [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/07/01/developer-tools/an-inside-look-at-metas-transition-from-c-to-rust-on-mobile/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/07/01/developer-tools/an-inside-look-at-metas-transition-from-c-to-rust-on-mobile/\">An inside look at Meta&#8217;s transition from C to Rust on mobile</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "Meta 加入 Kotlin 基金会 (原标题: Meta joins Kotlin Foundation)",
      "link": "https://engineering.fb.com/2025/06/30/android/meta-joins-kotlin-foundation/",
      "pubDate": "Mon, 30 Jun 2025 16:00:30 +0000",
      "isoDate": "2025-06-30T16:00:30.000Z",
      "creator": "",
      "summary": "## Meta 加入 Kotlin 基金会：推动 Android 开发生态系统\n\nMeta 近日宣布正式成为 Kotlin 基金会的黄金会员，这标志着其对 Kotlin 及其更广泛的 Android 开发生态系统承诺的一个重要里程碑。\n\n### Meta 对 Kotlin 的长期投入\n\n*   **大规模代码迁移**：在过去几年中，Meta 工程师一直在积极地将其庞大的 Android 代码库（包含数千万行代码）从 Java 迁移到 Kotlin。\n*   **内部工具开发**：为了促进这一大规模转型，Meta 开发了一款名为 **Kotlinator** 的内部工具。该工具能够自动化大部分转换过程，同时确保生成的 Kotlin 代码符合惯例并与内部框架兼容。\n*   **参与行业工作组**：Meta 持续在企业 Java-to-Kotlin 工作组中分享其在迁移方面的努力。\n\n### 公开贡献与开源项目\n\n*   **开源工具链**：Meta 通过开源项目公开分享其工作，例如在 Buck2 中的 Kotlin 和 Android 构建工具链。\n*   **提升开发效率**：这些工具链旨在提供工具和最佳实践，以提高构建速度和可扩展性，最终惠及更广泛的开发者社区。\n\n### 作为 Kotlin 基金会成员的未来贡献\n\n*   **支持生态系统发展**：Meta 加入 Kotlin 基金会符合其支持和推进 Kotlin 生态系统的更广泛战略。\n*   **资助计划**：Meta 将为 Kotlin 基金会的资助计划做出贡献。该计划旨在支持开源库作者，并鼓励学生和开发者进行创新。\n*   **促进社区协作**：Meta 的成员资格强调了其致力于培养一个强大、协作的 Kotlin 社区，并提升该语言在不同平台上的能力。\n\n### 了解更多 Meta 开源工作\n\n如需了解更多关于 Meta 开源工作的信息，可以访问 Meta 开源网站，订阅其 YouTube 频道，或关注其在 Facebook、Instagram、Threads、X 和 LinkedIn 上的账号。",
      "shortSummary": "Meta 已正式加入 Kotlin 基金会成为黄金会员，此举标志着其对 Kotlin 和 Android 开发生态系统承诺的重要里程碑。过去几年，Meta 已将数千万行 Android 代码从 Java 迁移到 Kotlin，并开发了内部工具 Kotlinator 辅助此过程。Meta 还通过开源项目如 Buck2 中的 Kotlin 构建工具链，公开分享其工作以提升开发效率。作为基金会成员，Meta 将支持其资助计划，旨在促进 Kotlin 社区的协作与创新，并提升语言能力。",
      "translated_title": "Meta 加入 Kotlin 基金会",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>We are proud to announce that Meta has officially joined the Kotlin Foundation as a gold member, marking a significant milestone in our ongoing commitment to Kotlin and the broader Android development ecosystem. Over the past several years, Meta engineers have been actively migrating our extensive Android codebase—comprising tens of millions of lines—from Java to [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/06/30/android/meta-joins-kotlin-foundation/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/06/30/android/meta-joins-kotlin-foundation/\">Meta joins Kotlin Foundation</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "将马尔贝克海底电缆延伸至巴西南部 (原标题: Extending the Malbec subsea cable to Southern Brazil)",
      "link": "https://engineering.fb.com/2025/05/22/connectivity/extending-malbec-subsea-cable-southern-brazil/",
      "pubDate": "Thu, 22 May 2025 16:00:08 +0000",
      "isoDate": "2025-05-22T16:00:08.000Z",
      "creator": "",
      "summary": "## 马尔贝克海底电缆延伸项目概述\n\nMeta正与V.tal合作，计划于2027年前将马尔贝克（Malbec）海底电缆延伸至巴西的阿雷格里港（Porto Alegre）。此次延伸将使马尔贝克成为首条登陆南里奥格兰德州（Rio Grande do Sul）的海底电缆，旨在为巴西南部及邻近国家（包括阿根廷、智利、巴拉圭和乌拉圭）的数百万人口带来更强的连接性。\n\n### 项目详情与背景\n\n*   **合作方**：Meta与V.tal。\n*   **目标地点**：巴西阿雷格里港。\n*   **预计运营时间**：2027年。\n*   **电缆概况**：马尔贝克电缆全长2500公里，于2021年投入使用，主要提供南美洲南部锥体地区与巴西之间的连接。\n*   **新延伸线路**：将连接阿雷格里港与巴西的里约热内卢、圣保罗以及阿根廷的布宜诺斯艾利斯。\n\n### 重要意义与影响\n\n1.  **提升区域连接性**：\n    *   首次登陆南里奥格兰德州，显著增强该州及巴西南部地区的数字基础设施规模和可靠性。\n    *   改善阿根廷、智利、巴拉圭和乌拉圭等邻国的在线体验。\n    *   为数百万用户提供更优质的互联网服务。\n\n2.  **打造数字枢纽**：\n    *   将阿雷格里港确立为重要的数字枢纽，吸引数字基础设施公司入驻。\n    *   降低企业成本，改善消费者服务。\n    *   V.tal首席执行官Felipe Campos指出，这将是一个独特的数字基础设施，将吸引运营商、互联网服务提供商及其他海底电缆公司的兴趣。\n\n3.  **支持技术发展**：\n    *   此次投资是Meta数字基础设施投资的一部分，旨在满足日益增长的数字容量、弹性和全球覆盖需求。\n    *   南里奥格兰德州州长Eduardo Leite表示，该项目与州的经济、包容和可持续发展计划高度契合，并将促进人工智能（AI）项目的发展，确保AI及其他新兴技术惠及所有人。\n\n4.  **容量与服务提供**：\n    *   马尔贝克电缆将带来超过84太比特的国际容量，并提供与巴西北部和阿根廷的直接连接。\n    *   本地服务提供商将能够获取马尔贝克电缆的容量，以满足巴西南部各州数百万人口的额外带宽需求，并通过与邻国提供商的连接，进一步巩固巴西作为南美洲连接枢纽的地位。\n\n### 相关投资\n\nMeta此前已于今年早些时候在阿雷格里港激活了一个存在点（PoP），这有助于高效地在本地交付内容，从而降低互联网服务提供商的网络管理成本，并提高客户的服务质量。",
      "shortSummary": "Meta与V.tal合作，计划于2027年前将马尔贝克海底电缆延伸至巴西阿雷格里港。这将是首条登陆南里奥格兰德州的海底电缆，旨在显著提升巴西南部及阿根廷、智利、巴拉圭、乌拉圭等邻国的数字连接性、可靠性与在线体验。该项目将把阿雷格里港打造为重要的数字枢纽，促进当地数字经济发展，并支持AI等新兴技术应用，为数百万用户带来更好的互联网服务。",
      "translated_title": "将马尔贝克海底电缆延伸至巴西南部",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Meta is partnering with V.tal to extend the Malbec subsea cable to Porto Alegre, Brazil by 2027. With this new extension, Malbec will become the first subsea cable to land in the state of Rio Grande do Sul, bringing more connectivity to millions of people in Southern Brazil and neighboring countries. Malbec will improve the [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/22/connectivity/extending-malbec-subsea-cable-southern-brazil/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/22/connectivity/extending-malbec-subsea-cable-southern-brazil/\">Extending the Malbec subsea cable to Southern Brazil</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "千模之旅：扩展Instagram的推荐系统 (原标题: Journey to 1000 models: Scaling Instagram’s recommendation system)",
      "link": "https://engineering.fb.com/2025/05/21/production-engineering/journey-to-1000-models-scaling-instagrams-recommendation-system/",
      "pubDate": "Wed, 21 May 2025 16:00:38 +0000",
      "isoDate": "2025-05-21T16:00:38.000Z",
      "creator": "",
      "summary": "Instagram成功地将其推荐系统扩展到包含1000多个机器学习（ML）模型，同时保持了推荐质量和可靠性。这一扩展伴随着独特的挑战，尤其是在可靠性和可伸缩性方面。\n\n### 大量ML模型的需求\n\nInstagram的ML模型不仅用于Feed、Stories和Reels的个性化排名，还深入到评论排序、重要通知识别以及用户标签推荐等多个方面。每个排名表面都包含一个漏斗结构：\n\n*   **数据源（Sourcing/Retrieval）**：获取潜在内容。\n*   **早期排名（Early-Stage Ranking, ESR）**：初步筛选和排序。\n*   **后期排名（Late-Stage Ranking, LSR）**：精细化排序，操作成本更高，处理的候选数量更少。\n\n在每个表面和层级中，持续的实验和排列组合导致了模型数量的爆炸式增长，对基础设施带来了严峻挑战。\n\n### 基础设施成熟度滞后于扩展目标\n\nInstagram团队意识到其基础设施的成熟度未能跟上雄心勃勃的扩展目标，并识别出以下风险：\n\n*   **发现（Discovery）**：难以追踪生产环境中的模型增长，产品ML团队缺乏统一的模型信息来源。\n*   **发布（Release）**：缺乏安全、一致、快速的模型发布流程，影响了ML开发速度和产品创新。\n*   **健康（Health）**：缺乏对模型预测质量的统一衡量标准，导致质量问题难以被发现。\n\n### 解决方案概述\n\n为解决上述风险，Instagram实施了多项创新解决方案：\n\n1.  **模型注册中心（Model Registry）**：\n    *   **核心功能**：作为生产模型重要性、业务功能及其他元数据的分类账本。\n    *   **作用**：成为自动化系统级可观测性、变更管理和模型健康的基础数据源。\n    *   **解决的问题**：\n        *   **调查效率低下**：在注册中心建立之前，故障排查耗时且易错，需要人工询问模型所有者获取上下文信息。\n        *   **缺乏统一标准**：标准化了模型重要性和业务功能的收集，确保运营资源集中于最重要的模型。\n        *   **基础架构**：基于Meta的分布式配置套件Configerator构建，提供灵活可扩展的架构，支持自动化工具的开发。\n    *   **关键属性**：\n        *   **模型类型（Model Types）**：描述ML工作负载的用途，例如“ig_stories_tray_mtml”标识了模型在Instagram Stories托盘中作为多任务多标签模型的作用。用于AI资产标记、资产管理、策略执行和分析。\n        *   **关键性（Criticality）**：采纳Meta的GSI（全球服务指数）分层系统（TIER0-TIER4），根据模型可能导致的最大事件严重级别进行标注。这确保了统一的响应要求和监控级别，避免了团队自行提升模型重要性。\n    *   **自动化基础**：一旦大量模型被注册，即可与Meta的监控和可观测性套件（如SLICK）完全集成，实现模型性能监控、警报和仪表盘的自动化。\n\n2.  **模型发布工具（Model Launch Tooling）**：\n    *   **改进前流程**：传统服务发布需要克隆整个服务、发送影子流量、运行过载测试，耗时数天且效率低下。流量切换过程繁琐，需要分批次进行，且团队需手动设置新警报。\n    *   **改进后流程**：开发了更理想的自动化发布流程，包括估算、审批、准备、扩容和最终确定。将模型发布时间从数天缩短到数小时。\n    *   **虚拟资源池（Virtual Pools）**：通过为每个团队分配资源配额，解决了资源竞争问题，并支持并行发布，减少了繁文缛节，将优先级决策下放到团队层面。\n    *   **容量估算**：预先进行容量估算至关重要，它能准确评估指标改进与成本之间的关系，避免因资源不足而导致昂贵的回滚。\n\n3.  **模型稳定性（Model Stability）**：\n    *   定义并操作化了模型稳定性这一开创性指标，用于衡量模型预测的准确性。\n    *   利用模型稳定性为模型注册中心中的所有模型生成服务等级目标（SLO），从而简化了对整个产品表面ML健康状况的理解。\n\n通过这些策略和工具，Instagram得以在保持高质量用户体验的同时，应对其不断增长的算法基础设施的复杂性，确保了数十亿用户的无缝和引人入胜的体验。",
      "shortSummary": "Instagram成功将其推荐系统扩展至1000多个ML模型，同时保持了质量和可靠性。为应对模型爆炸式增长带来的挑战，团队实施了多项关键解决方案。核心措施包括建立“模型注册中心”作为统一的模型信息来源，改进“模型发布工具”以实现快速自动化部署，以及定义“模型稳定性”指标来衡量预测质量。这些举措显著提升了ML开发效率、系统可靠性和可观测性，确保了Instagram在全球范围内的无缝用户体验。",
      "translated_title": "千模之旅：扩展Instagram的推荐系统",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>In this post, we explore how Instagram has successfully scaled its algorithm to include over 1000 ML models without sacrificing recommendation quality or reliability.  We delve into the intricacies of managing such a vast array of models, each with its own performance characteristics and product goals.  We share insights and lessons learned along the way—from [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/21/production-engineering/journey-to-1000-models-scaling-instagrams-recommendation-system/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/21/production-engineering/journey-to-1000-models-scaling-instagrams-recommendation-system/\">Journey to 1000 models: Scaling Instagram&#8217;s recommendation system</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "Meta 为生成式AI（GenAI）进行的HHVM全栈优化 (原标题: Meta’s Full-stack HHVM optimizations for GenAI)",
      "link": "https://engineering.fb.com/2025/05/20/web/metas-full-stack-hhvm-optimizations-for-genai/",
      "pubDate": "Tue, 20 May 2025 16:00:29 +0000",
      "isoDate": "2025-05-20T16:00:29.000Z",
      "creator": "",
      "summary": "# Meta 为生成式AI（GenAI）进行的HHVM全栈优化\n\n随着Meta推出利用生成式AI（GenAI）的创新产品，其底层基础设施组件也必须随之演进。通过应用基础设施知识和优化，Meta能够适应不断变化的产品需求，并提供更好的产品体验。最终，基础设施系统需要在提供高质量体验和可持续运行系统之间取得平衡。\n\n## 背景与挑战\n\n*   **Web Foundation团队职责**：该团队负责运营Meta的单体Web层，运行Hack语言。他们确保Web层基础设施的健康和良好设计，处理事件响应，并构建维护网站正常运行所需的组件。\n*   **“好公民”原则**：为确保共享层稳定，团队制定了指导方针，其中核心规则是请求运行时限制——每个请求的执行时间不得超过30秒。这是HHVM（HipHop虚拟机）运行时的结果，因为每个请求对应一个有限的worker线程。请求耗时过长会导致可用线程减少，进而影响用户可用性。\n*   **传统Web服务器特性**：\n    *   主要为前端请求（渲染网页、GraphQL查询）优化。\n    *   延迟通常在数百毫秒到几秒，远低于30秒的限制。\n    *   每秒可处理约500个查询。\n    *   约三分之二的时间用于I/O，三分之一用于CPU工作。Hack语言支持异步I/O（asyncio）以提高性能。\n*   **GenAI产品（特别是LLM）的新要求**：\n    *   核心推理流程：模型以令牌流形式响应，可能需要几秒甚至几分钟才能完成（用户体验为聊天机器人“正在输入”）。\n    *   需要尽快将响应流式传输给用户。\n    *   总请求延迟显著延长（以秒计）。\n    *   对基础设施的影响：调用LLM前的关键路径开销最小，但请求的其余部分持续时间很长，大部分时间都在等待I/O。\n\n## 优化措施\n\n为了应对GenAI带来的新要求，Web Foundation团队重新审视了单体Web层的运行规则，并推出了一个专用的Web租户（WWW的独立部署），允许进行定制配置，以更好地适应工作负载的需求。主要优化包括：\n\n1.  **请求超时设置**：\n    *   在隔离的Web层上，可以增加GenAI请求的运行时限制。\n    *   这使得长时间运行的流量得以隔离，避免对生产层其他部分造成负面影响，防止推理时间超过30秒的请求超时。\n\n2.  **线程池大小调整**：\n    *   请求运行时间延长意味着worker线程的可用性降低（每个请求与一个线程1:1对应）。\n    *   由于Web服务器内存有限，通过总内存除以每个请求的内存限制，可以得出最大并发请求数，从而确定可同时执行的请求数量。\n    *   最终，GenAI主机上的线程数增加到约1000个，而普通Web服务器上只有几百个。\n\n3.  **JIT缓存和“Jump-Start”**：\n    *   HHVM是一种即时编译（JIT）语言，首次执行函数时需要编译为机器码。\n    *   “Jump-Start”技术允许Web服务器使用先前预热的服务器的输出来预填充JIT缓存。\n    *   通过允许GenAI主机使用主Web层的Jump-Start配置文件，即使代码重叠不完全相同，也能大大加快执行速度。\n\n4.  **请求预热（Warm-up）**：\n    *   HHVM支持在服务器启动时执行虚拟请求，这些请求的结果会被丢弃。\n    *   目的是预热Web服务器内的非代码缓存（如配置值和服务发现信息）。\n    *   通过在预热请求中获取并缓存这些信息，可以避免用户在首次访问时感知到这些初始获取的延迟。\n\n5.  **影子流量（Shadow Traffic）**：\n    *   Meta大量使用实时配置来控制功能发布，这意味着启动时消耗的Jump-Start配置文件可能无法覆盖服务器未来执行的所有代码路径。\n    *   为了在稳定状态下保持覆盖率，团队增加了请求影子功能，确保门控更改仍然被JIT缓存覆盖。\n\n这些全栈优化使得Meta能够有效支持其不断增长的GenAI产品需求，同时保持基础设施的性能和可持续性。",
      "shortSummary": "Meta为支持生成式AI（GenAI）产品，对HHVM（HipHop虚拟机）基础设施进行了全栈优化。通过将GenAI推理流量分离到专用Web层，并针对其长时间运行、I/O密集型特性进行定制，Meta实现了30%的延迟改善。主要优化包括增加请求超时、调整线程池大小、利用JIT缓存的Jump-Start功能、执行请求预热以及引入影子流量，以确保GenAI服务的性能和稳定性，同时不影响现有Web服务。",
      "translated_title": "Meta 为生成式AI（GenAI）进行的HHVM全栈优化",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>As Meta has launched new, innovative products leveraging generative AI (GenAI), we need to make sure the underlying infrastructure components evolve along with it. Applying infrastructure knowledge and optimizations have allowed us to adapt to changing product requirements, delivering a better product along the way. Ultimately, our infrastructure systems need to balance our need to [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/20/web/metas-full-stack-hhvm-optimizations-for-genai/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/20/web/metas-full-stack-hhvm-optimizations-for-genai/\">Meta&#8217;s Full-stack HHVM optimizations for GenAI</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "开源 Pyrefly：一个用 Rust 编写的更快 Python 类型检查器 (原标题: Open-sourcing Pyrefly: A faster Python type checker written in Rust)",
      "link": "https://engineering.fb.com/2025/05/15/developer-tools/open-sourcing-pyrefly-a-faster-python-type-checker-written-in-rust/",
      "pubDate": "Thu, 15 May 2025 18:30:33 +0000",
      "isoDate": "2025-05-15T18:30:33.000Z",
      "creator": "",
      "summary": "## Pyrefly：Meta 开源的 Rust 编写的 Python 类型检查器\n\n### 项目起源与发展\n\n*   **2017年启动**：Pyrefly 最初由 Meta 的工程师于2017年开发，旨在为 Instagram 的类型化 Python 代码库提供类型检查。\n*   **持续演进**：随着类型系统的不断发展，该类型检查器最终演变为 Pyrefly。\n\n### Pyrefly 是什么？\n\n*   **新一代工具**：Pyrefly 是一个全新的 Python 类型检查器和 IDE 体验工具。\n*   **技术栈**：它使用 Rust 语言编写，旨在提供更快的性能。\n*   **开源可用**：现在，Pyrefly 已向整个 Python 社区开源，可供广泛使用。\n\n### 核心功能与优势\n\n*   **多用途支持**：Pyrefly 支持命令行界面（CLI）使用和集成开发环境（IDE）集成。\n*   **提前发现错误**：其主要设计目标是在运行时之前帮助开发者捕获 Python 代码库中的错误。\n*   **可扩展性**：该工具能够扩展到任何规模的 Python 代码库，包括大型单体仓库（monorepos）。\n\n### Meta Tech Podcast 专题讨论\n\n*   **播客介绍**：Meta Tech Podcast 曾专门讨论 Pyrefly 的发布。\n*   **团队访谈**：节目中，Pascal Hartig 采访了 Pyrefly 团队的 Maggie、Rebecca 和 Neil，深入探讨了该工具的构建过程以及如何实现可扩展的增量类型检查器。\n*   **收听渠道**：该播客节目可在 Spotify、Apple Podcasts、Pocket Casts 等平台收听。\n\n### 相关链接\n\n文章中提及了与 Pyrefly 相关的其他资源和标准：\n\n*   Pyrefly\n*   Pyre\n*   Ruff\n*   PEP 484",
      "shortSummary": "Pyrefly 是 Meta 开源的一个用 Rust 编写的全新 Python 类型检查器和 IDE 体验工具。它起源于2017年为 Instagram 代码库开发的类型检查器，旨在帮助开发者在运行时前捕获错误。Pyrefly 支持 CLI 和 IDE 集成，可扩展到任何规模的 Python 代码库，并已在 Meta Tech Podcast 上进行专题讨论。",
      "translated_title": "开源 Pyrefly：一个用 Rust 编写的更快 Python 类型检查器",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Back in 2017, engineers at Meta sought to create a type checker for Instagram&#8217;s typed Python codebase. Years later, as the type system continued to evolve, that type checker eventually became Pyrefly.  Pyrefly is a new type checker and IDE experience for Python, written with Rust, and now available for the entire Python community to [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/15/developer-tools/open-sourcing-pyrefly-a-faster-python-type-checker-written-in-rust/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/15/developer-tools/open-sourcing-pyrefly-a-faster-python-type-checker-written-in-rust/\">Open-sourcing Pyrefly: A faster Python type checker written in Rust</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "Pyrefly 介绍：一种新的 Python 类型检查器和 IDE 体验 (原标题: Introducing Pyrefly: A new type checker and IDE experience for Python)",
      "link": "https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python/",
      "pubDate": "Thu, 15 May 2025 18:30:08 +0000",
      "isoDate": "2025-05-15T18:30:08.000Z",
      "creator": "",
      "summary": "## Pyrefly 介绍：一种新的 Python 类型检查器和 IDE 体验\n\nMeta 宣布推出 Pyrefly 的 Alpha 版本，这是一个用 Rust 编写的开源 Python 类型检查器和 IDE 扩展。\n\n### Pyrefly 是什么？\n*   **静态类型检查器**：分析 Python 代码以确保类型一致性，并在代码运行前帮助捕获错误。\n*   **集成与灵活性**：支持 IDE 集成（如 VSCode 扩展）和命令行 (CLI) 使用，方便融入开发工作流。\n*   **开源**：在 GitHub 上以 MIT 许可证发布，鼓励社区协作和贡献。\n\n### 为什么构建 Pyrefly？\n*   **背景**：Pyrefly 源于 Meta 在 2017 年为处理 Instagram 庞大的类型化 Python 代码库而创建的 Pyre 类型检查器（用 OCaml 编写）。\n*   **演进需求**：随着类型系统的发展以及对响应式 IDE 类型检查的需求，Pyre 无法满足，因此需要一种新的方法。\n*   **目标**：创建一种可扩展的类型检查器，能够提供代码导航、大规模检查以及将类型导出到其他服务的能力。\n\n### Pyrefly 的核心原则\n1.  **性能**：\n    *   旨在将通常在 CI 上进行的检查转移到每次按键时进行。\n    *   能够以极高的速度检查代码（在大型代码库上可达每秒 180 万行）。\n    *   用 Rust 实现，并针对所有规模的代码库进行高性能设计，注重增量更新。\n2.  **IDE 优先**：\n    *   确保 IDE 和命令行共享一致的视图。\n    *   从一开始就设计抽象层，以捕获差异而避免不必要的开销，这比后期改造 Pyre 更有效。\n3.  **类型推断**：\n    *   即使代码未完全注解，用户也能从类型中受益。\n    *   自动推断返回类型和局部变量类型，并在 IDE 中显示。\n    *   在 IDE 中支持双击插入推断出的类型。\n4.  **开源**：\n    *   Python 语言及其类型规范都是开源的，这极大地促进了 Pyrefly 的开发。\n    *   Pyrefly 本身也是开源的，鼓励通过拉取请求和问题报告进行贡献，并设有 Discord 频道进行讨论。\n\n### 如何开始使用 Pyrefly？\n*   **安装**：通过命令行 `pip install pyrefly` 进行安装。\n*   **迁移**：将现有类型检查器配置迁移到 Pyrefly。\n*   **增强 IDE**：下载适用于 VSCode 的 Pyrefly 扩展，享受快速的 IDE 体验。\n*   **反馈**：在 GitHub 上提交反馈。\n\n### Pyrefly 的未来\n*   **社区合作**：将与 Python 社区合作，推动语言发展并改善开发者体验。\n*   **知识共享**：Meta 将分享其在动态语言中利用类型所带来的生产力和安全性方面的经验和工具。\n*   **发展阶段**：目前处于 Alpha 阶段，目标是在今年夏天移除 Alpha 标签。用户的反馈对于实现这一目标至关重要。\n\n### 致谢\nPyrefly 由 Meta 的 Python 语言工具团队创建。",
      "shortSummary": "Pyrefly 是 Meta 推出的一款新的开源 Python 静态类型检查器和 IDE 扩展，由 Rust 编写。它旨在通过在代码运行前检查类型一致性、捕获错误来提升开发者体验。Pyrefly 强调高性能（每秒处理百万行代码）、IDE 优先集成和自动类型推断。作为 Pyre 的演进，它目前处于 Alpha 阶段，可在 GitHub 上获取，并计划在今年夏天移除 Alpha 标签，积极寻求社区反馈和贡献。",
      "translated_title": "Pyrefly 介绍：一种新的 Python 类型检查器和 IDE 体验",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Today we are announcing an alpha version of Pyrefly, an open source Python type checker and IDE extension crafted in Rust. Pyrefly is a static type checker that analyzes Python code to ensure type consistency and help you catch errors throughout your codebase before your code runs. It also supports IDE integration and CLI usage [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python/\">Introducing Pyrefly: A new type checker and IDE experience for Python</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "使用 NVIDIA cuVS 加速 Faiss 中的 GPU 索引 (原标题: Accelerating GPU indexes in Faiss with NVIDIA cuVS)",
      "link": "https://engineering.fb.com/2025/05/08/data-infrastructure/accelerating-gpu-indexes-in-faiss-with-nvidia-cuvs/",
      "pubDate": "Thu, 08 May 2025 17:00:22 +0000",
      "isoDate": "2025-05-08T17:00:22.000Z",
      "creator": "",
      "summary": "## 使用 NVIDIA cuVS 加速 Faiss 中的 GPU 索引\n\nMeta 和 NVIDIA 合作，将 NVIDIA cuVS 集成到 Faiss v1.10 中，旨在显著加速 GPU 上的向量搜索。这项新实现预计在某些方面将比经典的 GPU 加速搜索表现更优。\n\n### 关键性能提升\n\n*   **倒排文件 (IVF) 索引：**\n    *   构建时间：比经典 GPU 加速 IVF 快达 **4.7 倍**。\n    *   搜索延迟：降低高达 **8.1 倍**。\n*   **图索引 (CUDA ANN Graph - CAGRA)：**\n    *   构建时间：比 CPU Hierarchical Navigable Small World graphs (HNSW) 快达 **12.3 倍**。\n    *   搜索延迟：降低高达 **4.7 倍**。\n\n### Faiss 库简介\n\nFaiss 是由 Meta FAIR 开发的开源库，专注于高效的密集向量搜索和聚类。它开创了 GPU 向量搜索以及在 CPU 和 GPU 之间无缝切换的能力，对研究和工业界产生了深远影响。Faiss 已被集成到多个数据库（如 Milvus 和 OpenSearch）、机器学习库、数据处理库和 AI 工作流中，并常作为独立库与 PyTorch 结合使用。\n\n### Meta 与 NVIDIA 的合作历程\n\nMeta 和 NVIDIA 在向量搜索技术方面有着长期的合作。早在 2016 年，Meta 就已将为 NVIDIA GPU 设计的高性能向量搜索算法（GpuIndexFlat、GpuIndexIVFFlat、GpuIndexIVFPQ）集成到 Faiss 中。三年前，双方进一步深化合作，NVIDIA 贡献了专为 GPU 设计的先进图索引 GpuIndexCagra。Faiss 1.10.0 正式包含了来自 NVIDIA cuVS 库的这些算法，并新增了一个 conda 包，使用户可以轻松选择使用经典的 Faiss GPU 实现或新的 NVIDIA cuVS 算法。\n\n### 基准测试\n\n基准测试使用 cuVS-bench 工具进行，衡量指标包括索引构建时间和搜索延迟。测试在 NVIDIA H100 GPU 上进行，并与 Intel Xeon Platinum 8480CL 系统进行比较。结果在 95% 召回率@10 最近邻的帕累托前沿上报告。\n\n**测试数据集：**\n*   **高瘦图像数据集：** Deep1B 数据集的 1 亿个 96 维向量子集。\n*   **短宽文本嵌入数据集：** 使用 OpenAI text-embedding-ada-002 模型生成的 500 万个 1536 维向量嵌入。\n\n**表 1：索引构建时间（秒，括号内为 NVIDIA cuVS 加速倍数）**\n\n| 索引类型           | 1 亿 x 96 维嵌入          | 500 万 x 1536 维嵌入        |\n| :----------------- | :------------------------ | :-------------------------- |\n| IVF Flat           | Faiss Classic: 101.4      | Faiss Classic: 24.4         |\n|                    | Faiss cuVS: 37.9 (2.7x)   | Faiss cuVS: 15.2 (1.6x)     |\n| IVF PQ             | Faiss Classic: 168.2      | Faiss Classic: 42.0         |\n|                    | Faiss cuVS: 72.7 (2.3x)   | Faiss cuVS: 9.0 (4.7x)      |\n| HNSW (CPU) / CAGRA | Faiss Classic: 3322.1     | Faiss Classic: 1106.1       |\n|                    | Faiss cuVS: 518.5 (6.4x)  | Faiss cuVS: 89.7 (12.3x)    |\n\n**表 2：搜索延迟（毫秒，括号内为 NVIDIA cuVS 加速倍数）**\n\n| 索引类型           | 1 亿 x 96 维嵌入          | 500 万 x 1536 维嵌入        |\n| :----------------- | :------------------------ | :-------------------------- |\n| IVF Flat           | Faiss Classic: 0.75       | Faiss Classic: 1.98         |\n|                    | Faiss cuVS: 0.39 (1.9x)   | Faiss cuVS: 1.14 (1.7x)     |\n| IVF PQ             | Faiss Classic: 0.49       | Faiss Classic: 1.78         |\n|                    | Faiss cuVS: 0.17 (2.9x)   | Faiss cuVS: 0.22 (8.1x)     |\n| HNSW (CPU) / CAGRA | Faiss Classic: 0.56       | Faiss Classic: 0.71         |\n|                    | Faiss cuVS: 0.23 (2.4x)   | Faiss cuVS: 0.15 (4.7x)     |\n\n### 展望\n\n先进的 NVIDIA GPU 正在革新向量搜索领域，实现高召回率和极快的搜索速度。Faiss 和 cuVS 的集成将继续引入最先进的算法，Meta 和 NVIDIA 期待通过此次合作解锁更多创新。",
      "shortSummary": "Meta 和 NVIDIA 合作，将 NVIDIA cuVS 集成到 Faiss v1.10 中，显著加速 GPU 上的向量搜索。新集成在倒排文件 (IVF) 索引中将构建时间加速高达 4.7 倍，搜索延迟降低 8.1 倍；在图索引 (CAGRA) 中，构建时间加速高达 12.3 倍，搜索延迟降低 4.7 倍。此次更新进一步提升了 Faiss 在 GPU 上的性能，并方便用户在不同 GPU 实现间切换，预示着向量搜索领域的持续创新。",
      "translated_title": "使用 NVIDIA cuVS 加速 Faiss 中的 GPU 索引",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Meta and NVIDIA collaborated to accelerate vector search on GPUs by integrating NVIDIA cuVS into Faiss v1.10, Meta’s open source library for similarity search. This new implementation of cuVS will be more performant than classic GPU-accelerated search in some areas. For inverted file (IVF) indexing, NVIDIA cuVS outperforms classical GPU-accelerated IVF build times by up [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/08/data-infrastructure/accelerating-gpu-indexes-in-faiss-with-nvidia-cuvs/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/08/data-infrastructure/accelerating-gpu-indexes-in-faiss-with-nvidia-cuvs/\">Accelerating GPU indexes in Faiss with NVIDIA cuVS</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "通过类型检查和自由线程增强Python生态系统 (原标题: Enhancing the Python ecosystem with type checking and free threading)",
      "link": "https://engineering.fb.com/2025/05/05/developer-tools/enhancing-the-python-ecosystem-with-type-checking-and-free-threading/",
      "pubDate": "Mon, 05 May 2025 16:00:05 +0000",
      "isoDate": "2025-05-05T16:00:05.000Z",
      "creator": "",
      "summary": "# 通过类型检查和自由线程增强Python生态系统\n\nMeta和Quansight正在积极改进Python生态系统中的关键库，旨在使包更快、更易于使用，并邀请社区参与这些工作。主要关注两个方面：\n\n## 1. 增强Python中的类型注解\n\n*   **类型注解的引入与益处**\n    *   类型提示（Type hints）于Python 3.5通过PEP-484引入，允许开发者指定变量类型。\n    *   它们在不影响运行时行为的情况下增强了代码可读性。\n    *   类型检查器验证这些注解，有助于预防bug，并改进IDE功能（如自动补全、跳转定义）。\n*   **当前挑战**\n    *   开源生态系统中类型注解的采用不一致，存在多种指定、维护和分发方式。\n    *   一些项目内联注解，一些使用存根文件，许多项目则依赖第三方仓库（如typeshed）。\n    *   这些方法的应用和维护不一致。\n*   **Meta和Quansight的解决方案**\n    *   **直接贡献**：已改进pandas-stubs和numpy的类型覆盖率，并计划扩展到更多包。\n    *   **社区参与**：推广类型注解工作，鼓励社区参与，收集反馈，并制定可行的改进方案。\n    *   **工具和自动化**：开发工具以解决添加和更新类型注解的常见挑战。\n*   **Pandas类型注解的改进**\n    *   Pandas是Python科学堆栈中下载量第二大的包。\n    *   Meta和Quansight将pandas-stubs包的类型注解覆盖率从36%提高到50%以上。\n    *   主要贡献包括：为未类型化的参数添加注解，为原始泛型类型添加类型参数，移除已弃用/未文档化的接口，修正不准确的注解，并与pandas源代码中的内联注解保持一致。\n    *   **关键引入**：\n        *   用`UnknownSeries`（`Series[Any]`的别名）替换原始`Series`类型，减少函数调用时的类型检查器误报。\n        *   改进了核心DataFrame操作（如`insert`、`combine`、`replace`、`transpose`、`assign`）以及许多时间戳和时区相关API的类型。\n    *   **工具开发**：开发了用于编目缺少注解的公共接口的工具，并增强了类型覆盖率测量工具，以处理存根独立分发的情况。\n\n## 2. 自由线程Python（Free-threaded Python, FTP）\n\n*   **什么是自由线程Python？**\n    *   FTP是CPython的一个实验性构建，允许多个线程并行与VM交互。\n    *   通过移除全局解释器锁（GIL），开发者可以充分利用多核处理器，编写真正的并行代码。\n*   **自由线程Python的益处**\n    *   **单进程内的真正并行**：移除GIL后，Python代码可以充分利用多核处理器，CPU密集型代码可在多核上并行执行，无需使用多进程。\n    *   **性能提升**：允许多个线程同时执行Python代码，有效分配工作。\n    *   **简化并发**：提供更符合人体工程学的方式编写并行程序，无需再使用`multiprocessing.Pool`或自定义共享内存数据结构。\n*   **为FTP准备Python生态系统**\n    *   为了使FTP实用，Python包生态系统必须与之良好兼容。\n    *   Meta和Quansight采取“自下而上”的方法，解决生态系统中最困难/最流行的包。\n    *   已为许多流行的科学计算包（如numpy、scipy、scikit-learn）和语言绑定（如Cython、nanobind、pybind、PyO3）添加了自由线程支持。\n\n## 展望与社区参与\n\nMeta和Quansight在改进Python库的类型注解和自由线程兼容性方面取得了显著进展。他们强调了社区的重要性，并邀请更多人加入他们的努力，无论是进一步更新类型注解还是为FTP准备代码，共同推动Python生态系统的发展。",
      "shortSummary": "Meta和Quansight正通过两大核心工作增强Python生态系统：一是改进类型检查，显著提升了pandas-stubs等库的类型注解覆盖率，提高代码质量和IDE体验；二是推动自由线程Python（FTP），通过移除全局解释器锁（GIL）实现单进程内真正的并行计算，提升性能并简化并发编程。他们已为流行科学计算库和语言绑定添加了FTP支持。这些努力旨在使Python包更快、更易用，并邀请社区共同参与。",
      "translated_title": "通过类型检查和自由线程增强Python生态系统",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Meta and Quansight have improved key libraries in the Python Ecosystem. There is plenty more to do and we invite the community to help with our efforts.  We’ll look at two key efforts in Python’s packaging ecosystem to make packages faster and easier to use: 🚀 Unlock performance wins for developers through free-threaded Python – [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/05/developer-tools/enhancing-the-python-ecosystem-with-type-checking-and-free-threading/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/05/developer-tools/enhancing-the-python-ecosystem-with-type-checking-and-free-threading/\">Enhancing the Python ecosystem with type checking and free threading</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "深入探索：海底电缆的工程之旅 (原标题: Taking the plunge: The engineering journey of building a subsea cable)",
      "link": "https://engineering.fb.com/2025/05/01/connectivity/taking-the-plunge-the-engineering-journey-of-building-a-subsea-cable/",
      "pubDate": "Thu, 01 May 2025 18:48:02 +0000",
      "isoDate": "2025-05-01T18:48:02.000Z",
      "creator": "",
      "summary": "# Meta海底电缆工程之旅\n\nMeta在全球范围内构建基础设施，以传输信息和内容，服务于全球数十亿用户。其核心基础设施包括数据中心等聚合点以及连接它们的数字电缆。\n\n## 海底电缆的重要性\n*   海底电缆被视为互联网的“隐形数字高速公路”，对于Meta服务全球用户至关重要。\n*   事实上，全球超过95%的洲际流量通过海底电缆传输。\n\n## Meta的工程方法\n*   Meta的工程团队在设计和部署海底电缆时，优先考虑创新和质量。\n\n## Meta技术播客：深入探讨海底工程\n*   在最新一期的Meta技术播客中，海底电缆系统工程师Andy Palmer-Felgate和Pascal Pecci与Pascal Hartig一同讨论了海底工程技术的最新进展。\n*   本期播客深入探讨了大型海底电缆项目的工程细节，例如近期宣布的“水星计划”（Project Waterworth）。\n*   Meta技术播客旨在展示Meta工程师在各个层面的工作。",
      "shortSummary": "Meta在全球范围内建设基础设施，其中海底电缆是连接数据中心、承载全球95%以上洲际互联网流量的关键。Meta工程团队在设计和部署这些“数字高速公路”时，注重创新与质量。最新一期Meta技术播客邀请了海底电缆系统工程师，深入探讨了海底工程技术，包括“水星计划”等大型项目，展示了Meta在这一领域的工程实力和最新进展。",
      "translated_title": "深入探索：海底电缆的工程之旅",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Meta develops infrastructure all across the globe to transport information and content for the billions of people using our services around the world. At the core of this infrastructure are aggregation points – like data centers – and the digital cables that connect them. Subsea cables – the unseen digital highways of the internet – [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/01/connectivity/taking-the-plunge-the-engineering-journey-of-building-a-subsea-cable/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/01/connectivity/taking-the-plunge-the-engineering-journey-of-building-a-subsea-cable/\">Taking the plunge: The engineering journey of building a subsea cable</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-07-03T05:30:00.864Z"
}