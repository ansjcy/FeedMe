{
  "sourceUrl": "https://engineering.fb.com/feed/",
  "title": "Engineering at Meta",
  "description": "Engineering at Meta Blog",
  "link": "https://engineering.fb.com/",
  "items": [
    {
      "title": "策略区域：Meta 如何在批处理系统中大规模实施目的限制 (原标题: Policy Zones: How Meta enforces purpose limitation at scale in batch processing systems)",
      "link": "https://engineering.fb.com/2025/07/23/security/policy-zones-meta-purpose-limitation-batch-processing-systems/",
      "pubDate": "Wed, 23 Jul 2025 23:00:05 +0000",
      "isoDate": "2025-07-23T23:00:05.000Z",
      "creator": "",
      "summary": "# 策略区域：Meta 在批处理系统中大规模实施目的限制\n\nMeta 开发了隐私感知基础设施（Privacy Aware Infrastructure, PAI）和策略区域（Policy Zones），旨在大规模批处理系统中强制执行数据目的限制。策略区域与 Meta 的 EB 级数据仓库和处理系统深度集成，通过运行时强制执行和 SQL 解析，在每天数百万的数据流中传播和执行隐私标注，每小时执行数万亿次用户同意检查。\n\n## 核心问题与解决方案\n\n**挑战：**\n*   **传统访问控制（ACL）的局限性：** 过去依赖访问控制列表（ACL）来保护数据集，但这需要将数据进行物理上的粗粒度分离，以确保每个数据集只有一个目的。这种方法在小规模下可行，但在大规模复杂数据依赖关系中会导致巨大的操作开销和频繁的审计需求。\n*   **粗粒度数据分离：** 难以在复杂的数据依赖关系中实现数据和处理的完全分离。\n*   **过度保守的数据标记（标签蔓延）：** 偶然访问受目的限制的数据会导致所有派生数据集也被标记为受限，即使访问是虚假的。\n*   **缺乏治理和可扩展的数据模型：** 存在大量内部数据策略和隐私控制，且新策略不断产生，需要强大的控制机制和独立运作的能力。\n\n**策略区域的解决方案：**\n*   **信息流控制（IFC）原则：** 策略区域利用信息流控制原则，不仅控制数据访问，还实时控制数据的处理和传输，提供更持久和可持续的方法。\n*   **细粒度信息流跟踪：** 跟踪数据流向，确保下游数据的限制至少与上游源数据一样严格，从而无需粗粒度地分离数据。\n*   **策略区域管理器（PZM）：** 开发了一套工具来识别潜在的过度标记情况，并通过再分类系统允许工程师安全地停止敏感数据标签的传播。\n*   **可治理数据标注（GDAs）：** 引入精确、受治理的标注，描述受目的限制的数据类型。GDAs 具有受控的生命周期，限制了谁可以创建、关联或移除标注，并确保每个策略独立运作。\n\n## 策略区域的关键组件与运作机制\n\n1.  **隐私感知基础设施 (PAI)：**\n    *   PAI 是一个旨在简化数据流、确保目的限制和透明度的框架，利用自动化减少隐私合规的开销。\n    *   策略区域是 PAI 的关键组成部分，使工程师能够专注于产品创新，同时遵守用户隐私承诺。\n\n2.  **可治理数据标注 (GDAs)：**\n    *   GDAs 是简单、人类可读的标签（例如：MESSAGING_DATA），用于描述数据集上的目的使用限制。\n    *   它们影响数据集的访问行为，并具有受控的生命周期，以确保数据策略得到遵守。\n\n3.  **统一编程模型 (UPM)：**\n    *   UPM 是一个 SQL 解析器，它拦截由各种数据处理器发出的查询，并将其转换为语义树。\n    *   这些语义树捕获了每个数据移动步骤的输入、输出和转换，为精确的策略执行提供了必要的信号。\n\n4.  **策略评估服务 (PES)：**\n    *   PES 接收 UPM 解析后的信息，执行流控制检查，验证数据移动和转换步骤是否符合隐私策略。\n    *   如果允许数据流，PES 会将决策传递给计算引擎。\n\n5.  **数据仓库权限服务 (WPS)：**\n    *   WPS 对数据仓库的访问执行最终验证，确保以隐私策略感知的方式进行访问。\n    *   PES 向客户端颁发包含加密签名上下文信息的特殊令牌（“密钥”），该密钥通过计算引擎传递并在访问时使用，以确保安全的数据流。\n\n## 规模化应用与示例：保护用户消息数据\n\n*   **规模：** 策略区域控制数百万个数据集的访问，每天分析数千万个数据流，每小时执行数万亿次批处理用户同意检查，并处理数百种不同的数据策略要求。\n*   **消息数据保护：**\n    *   用户消息数据（如交付时间戳、状态等非内容数据）通过日志或数据库抓取进入 Meta 的数据仓库和 AI 系统。\n    *   数据通过消息队列 Scribe 流式传输，可实时处理或存储以进行异步批处理。\n    *   日志库配置时会关联一个 GDA（如 MESSAGING_DATA）。\n    *   策略区域基础设施会强制执行限制：下游数据资产必须携带相同的 GDA，且访问仅限于中央配置中定义的允许目的。\n    *   策略区域验证 GDA 与下游 Scribe 类别的关联，确保合规的数据流。\n*   **数据仓库中的策略执行：**\n    *   数据仓库中的数据处理通常使用 SQL 进行，例如 Presto 等流行处理器。\n    *   Dataswarm 作为分布式作业调度框架，负责调度 SQL 查询。\n    *   UPM 解析这些 SQL 查询，PES 进行流控制检查，WPS 进行最终验证，确保数据流在整个仓库中都符合策略。\n\n通过将隐私作为基础设施的核心部分，Meta 赋能产品团队创建新的体验，同时始终尊重用户隐私。",
      "shortSummary": "Meta 开发了“策略区域”（Policy Zones）和“隐私感知基础设施”（PAI），以在大规模批处理系统中强制执行数据目的限制。该系统利用信息流控制原则、可治理数据标注（GDAs）和运行时强制执行，跟踪并限制数据流。它解决了传统访问控制的局限性，通过细粒度跟踪、再分类和强大的治理机制，确保数据在数万亿次操作中符合隐私要求。这使得工程师能专注于创新，同时履行对用户的隐私承诺。",
      "translated_title": "策略区域：Meta 如何在批处理系统中大规模实施目的限制",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Meta has developed Privacy Aware Infrastructure (PAI) and Policy Zones to enforce purpose limitations on data, especially in large-scale batch processing systems.  Policy Zones integrates with Meta’s exabyte-scale data warehouse and processing systems, using runtime enforcement and SQL parsing to propagate and enforce privacy annotations across millions of daily data flows per day, performing trillions [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/07/23/security/policy-zones-meta-purpose-limitation-batch-processing-systems/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/07/23/security/policy-zones-meta-purpose-limitation-batch-processing-systems/\">Policy Zones: How Meta enforces purpose limitation at scale in batch processing systems</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "Meta 如何保持其 AI 硬件的可靠性 (原标题: How Meta keeps its AI hardware reliable)",
      "link": "https://engineering.fb.com/2025/07/22/data-infrastructure/how-meta-keeps-its-ai-hardware-reliable/",
      "pubDate": "Tue, 22 Jul 2025 18:45:16 +0000",
      "isoDate": "2025-07-22T18:45:16.000Z",
      "creator": "",
      "summary": "## Meta 如何保持其 AI 硬件的可靠性\n\n硬件故障，特别是静默数据损坏（SDCs），对AI训练和推理具有显著影响。SDCs是硬件引起的未被检测到的数据错误，对依赖准确数据进行训练和提供有用输出的AI系统尤其有害。Meta分享了其在不同规模下部署的检测SDC的方法，以确保其AI基础设施的可靠性。\n\n### Meta 的 AI 基础设施概览\n\nMeta的全球AI基础设施由大量硬件组件和服务器组成，通过网络结构连接在全球分布式数据中心。该设置集成了存储、计算和网络架构，以及为训练或推理工作负载量身定制的独特文件系统和PyTorch应用程序。该基础设施支持大规模模型训练以及文本到图像生成和对象分割等高级AI应用。\n\n自2018年以来，Meta在硬件可靠性方面取得了显著进展，识别了磁盘、CPU、内存、交换机、GPU、ASIC和网络中独特的故障类型，经常在发现故障模式方面引领行业。Meta开发了缓解策略，以确保基础设施的平稳运行和可用性。\n\n### AI 集群面临的挑战\n\n*   **硬件故障影响：** 训练大规模模型涉及数千个加速器在同步环境中运行，任何组件故障都可能中断或停止进程。Meta专注于通过检测和诊断来减少训练期间的硬件故障，并使用健康的服务器和加速器快速重启训练。\n*   **Llama 3 经验：** 在运行Llama 3模型集群的经验中，SRAM、HBM、处理网格和网络交换机硬件等组件的硬件故障显著影响AI集群的可靠性，超过66%的训练中断是由此类故障引起的。\n*   **特定挑战：** 加速器可能比CPU可靠性低（复杂性、遥测有限），网络复杂性可能导致故障归因错误，GPU软件堆栈内的错误可能需要大量配置才能纠正。减少硬件和配置故障可大大提高集群效率。\n\n### Meta 遇到的硬件故障类型\n\nMeta基础设施中的硬件故障或错误可大致分为三类：\n\n1.  **静态错误：** 硬件故障通常表现为二元状态（例如，设备通电或断电）。这些错误在大规模部署中易于识别和修复，尽管随着配置和设备规模的增长，它们可能更频繁地发生。\n2.  **瞬态错误：** 这些错误以其可重现性分类，包括负载相关或部分可观察的故障（例如，热失控导致的设备问题或不可纠正错误导致的随机崩溃）。缓解涉及理解其表现条件，并通过大规模部署进行分类和模式匹配。超大规模基础设施中RAS遥测的进步大大改善了这一过程。\n3.  **静默错误（SDCs）：** 当硬件计算错误但未留下可检测的痕迹时发生，导致应用程序消耗不正确的结果。这些错误通常是由于硅缺陷引起的，除非观察到显著偏差，否则可能长时间未被发现。检测它们需要大量的工程投入和昂贵的遥测来追溯数据损坏到特定设备。随着加速器中硅密度的增加，静默数据损坏现在大约每千个设备发生一次故障，远高于宇宙射线引起的软错误。\n\n### SDCs 带来的关键挑战\n\nSDCs在超大规模基础设施中带来了重大挑战，因为它们具有数据依赖性，为所有可能的数据值创建了不切实际的指数级测试空间。这些故障还取决于设备电压、频率、操作温度和生命周期。因此，在设备的整个生命周期中，在随机状态空间内进行一致、定期和频繁的测试是必要的。\n\n### 新颖的 SDC 检测机制\n\n为了保护应用程序免受静默数据损坏，Meta采用了多种检测机制：\n\n*   **Fleetscanner：** 通过有针对性的微基准测试在大规模上捕获性能异常，以识别硬件缺陷。这些测试在维护操作期间定期运行，每45到60天覆盖整个集群。\n*   **Ripple：** 与工作负载协同运行，在毫秒到秒内执行测试，几天内实现全集群覆盖。它在核心和线程之间重叠测试指令，提供比Fleetscanner更快的检测。\n*   **Hardware Sentinel：** 一种新颖的、与测试和架构无关的方法，在内核空间评估应用程序异常。它将基于核心的异常识别为静默数据损坏，无需测试分配，仅在分析平面运行。Hardware Sentinel在不同架构、应用程序和数据中心中，性能比基于测试的方法高出41%。\n\n这些机制结合起来，提供了最佳的在役集群SDC检测和保护覆盖。\n\n### AI 硬件中的静默错误\n\n上述方法已在整个集群中全面生产化部署，检测AI和非AI基础设施中的SDCs。然而，AI应用程序（如训练和推理）对SDCs具有独特且更具挑战性的影响。\n\n#### 训练工作负载中的 SDCs\n\n训练工作负载中的SDCs导致不正确的计算，影响前向和后向传播，从而导致与预期训练路径的偏离。虽然AI训练工作负载有时被认为是SDCs的自适应性，但这仅适用于有限的SDC表现形式。在大多数实际场景中，自适应性不足，SDCs会持续存在并加剧影响。\n\n1.  **NaN 传播：** 当SDC将可表示值推入不正确的表示形式时，在训练计算期间生成NaN。一旦创建NaN，它会通过后续计算传播，影响训练迭代、加速器域、主机域，并最终影响整个集群。这可能导致集群停止，需要识别并隔离有问题的加速器和节点。\n2.  **梯度方差损坏：** 当SDC影响梯度计算时发生，导致梯度爆炸、内爆或局部最小值。这种损坏在数值范围内，但被错误地视为正确，影响同步训练中的整个集群。这些损坏的梯度值被视为真实值进行交换，导致训练看似进展但实际没有改进。检测这些SDCs具有挑战性，因为它们很微妙，并且需要数周或数月才能观察到其影响。\n\n#### 推理工作负载中的 SDCs\n\n在推理应用程序中，SDCs导致不正确的结果，由于操作规模，影响数千个推理消费者。持续的SDCs可以直接影响推荐引擎或LLM输出等系统做出的决策。这些损坏可能绕过与隐私或完整性相关的策略，因为它们不受边界限制。因此，推理损坏显著降低了使用大量计算资源训练的模型的效果。\n\n### SDCs 的影响\n\nSDCs在训练和推理集群中创建了复杂的调试场景。在训练中，可见故障会停止集群，但SDCs会制造进展的假象，掩盖故障源。NaN传播需要识别有问题的节点，否则从检查点重启最终会失败。梯度方差损坏会延长这种假象，直到方差累积，使重启无效。因此，SDCs导致显著的计算效率低下，比可见故障具有更大的时间影响。\n\n在推理中，分类涉及每个子阶段的昂贵遥测。在识别出有问题的节点之前，推理集群无法使用，存在重复损坏的风险。大的偏差更容易通过异常检测器检测到，但小的偏差需要大量的调试，这涉及数百名工程师，停止生产用例，并影响服务生产的可靠容量。\n\n### AI 硬件中 SDCs 的检测和缓解策略\n\nMeta在基础设施中运行的SDC处理策略分为基础设施策略和堆栈策略：\n\n#### 基础设施策略（集群层面）\n\n1.  **还原性分类（Reductive triage）：** 通过对逐渐减小的集群规模进行迷你训练迭代的二分查找，以隔离NaN传播。目标是识别一个能重现NaN问题的小集群，从而隔离有问题的节点进行进一步调查。然后，可以使用新节点重组集群并从保存的检查点恢复训练。\n2.  **确定性训练：** 运行已知有效的模型进行几次训练迭代，以确保没有NaN或梯度发散。它有助于验证不依赖于数据的计算故障，因为它保证了特定值和训练输入的正确性。\n3.  **超检查点（Hyper-checkpointing）：** 以越来越高的频率创建检查点，以促进更快地识别和隔离损坏节点。它有助于保持训练吞吐量，同时将NaN传播限制在特定的加速器或主机上，从而加快分类和隔离过程。\n\n#### 堆栈策略（软件堆栈层面，与工作负载协调）\n\n1.  **梯度裁剪（Gradient clipping）：** 在训练工作负载中强制执行梯度裁剪，将值限制在指定范围内，从而缓解NaN传播。超出此范围的计算将被裁剪，并且可以通过根据操作数符号将其设置为最大或最小值来在此步骤中检测NaN。\n2.  **算法容错（Algorithmic fault tolerance）：** 将容错集成到训练算法中，以处理一系列数据损坏，从而减少对检测和分类的需求。它以最小的开销提高计算效率，如在CPU训练中所示。",
      "shortSummary": "Meta致力于确保其庞大AI硬件基础设施的可靠性，尤其关注静默数据损坏（SDCs）。SDCs是硬件引起的未检测错误，严重影响AI训练（如NaN传播、梯度损坏）和推理，导致效率低下和结果不准确。为应对此挑战，Meta部署了Fleetscanner、Ripple和Hardware Sentinel等先进检测机制。同时，结合基础设施层面的还原性分类、确定性训练和超检查点，以及软件堆栈层面的梯度裁剪和算法容错等多种缓解策略，以保障AI系统的稳定运行。",
      "translated_title": "Meta 如何保持其 AI 硬件的可靠性",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Hardware faults can have a significant impact on AI training and inference. Silent data corruptions (SDCs), undetected data errors caused by hardware, can be particularly harmful for AI systems that rely on accurate data for training as well as providing useful outputs. We are sharing methodologies we deploy at various scales for detecting SDC across [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/07/22/data-infrastructure/how-meta-keeps-its-ai-hardware-reliable/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/07/22/data-infrastructure/how-meta-keeps-its-ai-hardware-reliable/\">How Meta keeps its AI hardware reliable</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "利用AI制造低碳、速凝混凝土 (原标题: Using AI to make lower-carbon, faster-curing concrete)",
      "link": "https://engineering.fb.com/2025/07/16/data-center-engineering/ai-make-lower-carbon-faster-curing-concrete/",
      "pubDate": "Wed, 16 Jul 2025 12:00:16 +0000",
      "isoDate": "2025-07-16T12:00:16.000Z",
      "creator": "",
      "summary": "## Meta利用AI开发低碳、速凝混凝土\n\n### 引言\nMeta开发了一款开源AI工具，旨在设计出更坚固、更可持续且固化更快的混凝土配方，从而在加快施工速度的同时减少对环境的影响。该AI工具利用Meta的BoTorch和Ax框架驱动的贝叶斯优化技术，并与Amrize公司以及伊利诺伊大学厄巴纳-香槟分校（U of I）合作开发，以加速高性能、低碳混凝土的发现。Meta已成功在其一个数据中心施工现场部署了经AI工具优化的混凝土配方。作为开源且免费提供的工具，该AI有望帮助建筑行业更广泛地采用和优化可持续混凝土配方。\n\n### 背景：混凝土生产的环境挑战与创新瓶颈\n混凝土生产是数据中心建设中隐含碳排放的主要来源，据世界经济论坛数据，其碳排放量占全球二氧化碳排放总量的8%。传统上，混凝土的优化主要集中在强度（28天抗压强度）和成本。然而，包括数据中心在内的现代建筑，还需要混凝土在可持续性、固化速度、和易性及饰面性方面进行优化。低碳混凝土配方的创新面临多重挑战：固化速度较慢、表面质量问题，以及涉及新型材料时供应链的复杂性。这些因素使得混凝土配方的创新过程缓慢且困难。\n\n### AI解决方案：加速混凝土配方创新\nAI技术能够帮助混凝土供应商开发和推广创新的混凝土配方作为“即插即用”的替代品，从而加速可持续材料的发现和集成，实现大规模应用。Meta与Amrize和U of I合作，开发了一个AI模型和流程，以加速发现既满足传统要求又符合新型可持续性需求的混凝土混合物。这项合作已成功设计并部署了AI优化的绿色混凝土，应用于Meta位于明尼苏达州罗斯蒙特的新数据中心。\n\n### Meta的AI模型：复杂的多目标优化\n设计混凝土配方是一个复杂的多目标问题，需要设计师在不同类型和比例的水泥、低碳辅助胶凝材料（SCMs）、水胶比、粗细骨料类型以及外加剂之间进行选择。SCMs对混凝土性能的影响因来源地和季节性而异，需要长时间测试验证。此外，新配方的全面性能验证需要耗时数天甚至数周的测试。因此，提高设计过程的效率至关重要。\n\n#### 可持续混凝土的关键成分：\n*   **水泥：** 混凝土的“粘合剂”，通过高温回转窑煅烧石灰石、粘土等矿物制成，该过程产生大量二氧化碳排放。\n*   **矿渣：** 炼钢副产品，磨成细粉后可替代部分水泥，减少混凝土的隐含碳，并提高长期强度、耐久性和抗化学侵蚀能力。\n*   **粉煤灰：** 燃煤电厂的工业副产品，可替代部分水泥，减少隐含碳，并改善长期强度、耐久性和和易性。\n*   **细骨料（如沙子）：** 粒径小于粗骨料，填充较大石块或砾石间的空隙，有助于形成光滑均匀的表面，改善混凝土整体质地。\n*   **粗骨料（如碎石或砾石）：** 为混凝土提供体积和承载能力，帮助混凝土抵抗开裂和收缩。\n\n这些成分以不同比例混合，可产生不同强度和可持续性特性的混凝土。然而，每种成分的特性因来源和制造条件而异，且部分SCMs的可用性正在下降，这使得发现和整合新材料变得必要，而这些新材料往往缺乏数据。所有这些都增加了混凝土设计的挑战。Meta的方法目标是优化强度和可持续性之间的权衡。\n\n![图片 1](https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-1.png)\n生成混凝土混合物的几种关键成分，从左上角顺时针方向：粉煤灰、粗骨料、细骨料和水泥。\n\n![图片 2](https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-2.png)\n低碳混凝土混合物设计示例，显示了按重量计算的成分相对含量。\n\n### AI模型与优化算法\n为加速混凝土混合物设计过程，Meta利用其开源的贝叶斯优化和自适应实验软件BoTorch和Ax，开发了一个可持续混凝土AI模型。该模型使用多目标贝叶斯优化算法来学习和优化混凝土成分，预测不同混合物的抗压强度曲线，从而优化短期和长期强度特性以及可持续性。通过利用AI，Meta能够加速发现过程并提高实验效率。\n\n![图片 3](https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-3.png)\n模型在早期开发阶段进行的两次强度曲线预测。更可持续的混合物（绿色）在早期表现出较低的抗压强度，但随后超过了传统混合物（蓝色），这是更可持续混凝土混合物的常见权衡。\n\n### AI模型的训练与验证流程\nMeta与U of I的Nishant Garg教授及其研究团队合作，利用真实数据训练AI模型。在每次迭代中，AI根据性能预测提出新的有前景的混凝土混合物，并根据最新数据进行更新。这些预测通过实验室测试进行验证，结果用于后续迭代中AI的完善。AI流程包括生成基线数据、训练AI模型、利用模型开发和验证新假设，然后改进基线数据和AI训练。在实施第一个AI流程时，Meta关注了几个关键指标：抗压强度（通常为28天抗压强度，以及1、3、5天等早期强度）、坍落度、以及可持续性（通过混凝土混合物的碳足迹代理量化）。\n\n![图片 4](https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-4.png)\n实施AI流程的自适应实验步骤。\n\n![图片 5](https://engineering.fb.com/wp-content/uploads/2025/07/Pareto-Frontier-of-concrete-strength-and-sustainability-1.gif)\n随着时间的推移，该AI流程生成了高质量的AI训练和开发数据，包含一百多种独特的混凝土混合物、全面的x天抗压强度数据以及全球变暖潜能值（GWP，以每立方米二氧化碳千克数衡量）。\n\n### 工业应用与规模化部署\n2024年，Meta开始与Amrize合作，探索如何将Meta的AI大规模应用于混凝土行业。Amrize分享了基础混凝土性能数据，支持Meta的开源方法，并在其位于明尼苏达州圣保罗附近的搅拌站开发了AI流程，扩展了发现和测试过程。对于数据中心而言，混凝土楼板至关重要，它们是部署服务器及相关电力和冷却设备的表面，需要平整、水平、光滑且耐用，以确保设备的可靠维护。因此，其混凝土配方必须满足更高的饰面质量要求。Meta的AI算法纳入了特定的水胶比和体积材料限制，发现了具有更快固化速度和更低GWP值的高性能配方，满足了这些更严格的要求。在两次迭代内，并经过少量人工调整，AI流程发现的配方在强度、速度和可持续性方面超越了行业标准的低碳配方。\n\n![图片 6](https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-5.png)\n标准行业低碳配方与AI优化配方的强度曲线对比。AI优化配方更快、更强，碳排放更低。\n\n![图片 7](https://engineering.fb.com/wp-content/uploads/2025/07/Pareto-Frontier_Final.png)\n在Meta的罗斯蒙特数据中心应用Amrize的AI设计混凝土配方。\n\n### 实际部署：Meta Rosemount数据中心\n为了将AI生成的配方应用于实际场景，Meta扩展了第一个AI流程，增加了额外的步骤和测试。Amrize与Meta数据中心的总承包商Mortensen合作，测试了新配方的和易性和饰面性。成功的楼板测试促使该配方在Meta罗斯蒙特数据中心项目的一个现场支持区域的楼板中进行了大规模应用。正式测试表明，团队在实现良好和易性和饰面性能的同时，超出了所有技术要求。\n\n![图片 8](https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-7.png)\n测试和验证AI生成混凝土配方的开发和规模化过程。人类专家评估每个阶段和迭代的输出，完善AI以纳入额外的约束，和/或调整单个约束，例如总粘合剂用量和水胶比。\n\n### 开源与未来展望\nMeta坚信AI能够为数据中心等大型建筑项目生成高性能、低碳混凝土配方。开源AI将惠及建筑行业的各个层面，包括建筑公司、承包商、供应商、提供商、建筑师以及建筑业主。Meta将继续与Amrize合作，进一步扩大AI在混凝土行业的应用。基本的AI解决方案将保持开源，以促进进一步的商业化、应用和研发。Meta的目标是在数据中心推广低碳混凝土的使用，并鼓励以性能为基础的要求，同时将风险降至最低。Meta还将与其他超大规模数据中心运营商合作，共同测试和验证低碳混凝土配方，以进一步减少碳排放。此外，Meta将利用iMasons和Open Compute Project等组织发布参考设计、AI辅助配方、案例研究和最佳实践。\n\n### 相关资源\n*   在GitHub上下载可持续混凝土AI模型。\n*   阅读技术报告《Sustainable Concrete via Bayesian Optimization》。\n*   了解更多关于BoTorch和Ax的信息。\n*   阅读更多关于Meta如何在数据中心使用低碳混凝土的信息。",
      "shortSummary": "Meta开发了一款开源AI工具，利用贝叶斯优化技术，旨在设计出更强、固化更快、碳排放更低的混凝土配方。该工具与Amrize和伊利诺伊大学合作，已成功应用于Meta数据中心建设，显著降低了混凝土生产的碳足迹（占全球CO2排放的8%）。AI通过优化水泥替代材料（如矿渣和粉煤灰）的比例，克服了传统低碳混凝土固化慢等挑战，并已在实际项目中验证其性能超越行业标准。Meta计划继续开源此技术，以推动建筑行业广泛采用可持续混凝土，助力实现净零排放目标。",
      "translated_title": "利用AI制造低碳、速凝混凝土",
      "images": [
        {
          "url": "https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-1.png",
          "alt": "",
          "title": "",
          "position": 1
        },
        {
          "url": "https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-2.png",
          "alt": "",
          "title": "",
          "position": 2
        },
        {
          "url": "https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-3.png",
          "alt": "",
          "title": "",
          "position": 3
        },
        {
          "url": "https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-4.png",
          "alt": "",
          "title": "",
          "position": 4
        },
        {
          "url": "https://engineering.fb.com/wp-content/uploads/2025/07/Pareto-Frontier-of-concrete-strength-and-sustainability-1.gif",
          "alt": "",
          "title": "",
          "position": 5
        },
        {
          "url": "https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-5.png",
          "alt": "",
          "title": "",
          "position": 6
        },
        {
          "url": "https://engineering.fb.com/wp-content/uploads/2025/07/Pareto-Frontier_Final.png",
          "alt": "",
          "title": "",
          "position": 7
        },
        {
          "url": "https://engineering.fb.com/wp-content/uploads/2025/07/Meta-green-AI-concrete-image-7.png",
          "alt": "",
          "title": "",
          "position": 8
        }
      ],
      "contentSource": "完整文章",
      "content": "<p>Meta has developed an open-source AI tool to design concrete mixes that are stronger, more sustainable, and ready to build with faster—speeding up construction while reducing environmental impact. The AI tool leverages Bayesian optimization, powered by Meta’s BoTorch and Ax frameworks, and was developed with Amrize and the University of Illinois Urbana-Champaign (U of I) [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/07/16/data-center-engineering/ai-make-lower-carbon-faster-curing-concrete/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/07/16/data-center-engineering/ai-make-lower-carbon-faster-curing-concrete/\">Using AI to make lower-carbon, faster-curing concrete</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "深入了解Meta在移动端从C到Rust的转型 (原标题: An inside look at Meta’s transition from C to Rust on mobile)",
      "link": "https://engineering.fb.com/2025/07/01/developer-tools/an-inside-look-at-metas-transition-from-c-to-rust-on-mobile/",
      "pubDate": "Tue, 01 Jul 2025 16:00:23 +0000",
      "isoDate": "2025-07-01T16:00:23.000Z",
      "creator": "",
      "summary": "# Meta在移动端从C到Rust的转型：深入解析\n\nMeta正在进行一项雄心勃勃的项目，旨在将其核心移动消息库中的C语言代码重写为Rust。这项工作在最新的Meta技术播客中得到了深入探讨。\n\n## 项目背景与目标\n*   **现代化大规模系统：** Meta致力于对其庞大的系统进行现代化改造，特别是那些包含数十年历史C代码的核心消息库。\n*   **核心技术转型：** 项目的核心是将这些旧的C代码库迁移到Rust语言。\n*   **影响范围广泛：** 这一中央消息库被Messenger、Facebook、Instagram以及Meta的AR/VR平台共享，因此此次转型将对Meta的多个核心产品产生深远影响。\n\n## 播客嘉宾与讨论要点\n*   **主持人：** Pascal Hartig。\n*   **项目工程师：** Elaine和Buping，两位负责此大胆重写项目的软件工程师。\n*   **讨论内容包括：**\n    *   如何在没有Rust背景的情况下承担如此大规模的项目。\n    *   他们正在采用的具体方法和策略。\n    *   将“开发者幸福感”作为优化目标的重要性及其含义。\n\n## Meta技术播客\n*   **内容：** 该播客由Meta推出，旨在展示Meta工程师在各个层面的工作，从底层框架到最终用户功能。\n*   **收听方式：** 听众可以在Spotify、Apple Podcasts、Pocket Casts等播客平台下载或收听该集。\n*   **反馈与职业机会：** 听众可以通过Instagram、Threads或X向Meta发送反馈，并访问Meta职业页面了解更多职业机会。",
      "shortSummary": "Meta正在进行一项雄心勃勃的项目，旨在将其核心移动消息库中数十年历史的C语言代码重写为Rust。这项工作在最新的Meta技术播客中得到了深入探讨，两位负责该项目的工程师分享了他们如何在没有Rust背景的情况下应对这一大规模转型，以及他们如何优化“开发者幸福感”。此举旨在现代化系统，并影响Messenger、Facebook、Instagram以及Meta的AR/VR等多个核心平台。",
      "translated_title": "深入了解Meta在移动端从C到Rust的转型",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Have you ever worked is legacy code? Are you curious what it takes to modernize systems at a massive scale? Pascal Hartig is joined on the latest Meta Tech Podcast by Elaine and Buping, two software engineers working on a bold project to rewrite the decades-old C code in one of Meta’s core messaging libraries [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/07/01/developer-tools/an-inside-look-at-metas-transition-from-c-to-rust-on-mobile/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/07/01/developer-tools/an-inside-look-at-metas-transition-from-c-to-rust-on-mobile/\">An inside look at Meta&#8217;s transition from C to Rust on mobile</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "Meta 加入 Kotlin 基金会 (原标题: Meta joins Kotlin Foundation)",
      "link": "https://engineering.fb.com/2025/06/30/android/meta-joins-kotlin-foundation/",
      "pubDate": "Mon, 30 Jun 2025 16:00:30 +0000",
      "isoDate": "2025-06-30T16:00:30.000Z",
      "creator": "",
      "summary": "## Meta 加入 Kotlin 基金会：推动 Android 开发生态系统\n\nMeta 近日宣布正式成为 Kotlin 基金会的黄金会员，这标志着其对 Kotlin 及其更广泛的 Android 开发生态系统承诺的一个重要里程碑。\n\n### Meta 对 Kotlin 的长期投入\n\n*   **大规模代码迁移**：在过去几年中，Meta 工程师一直在积极地将其庞大的 Android 代码库（包含数千万行代码）从 Java 迁移到 Kotlin。\n*   **内部工具开发**：为了促进这一大规模转型，Meta 开发了一款名为 **Kotlinator** 的内部工具。该工具能够自动化大部分转换过程，同时确保生成的 Kotlin 代码符合惯例并与内部框架兼容。\n*   **参与行业工作组**：Meta 持续在企业 Java-to-Kotlin 工作组中分享其在迁移方面的努力。\n\n### 公开贡献与开源项目\n\n*   **开源工具链**：Meta 通过开源项目公开分享其工作，例如在 Buck2 中的 Kotlin 和 Android 构建工具链。\n*   **提升开发效率**：这些工具链旨在提供工具和最佳实践，以提高构建速度和可扩展性，最终惠及更广泛的开发者社区。\n\n### 作为 Kotlin 基金会成员的未来贡献\n\n*   **支持生态系统发展**：Meta 加入 Kotlin 基金会符合其支持和推进 Kotlin 生态系统的更广泛战略。\n*   **资助计划**：Meta 将为 Kotlin 基金会的资助计划做出贡献。该计划旨在支持开源库作者，并鼓励学生和开发者进行创新。\n*   **促进社区协作**：Meta 的成员资格强调了其致力于培养一个强大、协作的 Kotlin 社区，并提升该语言在不同平台上的能力。\n\n### 了解更多 Meta 开源工作\n\n如需了解更多关于 Meta 开源工作的信息，可以访问 Meta 开源网站，订阅其 YouTube 频道，或关注其在 Facebook、Instagram、Threads、X 和 LinkedIn 上的账号。",
      "shortSummary": "Meta 已正式加入 Kotlin 基金会成为黄金会员，此举标志着其对 Kotlin 和 Android 开发生态系统承诺的重要里程碑。过去几年，Meta 已将数千万行 Android 代码从 Java 迁移到 Kotlin，并开发了内部工具 Kotlinator 辅助此过程。Meta 还通过开源项目如 Buck2 中的 Kotlin 构建工具链，公开分享其工作以提升开发效率。作为基金会成员，Meta 将支持其资助计划，旨在促进 Kotlin 社区的协作与创新，并提升语言能力。",
      "translated_title": "Meta 加入 Kotlin 基金会",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>We are proud to announce that Meta has officially joined the Kotlin Foundation as a gold member, marking a significant milestone in our ongoing commitment to Kotlin and the broader Android development ecosystem. Over the past several years, Meta engineers have been actively migrating our extensive Android codebase—comprising tens of millions of lines—from Java to [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/06/30/android/meta-joins-kotlin-foundation/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/06/30/android/meta-joins-kotlin-foundation/\">Meta joins Kotlin Foundation</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "将马尔贝克海底电缆延伸至巴西南部 (原标题: Extending the Malbec subsea cable to Southern Brazil)",
      "link": "https://engineering.fb.com/2025/05/22/connectivity/extending-malbec-subsea-cable-southern-brazil/",
      "pubDate": "Thu, 22 May 2025 16:00:08 +0000",
      "isoDate": "2025-05-22T16:00:08.000Z",
      "creator": "",
      "summary": "## 马尔贝克海底电缆延伸项目概述\n\nMeta正与V.tal合作，计划于2027年前将马尔贝克（Malbec）海底电缆延伸至巴西的阿雷格里港（Porto Alegre）。此次延伸将使马尔贝克成为首条登陆南里奥格兰德州（Rio Grande do Sul）的海底电缆，旨在为巴西南部及邻近国家（包括阿根廷、智利、巴拉圭和乌拉圭）的数百万人口带来更强的连接性。\n\n### 项目详情与背景\n\n*   **合作方**：Meta与V.tal。\n*   **目标地点**：巴西阿雷格里港。\n*   **预计运营时间**：2027年。\n*   **电缆概况**：马尔贝克电缆全长2500公里，于2021年投入使用，主要提供南美洲南部锥体地区与巴西之间的连接。\n*   **新延伸线路**：将连接阿雷格里港与巴西的里约热内卢、圣保罗以及阿根廷的布宜诺斯艾利斯。\n\n### 重要意义与影响\n\n1.  **提升区域连接性**：\n    *   首次登陆南里奥格兰德州，显著增强该州及巴西南部地区的数字基础设施规模和可靠性。\n    *   改善阿根廷、智利、巴拉圭和乌拉圭等邻国的在线体验。\n    *   为数百万用户提供更优质的互联网服务。\n\n2.  **打造数字枢纽**：\n    *   将阿雷格里港确立为重要的数字枢纽，吸引数字基础设施公司入驻。\n    *   降低企业成本，改善消费者服务。\n    *   V.tal首席执行官Felipe Campos指出，这将是一个独特的数字基础设施，将吸引运营商、互联网服务提供商及其他海底电缆公司的兴趣。\n\n3.  **支持技术发展**：\n    *   此次投资是Meta数字基础设施投资的一部分，旨在满足日益增长的数字容量、弹性和全球覆盖需求。\n    *   南里奥格兰德州州长Eduardo Leite表示，该项目与州的经济、包容和可持续发展计划高度契合，并将促进人工智能（AI）项目的发展，确保AI及其他新兴技术惠及所有人。\n\n4.  **容量与服务提供**：\n    *   马尔贝克电缆将带来超过84太比特的国际容量，并提供与巴西北部和阿根廷的直接连接。\n    *   本地服务提供商将能够获取马尔贝克电缆的容量，以满足巴西南部各州数百万人口的额外带宽需求，并通过与邻国提供商的连接，进一步巩固巴西作为南美洲连接枢纽的地位。\n\n### 相关投资\n\nMeta此前已于今年早些时候在阿雷格里港激活了一个存在点（PoP），这有助于高效地在本地交付内容，从而降低互联网服务提供商的网络管理成本，并提高客户的服务质量。",
      "shortSummary": "Meta与V.tal合作，计划于2027年前将马尔贝克海底电缆延伸至巴西阿雷格里港。这将是首条登陆南里奥格兰德州的海底电缆，旨在显著提升巴西南部及阿根廷、智利、巴拉圭、乌拉圭等邻国的数字连接性、可靠性与在线体验。该项目将把阿雷格里港打造为重要的数字枢纽，促进当地数字经济发展，并支持AI等新兴技术应用，为数百万用户带来更好的互联网服务。",
      "translated_title": "将马尔贝克海底电缆延伸至巴西南部",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Meta is partnering with V.tal to extend the Malbec subsea cable to Porto Alegre, Brazil by 2027. With this new extension, Malbec will become the first subsea cable to land in the state of Rio Grande do Sul, bringing more connectivity to millions of people in Southern Brazil and neighboring countries. Malbec will improve the [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/22/connectivity/extending-malbec-subsea-cable-southern-brazil/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/22/connectivity/extending-malbec-subsea-cable-southern-brazil/\">Extending the Malbec subsea cable to Southern Brazil</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "千模之旅：扩展Instagram的推荐系统 (原标题: Journey to 1000 models: Scaling Instagram’s recommendation system)",
      "link": "https://engineering.fb.com/2025/05/21/production-engineering/journey-to-1000-models-scaling-instagrams-recommendation-system/",
      "pubDate": "Wed, 21 May 2025 16:00:38 +0000",
      "isoDate": "2025-05-21T16:00:38.000Z",
      "creator": "",
      "summary": "Instagram成功地将其推荐系统扩展到包含1000多个机器学习（ML）模型，同时保持了推荐质量和可靠性。这一扩展伴随着独特的挑战，尤其是在可靠性和可伸缩性方面。\n\n### 大量ML模型的需求\n\nInstagram的ML模型不仅用于Feed、Stories和Reels的个性化排名，还深入到评论排序、重要通知识别以及用户标签推荐等多个方面。每个排名表面都包含一个漏斗结构：\n\n*   **数据源（Sourcing/Retrieval）**：获取潜在内容。\n*   **早期排名（Early-Stage Ranking, ESR）**：初步筛选和排序。\n*   **后期排名（Late-Stage Ranking, LSR）**：精细化排序，操作成本更高，处理的候选数量更少。\n\n在每个表面和层级中，持续的实验和排列组合导致了模型数量的爆炸式增长，对基础设施带来了严峻挑战。\n\n### 基础设施成熟度滞后于扩展目标\n\nInstagram团队意识到其基础设施的成熟度未能跟上雄心勃勃的扩展目标，并识别出以下风险：\n\n*   **发现（Discovery）**：难以追踪生产环境中的模型增长，产品ML团队缺乏统一的模型信息来源。\n*   **发布（Release）**：缺乏安全、一致、快速的模型发布流程，影响了ML开发速度和产品创新。\n*   **健康（Health）**：缺乏对模型预测质量的统一衡量标准，导致质量问题难以被发现。\n\n### 解决方案概述\n\n为解决上述风险，Instagram实施了多项创新解决方案：\n\n1.  **模型注册中心（Model Registry）**：\n    *   **核心功能**：作为生产模型重要性、业务功能及其他元数据的分类账本。\n    *   **作用**：成为自动化系统级可观测性、变更管理和模型健康的基础数据源。\n    *   **解决的问题**：\n        *   **调查效率低下**：在注册中心建立之前，故障排查耗时且易错，需要人工询问模型所有者获取上下文信息。\n        *   **缺乏统一标准**：标准化了模型重要性和业务功能的收集，确保运营资源集中于最重要的模型。\n        *   **基础架构**：基于Meta的分布式配置套件Configerator构建，提供灵活可扩展的架构，支持自动化工具的开发。\n    *   **关键属性**：\n        *   **模型类型（Model Types）**：描述ML工作负载的用途，例如“ig_stories_tray_mtml”标识了模型在Instagram Stories托盘中作为多任务多标签模型的作用。用于AI资产标记、资产管理、策略执行和分析。\n        *   **关键性（Criticality）**：采纳Meta的GSI（全球服务指数）分层系统（TIER0-TIER4），根据模型可能导致的最大事件严重级别进行标注。这确保了统一的响应要求和监控级别，避免了团队自行提升模型重要性。\n    *   **自动化基础**：一旦大量模型被注册，即可与Meta的监控和可观测性套件（如SLICK）完全集成，实现模型性能监控、警报和仪表盘的自动化。\n\n2.  **模型发布工具（Model Launch Tooling）**：\n    *   **改进前流程**：传统服务发布需要克隆整个服务、发送影子流量、运行过载测试，耗时数天且效率低下。流量切换过程繁琐，需要分批次进行，且团队需手动设置新警报。\n    *   **改进后流程**：开发了更理想的自动化发布流程，包括估算、审批、准备、扩容和最终确定。将模型发布时间从数天缩短到数小时。\n    *   **虚拟资源池（Virtual Pools）**：通过为每个团队分配资源配额，解决了资源竞争问题，并支持并行发布，减少了繁文缛节，将优先级决策下放到团队层面。\n    *   **容量估算**：预先进行容量估算至关重要，它能准确评估指标改进与成本之间的关系，避免因资源不足而导致昂贵的回滚。\n\n3.  **模型稳定性（Model Stability）**：\n    *   定义并操作化了模型稳定性这一开创性指标，用于衡量模型预测的准确性。\n    *   利用模型稳定性为模型注册中心中的所有模型生成服务等级目标（SLO），从而简化了对整个产品表面ML健康状况的理解。\n\n通过这些策略和工具，Instagram得以在保持高质量用户体验的同时，应对其不断增长的算法基础设施的复杂性，确保了数十亿用户的无缝和引人入胜的体验。",
      "shortSummary": "Instagram成功将其推荐系统扩展至1000多个ML模型，同时保持了质量和可靠性。为应对模型爆炸式增长带来的挑战，团队实施了多项关键解决方案。核心措施包括建立“模型注册中心”作为统一的模型信息来源，改进“模型发布工具”以实现快速自动化部署，以及定义“模型稳定性”指标来衡量预测质量。这些举措显著提升了ML开发效率、系统可靠性和可观测性，确保了Instagram在全球范围内的无缝用户体验。",
      "translated_title": "千模之旅：扩展Instagram的推荐系统",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>In this post, we explore how Instagram has successfully scaled its algorithm to include over 1000 ML models without sacrificing recommendation quality or reliability.  We delve into the intricacies of managing such a vast array of models, each with its own performance characteristics and product goals.  We share insights and lessons learned along the way—from [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/21/production-engineering/journey-to-1000-models-scaling-instagrams-recommendation-system/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/21/production-engineering/journey-to-1000-models-scaling-instagrams-recommendation-system/\">Journey to 1000 models: Scaling Instagram&#8217;s recommendation system</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "Meta 为生成式AI（GenAI）进行的HHVM全栈优化 (原标题: Meta’s Full-stack HHVM optimizations for GenAI)",
      "link": "https://engineering.fb.com/2025/05/20/web/metas-full-stack-hhvm-optimizations-for-genai/",
      "pubDate": "Tue, 20 May 2025 16:00:29 +0000",
      "isoDate": "2025-05-20T16:00:29.000Z",
      "creator": "",
      "summary": "# Meta 为生成式AI（GenAI）进行的HHVM全栈优化\n\n随着Meta推出利用生成式AI（GenAI）的创新产品，其底层基础设施组件也必须随之演进。通过应用基础设施知识和优化，Meta能够适应不断变化的产品需求，并提供更好的产品体验。最终，基础设施系统需要在提供高质量体验和可持续运行系统之间取得平衡。\n\n## 背景与挑战\n\n*   **Web Foundation团队职责**：该团队负责运营Meta的单体Web层，运行Hack语言。他们确保Web层基础设施的健康和良好设计，处理事件响应，并构建维护网站正常运行所需的组件。\n*   **“好公民”原则**：为确保共享层稳定，团队制定了指导方针，其中核心规则是请求运行时限制——每个请求的执行时间不得超过30秒。这是HHVM（HipHop虚拟机）运行时的结果，因为每个请求对应一个有限的worker线程。请求耗时过长会导致可用线程减少，进而影响用户可用性。\n*   **传统Web服务器特性**：\n    *   主要为前端请求（渲染网页、GraphQL查询）优化。\n    *   延迟通常在数百毫秒到几秒，远低于30秒的限制。\n    *   每秒可处理约500个查询。\n    *   约三分之二的时间用于I/O，三分之一用于CPU工作。Hack语言支持异步I/O（asyncio）以提高性能。\n*   **GenAI产品（特别是LLM）的新要求**：\n    *   核心推理流程：模型以令牌流形式响应，可能需要几秒甚至几分钟才能完成（用户体验为聊天机器人“正在输入”）。\n    *   需要尽快将响应流式传输给用户。\n    *   总请求延迟显著延长（以秒计）。\n    *   对基础设施的影响：调用LLM前的关键路径开销最小，但请求的其余部分持续时间很长，大部分时间都在等待I/O。\n\n## 优化措施\n\n为了应对GenAI带来的新要求，Web Foundation团队重新审视了单体Web层的运行规则，并推出了一个专用的Web租户（WWW的独立部署），允许进行定制配置，以更好地适应工作负载的需求。主要优化包括：\n\n1.  **请求超时设置**：\n    *   在隔离的Web层上，可以增加GenAI请求的运行时限制。\n    *   这使得长时间运行的流量得以隔离，避免对生产层其他部分造成负面影响，防止推理时间超过30秒的请求超时。\n\n2.  **线程池大小调整**：\n    *   请求运行时间延长意味着worker线程的可用性降低（每个请求与一个线程1:1对应）。\n    *   由于Web服务器内存有限，通过总内存除以每个请求的内存限制，可以得出最大并发请求数，从而确定可同时执行的请求数量。\n    *   最终，GenAI主机上的线程数增加到约1000个，而普通Web服务器上只有几百个。\n\n3.  **JIT缓存和“Jump-Start”**：\n    *   HHVM是一种即时编译（JIT）语言，首次执行函数时需要编译为机器码。\n    *   “Jump-Start”技术允许Web服务器使用先前预热的服务器的输出来预填充JIT缓存。\n    *   通过允许GenAI主机使用主Web层的Jump-Start配置文件，即使代码重叠不完全相同，也能大大加快执行速度。\n\n4.  **请求预热（Warm-up）**：\n    *   HHVM支持在服务器启动时执行虚拟请求，这些请求的结果会被丢弃。\n    *   目的是预热Web服务器内的非代码缓存（如配置值和服务发现信息）。\n    *   通过在预热请求中获取并缓存这些信息，可以避免用户在首次访问时感知到这些初始获取的延迟。\n\n5.  **影子流量（Shadow Traffic）**：\n    *   Meta大量使用实时配置来控制功能发布，这意味着启动时消耗的Jump-Start配置文件可能无法覆盖服务器未来执行的所有代码路径。\n    *   为了在稳定状态下保持覆盖率，团队增加了请求影子功能，确保门控更改仍然被JIT缓存覆盖。\n\n这些全栈优化使得Meta能够有效支持其不断增长的GenAI产品需求，同时保持基础设施的性能和可持续性。",
      "shortSummary": "Meta为支持生成式AI（GenAI）产品，对HHVM（HipHop虚拟机）基础设施进行了全栈优化。通过将GenAI推理流量分离到专用Web层，并针对其长时间运行、I/O密集型特性进行定制，Meta实现了30%的延迟改善。主要优化包括增加请求超时、调整线程池大小、利用JIT缓存的Jump-Start功能、执行请求预热以及引入影子流量，以确保GenAI服务的性能和稳定性，同时不影响现有Web服务。",
      "translated_title": "Meta 为生成式AI（GenAI）进行的HHVM全栈优化",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>As Meta has launched new, innovative products leveraging generative AI (GenAI), we need to make sure the underlying infrastructure components evolve along with it. Applying infrastructure knowledge and optimizations have allowed us to adapt to changing product requirements, delivering a better product along the way. Ultimately, our infrastructure systems need to balance our need to [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/20/web/metas-full-stack-hhvm-optimizations-for-genai/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/20/web/metas-full-stack-hhvm-optimizations-for-genai/\">Meta&#8217;s Full-stack HHVM optimizations for GenAI</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "开源 Pyrefly：一个用 Rust 编写的更快 Python 类型检查器 (原标题: Open-sourcing Pyrefly: A faster Python type checker written in Rust)",
      "link": "https://engineering.fb.com/2025/05/15/developer-tools/open-sourcing-pyrefly-a-faster-python-type-checker-written-in-rust/",
      "pubDate": "Thu, 15 May 2025 18:30:33 +0000",
      "isoDate": "2025-05-15T18:30:33.000Z",
      "creator": "",
      "summary": "## Pyrefly：Meta 开源的 Rust 编写的 Python 类型检查器\n\n### 项目起源与发展\n\n*   **2017年启动**：Pyrefly 最初由 Meta 的工程师于2017年开发，旨在为 Instagram 的类型化 Python 代码库提供类型检查。\n*   **持续演进**：随着类型系统的不断发展，该类型检查器最终演变为 Pyrefly。\n\n### Pyrefly 是什么？\n\n*   **新一代工具**：Pyrefly 是一个全新的 Python 类型检查器和 IDE 体验工具。\n*   **技术栈**：它使用 Rust 语言编写，旨在提供更快的性能。\n*   **开源可用**：现在，Pyrefly 已向整个 Python 社区开源，可供广泛使用。\n\n### 核心功能与优势\n\n*   **多用途支持**：Pyrefly 支持命令行界面（CLI）使用和集成开发环境（IDE）集成。\n*   **提前发现错误**：其主要设计目标是在运行时之前帮助开发者捕获 Python 代码库中的错误。\n*   **可扩展性**：该工具能够扩展到任何规模的 Python 代码库，包括大型单体仓库（monorepos）。\n\n### Meta Tech Podcast 专题讨论\n\n*   **播客介绍**：Meta Tech Podcast 曾专门讨论 Pyrefly 的发布。\n*   **团队访谈**：节目中，Pascal Hartig 采访了 Pyrefly 团队的 Maggie、Rebecca 和 Neil，深入探讨了该工具的构建过程以及如何实现可扩展的增量类型检查器。\n*   **收听渠道**：该播客节目可在 Spotify、Apple Podcasts、Pocket Casts 等平台收听。\n\n### 相关链接\n\n文章中提及了与 Pyrefly 相关的其他资源和标准：\n\n*   Pyrefly\n*   Pyre\n*   Ruff\n*   PEP 484",
      "shortSummary": "Pyrefly 是 Meta 开源的一个用 Rust 编写的全新 Python 类型检查器和 IDE 体验工具。它起源于2017年为 Instagram 代码库开发的类型检查器，旨在帮助开发者在运行时前捕获错误。Pyrefly 支持 CLI 和 IDE 集成，可扩展到任何规模的 Python 代码库，并已在 Meta Tech Podcast 上进行专题讨论。",
      "translated_title": "开源 Pyrefly：一个用 Rust 编写的更快 Python 类型检查器",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Back in 2017, engineers at Meta sought to create a type checker for Instagram&#8217;s typed Python codebase. Years later, as the type system continued to evolve, that type checker eventually became Pyrefly.  Pyrefly is a new type checker and IDE experience for Python, written with Rust, and now available for the entire Python community to [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/15/developer-tools/open-sourcing-pyrefly-a-faster-python-type-checker-written-in-rust/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/15/developer-tools/open-sourcing-pyrefly-a-faster-python-type-checker-written-in-rust/\">Open-sourcing Pyrefly: A faster Python type checker written in Rust</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    },
    {
      "title": "Pyrefly 介绍：一种新的 Python 类型检查器和 IDE 体验 (原标题: Introducing Pyrefly: A new type checker and IDE experience for Python)",
      "link": "https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python/",
      "pubDate": "Thu, 15 May 2025 18:30:08 +0000",
      "isoDate": "2025-05-15T18:30:08.000Z",
      "creator": "",
      "summary": "## Pyrefly 介绍：一种新的 Python 类型检查器和 IDE 体验\n\nMeta 宣布推出 Pyrefly 的 Alpha 版本，这是一个用 Rust 编写的开源 Python 类型检查器和 IDE 扩展。\n\n### Pyrefly 是什么？\n*   **静态类型检查器**：分析 Python 代码以确保类型一致性，并在代码运行前帮助捕获错误。\n*   **集成与灵活性**：支持 IDE 集成（如 VSCode 扩展）和命令行 (CLI) 使用，方便融入开发工作流。\n*   **开源**：在 GitHub 上以 MIT 许可证发布，鼓励社区协作和贡献。\n\n### 为什么构建 Pyrefly？\n*   **背景**：Pyrefly 源于 Meta 在 2017 年为处理 Instagram 庞大的类型化 Python 代码库而创建的 Pyre 类型检查器（用 OCaml 编写）。\n*   **演进需求**：随着类型系统的发展以及对响应式 IDE 类型检查的需求，Pyre 无法满足，因此需要一种新的方法。\n*   **目标**：创建一种可扩展的类型检查器，能够提供代码导航、大规模检查以及将类型导出到其他服务的能力。\n\n### Pyrefly 的核心原则\n1.  **性能**：\n    *   旨在将通常在 CI 上进行的检查转移到每次按键时进行。\n    *   能够以极高的速度检查代码（在大型代码库上可达每秒 180 万行）。\n    *   用 Rust 实现，并针对所有规模的代码库进行高性能设计，注重增量更新。\n2.  **IDE 优先**：\n    *   确保 IDE 和命令行共享一致的视图。\n    *   从一开始就设计抽象层，以捕获差异而避免不必要的开销，这比后期改造 Pyre 更有效。\n3.  **类型推断**：\n    *   即使代码未完全注解，用户也能从类型中受益。\n    *   自动推断返回类型和局部变量类型，并在 IDE 中显示。\n    *   在 IDE 中支持双击插入推断出的类型。\n4.  **开源**：\n    *   Python 语言及其类型规范都是开源的，这极大地促进了 Pyrefly 的开发。\n    *   Pyrefly 本身也是开源的，鼓励通过拉取请求和问题报告进行贡献，并设有 Discord 频道进行讨论。\n\n### 如何开始使用 Pyrefly？\n*   **安装**：通过命令行 `pip install pyrefly` 进行安装。\n*   **迁移**：将现有类型检查器配置迁移到 Pyrefly。\n*   **增强 IDE**：下载适用于 VSCode 的 Pyrefly 扩展，享受快速的 IDE 体验。\n*   **反馈**：在 GitHub 上提交反馈。\n\n### Pyrefly 的未来\n*   **社区合作**：将与 Python 社区合作，推动语言发展并改善开发者体验。\n*   **知识共享**：Meta 将分享其在动态语言中利用类型所带来的生产力和安全性方面的经验和工具。\n*   **发展阶段**：目前处于 Alpha 阶段，目标是在今年夏天移除 Alpha 标签。用户的反馈对于实现这一目标至关重要。\n\n### 致谢\nPyrefly 由 Meta 的 Python 语言工具团队创建。",
      "shortSummary": "Pyrefly 是 Meta 推出的一款新的开源 Python 静态类型检查器和 IDE 扩展，由 Rust 编写。它旨在通过在代码运行前检查类型一致性、捕获错误来提升开发者体验。Pyrefly 强调高性能（每秒处理百万行代码）、IDE 优先集成和自动类型推断。作为 Pyre 的演进，它目前处于 Alpha 阶段，可在 GitHub 上获取，并计划在今年夏天移除 Alpha 标签，积极寻求社区反馈和贡献。",
      "translated_title": "Pyrefly 介绍：一种新的 Python 类型检查器和 IDE 体验",
      "images": [],
      "contentSource": "RSS",
      "content": "<p>Today we are announcing an alpha version of Pyrefly, an open source Python type checker and IDE extension crafted in Rust. Pyrefly is a static type checker that analyzes Python code to ensure type consistency and help you catch errors throughout your codebase before your code runs. It also supports IDE integration and CLI usage [...]</p>\n<p><a class=\"btn btn-secondary understrap-read-more-link\" href=\"https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python/\">Read More...</a></p>\n<p>The post <a rel=\"nofollow\" href=\"https://engineering.fb.com/2025/05/15/developer-tools/introducing-pyrefly-a-new-type-checker-and-ide-experience-for-python/\">Introducing Pyrefly: A new type checker and IDE experience for Python</a> appeared first on <a rel=\"nofollow\" href=\"https://engineering.fb.com\">Engineering at Meta</a>.</p>\n"
    }
  ],
  "lastUpdated": "2025-07-25T05:34:30.003Z"
}